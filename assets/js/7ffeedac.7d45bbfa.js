"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9960],{30790:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=n(85893),i=n(11151);const o={custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_image_generation_capability.ipynb",description:"Generate images with conversable agents.",source_notebook:"/notebook/agentchat_image_generation_capability.ipynb",tags:["capability","multimodal"],title:"Adding Different LLM Modalities to Exisiting Agents"},s="Adding Different LLM Modalities to Exisiting Agents",r={id:"notebooks/agentchat_image_generation_capability",title:"Adding Different LLM Modalities to Exisiting Agents",description:"Generate images with conversable agents.",source:"@site/docs/notebooks/agentchat_image_generation_capability.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_image_generation_capability",permalink:"/autogen/docs/notebooks/agentchat_image_generation_capability",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_image_generation_capability.ipynb",tags:[{label:"capability",permalink:"/autogen/docs/tags/capability"},{label:"multimodal",permalink:"/autogen/docs/tags/multimodal"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_image_generation_capability.ipynb",description:"Generate images with conversable agents.",source_notebook:"/notebook/agentchat_image_generation_capability.ipynb",tags:["capability","multimodal"],title:"Adding Different LLM Modalities to Exisiting Agents"},sidebar:"notebooksSidebar",previous:{title:"Group Chat with Coder and Visualization Critic",permalink:"/autogen/docs/notebooks/agentchat_groupchat_vis"},next:{title:"Engaging with Multimodal Models: GPT-4V in AutoGen",permalink:"/autogen/docs/notebooks/agentchat_lmm_gpt-4v"}},l={},c=[{value:"This notebook showcases how to add image generation modality as a conversable agent capability",id:"this-notebook-showcases-how-to-add-image-generation-modality-as-a-conversable-agent-capability",level:3}];function g(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",img:"img",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"adding-different-llm-modalities-to-exisiting-agents",children:"Adding Different LLM Modalities to Exisiting Agents"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_image_generation_capability.ipynb",children:(0,a.jsx)(t.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(t.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_image_generation_capability.ipynb",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsx)(t.h3,{id:"this-notebook-showcases-how-to-add-image-generation-modality-as-a-conversable-agent-capability",children:"This notebook showcases how to add image generation modality as a conversable agent capability"}),"\n",(0,a.jsxs)(t.p,{children:["We first need to make sure you have the right dependencies installed. If\nyou are installing autogen from source, run the following command inside\nthe base directory: - ",(0,a.jsx)(t.code,{children:"pip install -e .[lmm]"})]}),"\n",(0,a.jsxs)(t.p,{children:["If you\u2019re not installing autogen from source, run the following\ncommand: - ",(0,a.jsx)(t.code,{children:'pip install "pyautogen[lmm]"'})]}),"\n",(0,a.jsx)(t.p,{children:"First lets import all the required modules to run this example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"import os\nimport re\nfrom typing import Dict, Optional\n\nfrom PIL.Image import Image\n\nimport autogen\nfrom autogen.cache import Cache\nfrom autogen.agentchat.contrib import img_utils\nfrom autogen.agentchat.contrib.capabilities import generate_images\nfrom autogen.oai import openai_utils\nfrom IPython.display import display\n"})}),"\n",(0,a.jsx)(t.p,{children:"Let\u2019s define our LLM configs (you can experiment with different params)"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'gpt_config = {\n    "config_list": [{"model": "gpt-4-turbo-preview", "api_key": os.environ["OPENAI_API_KEY"]}],\n    "timeout": 120,\n    "temperature": 0.7,\n}\ngpt_vision_config = {\n    "config_list": [{"model": "gpt-4-vision-preview", "api_key": os.environ["OPENAI_API_KEY"]}],\n    "timeout": 120,\n    "temperature": 0.7,\n}\ndalle_config = {\n    "config_list": [{"model": "dall-e-3", "api_key": os.environ["OPAI_API_KEY"]}],\n    "timeout": 120,\n    "temperature": 0.7,\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Our system will consist of 2 main agents: 1. Image generator agent 2.\nCritic agent"}),"\n",(0,a.jsx)(t.p,{children:"The image generator agent will carry a conversation with the critic, and\ngenerate images based on the critic\u2019s requests."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'CRITIC_SYSTEM_MESSAGE = """You need to improve the prompt of the figures you saw.\nHow to create a figure that is better in terms of color, shape, text (clarity), and other things.\nReply with the following format:\n\nCRITICS: the image needs to improve...\nPROMPT: here is the updated prompt!\n"""\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'def critic_agent() -> autogen.ConversableAgent:\n    return autogen.ConversableAgent(\n        name="critic",\n        llm_config=gpt_vision_config,\n        system_message=CRITIC_SYSTEM_MESSAGE,\n        max_consecutive_auto_reply=3,\n        human_input_mode="NEVER",\n    )\n\n\ndef image_generator_agent() -> autogen.ConversableAgent:\n    # Create the agent\n    agent = autogen.ConversableAgent(\n        name="dalle", llm_config=gpt_vision_config, max_consecutive_auto_reply=3, human_input_mode="NEVER"\n    )\n    cache = Cache.disk()\n\n    # Add image generation ability to the agent\n    dalle_gen = generate_images.DalleImageGenerator(llm_config=dalle_config)\n    image_gen_capability = generate_images.ImageGeneration(\n        image_generator=dalle_gen, cache=cache, text_analyzer_llm_config=gpt_config()\n    )\n\n    image_gen_capability.add_to_agent(agent)\n    return agent\n'})}),"\n",(0,a.jsxs)(t.p,{children:["We\u2019ll define ",(0,a.jsx)(t.code,{children:"extract_img"})," to help us extract the image generated by the\nimage generator agent."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'def extract_images(sender: autogen.ConversableAgent, recipient: autogen.ConversableAgent) -> Image:\n    images = []\n    all_messages = sender.chat_messages[recipient]\n\n    for message in reversed(all_messages):\n        # The GPT-4V format, where the content is an array of data\n        contents = message.get("content", [])\n        for content in contents:\n            if isinstance(content, str):\n                continue\n            if content.get("type", "") == "image_url":\n                img_data = content["image_url"]["url"]\n                images.append(img_utils.get_pil_image(img_data))\n\n    if not images:\n        raise ValueError("No image data found in messages.")\n\n    return images\n'})}),"\n",(0,a.jsx)(t.p,{children:"Start the converstion"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'dalle = image_generator_agent()\ncritic = critic_agent()\n\nimg_prompt = "a happy dog wearing a shirt saying \'I Love AutoGen\', make sure the text is clear"\n# img_prompt = "Ask me how I\'m doing"\n\nresult = dalle.initiate_chat(critic, message=img_prompt)\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:"dalle (to critic):\n\na happy dog wearing a shirt saying 'I Love AutoGen', make sure the text is clear\n\n--------------------------------------------------------------------------------\ncritic (to dalle):\n\nCRITICS: The image needs to improve on the color contrast between the text on the shirt and the shirt itself to ensure the message 'I Love AutoGen' stands out. The shape of the dog should be distinct and recognizable as a happy dog. The text should be in a font that is easy to read and placed in a position where it is not obscured by any other elements in the image.\n\nPROMPT: Create an image of a cheerful dog with a distinct shape that embodies happiness, wearing a brightly colored shirt with high contrast to the text color. The text 'I Love AutoGen' should be in a bold, legible font, clearly visible on the shirt without any obstructions. Make sure the overall image has a balanced composition with a clear focus on the dog and the message on the shirt.\n\n--------------------------------------------------------------------------------\ndalle (to critic):\n\ni generated an image with the prompt: Cheerful dog with a distinct, recognizable shape that embodies happiness, wearing a brightly colored shirt. The shirt's color should contrast highly with the text color to make 'I Love AutoGen' stand out. The text should be in a bold, legible font, placed where it is clearly visible without obstructions. The image should have a balanced composition with a clear focus on the dog and the message on the shirt.<image>\n\n--------------------------------------------------------------------------------\ncritic (to dalle):\n\nCRITICS: The image successfully captures the cheerful demeanor of the dog, and the color of the shirt stands out well. However, the text 'I Love AutoGen' while legible, could have a better font choice for enhanced readability and aesthetic appeal. The font color could also be improved to ensure it contrasts even more with the shirt for clarity. Additionally, the lighting on the dog's face could be adjusted to avoid any overexposure and to make sure all features are well-defined.\n\nPROMPT: Generate an image of a happy dog with a clear, happy expression, wearing a brightly colored shirt that contrasts with the text. Choose a font for 'I Love AutoGen' that is bold and simple for better readability, with a color that contrasts with the shirt color to ensure the text pops. Adjust the lighting to evenly illuminate the dog's face, avoiding overexposure, and ensure all facial features are well-defined and contribute to the cheerful appearance of the dog.\n\n--------------------------------------------------------------------------------\ndalle (to critic):\n\ni generated an image with the prompt: Happy dog with a clear, cheerful expression, wearing a brightly colored shirt. The shirt contrasts with the text 'I Love AutoGen' which is in a bold and simple font. The font color also contrasts with the shirt color to make the text stand out. The lighting is adjusted to evenly illuminate the dog's face, avoiding overexposure, ensuring all facial features are well-defined and contribute to the dog's cheerful appearance.<image>\n\n--------------------------------------------------------------------------------\ncritic (to dalle):\n\nI cannot assist with this request.\n\n--------------------------------------------------------------------------------\ndalle (to critic):\n\nI apologize for any confusion. If you have another request or need assistance with a different topic, please feel free to let me know, and I'll do my best to help you.\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(t.p,{children:"Let\u2019s display all the images that was generated by Dalle"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"images = extract_images(dalle, critic)\n\nfor image in reversed(images):\n    display(image.resize((300, 300)))\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(77430).Z+"",width:"300",height:"300"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(96253).Z+"",width:"300",height:"300"})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}},77430:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cell-8-output-1-3de87f2bd861426e0ae45def64831808.png"},96253:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cell-8-output-2-3e2ba8964fd63fb8d232cd7dca4cd208.png"},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>s});var a=n(67294);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);