"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9012],{5038:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var t=r(5893),s=r(1151);const i={sidebar_label:"base_logger",title:"logger.base_logger"},o=void 0,l={id:"reference/logger/base_logger",title:"logger.base_logger",description:"BaseLogger",source:"@site/docs/reference/logger/base_logger.md",sourceDirName:"reference/logger",slug:"/reference/logger/base_logger",permalink:"/autogen/docs/reference/logger/base_logger",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/logger/base_logger.md",tags:[],version:"current",frontMatter:{sidebar_label:"base_logger",title:"logger.base_logger"},sidebar:"referenceSideBar",previous:{title:"markdown_code_extractor",permalink:"/autogen/docs/reference/coding/markdown_code_extractor"},next:{title:"client",permalink:"/autogen/docs/reference/oai/client"}},c={},a=[{value:"BaseLogger",id:"baselogger",level:2},{value:"start",id:"start",level:3},{value:"log_chat_completion",id:"log_chat_completion",level:3},{value:"log_new_agent",id:"log_new_agent",level:3},{value:"log_new_wrapper",id:"log_new_wrapper",level:3},{value:"log_new_client",id:"log_new_client",level:3},{value:"stop",id:"stop",level:3},{value:"get_connection",id:"get_connection",level:3}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"baselogger",children:"BaseLogger"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class BaseLogger(ABC)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"start",children:"start"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@abstractmethod\ndef start() -> str\n"})}),"\n",(0,t.jsx)(n.p,{children:"Open a connection to the logging database, and start recording."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"session_id"})," ",(0,t.jsx)(n.em,{children:"str"})," - a unique id for the logging session"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"log_chat_completion",children:"log_chat_completion"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@abstractmethod\ndef log_chat_completion(invocation_id: uuid.UUID, client_id: int,\n                        wrapper_id: int, request: Dict,\n                        response: Union[str, ChatCompletion], is_cached: int,\n                        cost: float, start_time: str) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Log a chat completion to database."}),"\n",(0,t.jsxs)(n.p,{children:["In AutoGen, chat completions are somewhat complicated because they are handled by the ",(0,t.jsx)(n.code,{children:"autogen.oai.OpenAIWrapper"})," class.\nOne invocation to ",(0,t.jsx)(n.code,{children:"create"})," can lead to multiple underlying OpenAI calls, depending on the llm_config list used, and\nany errors or retries."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"invocation_id"})," ",(0,t.jsx)(n.em,{children:"uuid"})," - A unique identifier for the invocation to the OpenAIWrapper.create method call"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"client_id"})," ",(0,t.jsx)(n.em,{children:"int"})," - A unique identifier for the underlying OpenAI client instance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"wrapper_id"})," ",(0,t.jsx)(n.em,{children:"int"})," - A unique identifier for the OpenAIWrapper instance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"request"})," ",(0,t.jsx)(n.em,{children:"dict"})," - A dictionary representing the the request or call to the OpenAI client endpoint"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"response"})," ",(0,t.jsx)(n.em,{children:"str or ChatCompletion"})," - The response from OpenAI"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"is_chached"})," ",(0,t.jsx)(n.em,{children:"int"})," - 1 if the response was a cache hit, 0 otherwise"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cost(float)"})," - The cost for OpenAI response"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"start_time"})," ",(0,t.jsx)(n.em,{children:"str"})," - A string representing the moment the request was initiated"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"log_new_agent",children:"log_new_agent"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@abstractmethod\ndef log_new_agent(agent: ConversableAgent, init_args: Dict) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Log the birth of a new agent."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"agent"})," ",(0,t.jsx)(n.em,{children:"ConversableAgent"})," - The agent to log."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"init_args"})," ",(0,t.jsx)(n.em,{children:"dict"})," - The arguments passed to the construct the conversable agent"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"log_new_wrapper",children:"log_new_wrapper"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@abstractmethod\ndef log_new_wrapper(wrapper: OpenAIWrapper, init_args: Dict) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Log the birth of a new OpenAIWrapper."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"wrapper"})," ",(0,t.jsx)(n.em,{children:"OpenAIWrapper"})," - The wrapper to log."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"init_args"})," ",(0,t.jsx)(n.em,{children:"dict"})," - The arguments passed to the construct the wrapper"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"log_new_client",children:"log_new_client"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@abstractmethod\ndef log_new_client(client: Union[AzureOpenAI, OpenAI], wrapper: OpenAIWrapper,\n                   init_args: Dict) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Log the birth of a new OpenAIWrapper."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"wrapper"})," ",(0,t.jsx)(n.em,{children:"OpenAI"})," - The OpenAI client to log."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"init_args"})," ",(0,t.jsx)(n.em,{children:"dict"})," - The arguments passed to the construct the client"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"stop",children:"stop"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@abstractmethod\ndef stop() -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Close the connection to the logging database, and stop logging."}),"\n",(0,t.jsx)(n.h3,{id:"get_connection",children:"get_connection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@abstractmethod\ndef get_connection() -> Union[sqlite3.Connection]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Return a connection to the logging database."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>o});var t=r(7294);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);