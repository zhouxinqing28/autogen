(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8491],{9998:(e,n,t)=>{var a={"./agentchat_RetrieveChat.mdx":9748,"./agentchat_auto_feedback_from_code_execution.mdx":6973,"./agentchat_function_call_async.mdx":971,"./agentchat_groupchat.mdx":5108,"./agentchat_groupchat_RAG.mdx":5551,"./agentchat_groupchat_finite_state_machine.mdx":775,"./agentchat_logging.mdx":1401,"./agentchat_multi_task_async_chats.mdx":3914,"./agentchat_multi_task_chats.mdx":5437,"./agentchat_society_of_mind.mdx":5360,"./agentchats_sequential_chats.mdx":4095};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=9998},4848:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>h});var a=t(5893),o=t(1151);function i(){const e=[],n=t(9998);return n.keys().forEach((t=>{const a=n(t);t=t.slice(0,-4),e.push({title:a.frontMatter.title,link:"/autogen/docs/notebooks/"+t,description:a.frontMatter.description,image:a.frontMatter.image,tags:a.frontMatter.tags,source:a.frontMatter.source_notebook})})),e}var s=t(3891);const r={hide_table_of_contents:!0},c="Notebooks",l={id:"notebooks",title:"Notebooks",description:"This page contains a collection of notebooks that demonstrate how to use",source:"@site/docs/notebooks.mdx",sourceDirName:".",slug:"/notebooks",permalink:"/autogen/docs/notebooks",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/notebooks.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"notebooksSidebar",next:{title:"Using RetrieveChat for Retrieve Augmented Code Generation and Question Answering",permalink:"/autogen/docs/notebooks/agentchat_RetrieveChat"}},d={},h=[];function u(e){const n={code:"code",h1:"h1",p:"p",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"notebooks",children:"Notebooks"}),"\n",(0,a.jsxs)(n.p,{children:["This page contains a collection of notebooks that demonstrate how to use\nAutoGen. The notebooks are tagged with the topics they cover.\nFor example, a notebook that demonstrates how to use function calling will\nbe tagged with ",(0,a.jsx)(n.code,{children:"function call"}),"."]}),"\n",(0,a.jsx)(s.Z,{items:i(),target:"_self",allowDefaultImage:!1})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},9748:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>d,toc:()=>l});var a=t(5893),o=t(1151);const i={tags:["RAG"],description:"Explore the use of AutoGen's RetrieveChat for tasks like code generation from docstrings, answering complex questions with human feedback, and exploiting features like Update Context, custom prompts, and few-shot learning.\n",source_notebook:"/notebook/agentchat_RetrieveChat.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_RetrieveChat.ipynb",title:"Using RetrieveChat for Retrieve Augmented Code Generation and Question Answering"},s="Using RetrieveChat for Retrieve Augmented Code Generation and Question Answering",r={id:"notebooks/agentchat_RetrieveChat",title:"Using RetrieveChat for Retrieve Augmented Code Generation and Question Answering",description:"Explore the use of AutoGen's RetrieveChat for tasks like code generation from docstrings, answering complex questions with human feedback, and exploiting features like Update Context, custom prompts, and few-shot learning.\n",source:"@site/docs/notebooks/agentchat_RetrieveChat.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_RetrieveChat",permalink:"/autogen/docs/notebooks/agentchat_RetrieveChat",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_RetrieveChat.ipynb",tags:[{label:"RAG",permalink:"/autogen/docs/tags/rag"}],version:"current",frontMatter:{tags:["RAG"],description:"Explore the use of AutoGen's RetrieveChat for tasks like code generation from docstrings, answering complex questions with human feedback, and exploiting features like Update Context, custom prompts, and few-shot learning.\n",source_notebook:"/notebook/agentchat_RetrieveChat.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_RetrieveChat.ipynb",title:"Using RetrieveChat for Retrieve Augmented Code Generation and Question Answering"},sidebar:"notebooksSidebar",previous:{title:"Notebooks",permalink:"/autogen/docs/notebooks"},next:{title:"Task Solving with Code Generation, Execution and Debugging",permalink:"/autogen/docs/notebooks/agentchat_auto_feedback_from_code_execution"}},c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Set your API Endpoint",id:"set-your-api-endpoint",level:2},{value:"Construct agents for RetrieveChat",id:"construct-agents-for-retrievechat",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3},{value:"Example 4",id:"example-4",level:3},{value:"Example 5",id:"example-5",level:3},{value:"Example 6",id:"example-6",level:3}],d=['\x3c!--\ntags: ["RAG"]\ndescription: |\n    Explore the use of AutoGen\'s RetrieveChat for tasks like code generation from docstrings, answering complex questions with human feedback, and exploiting features like Update Context, custom prompts, and few-shot learning.\n--\x3e'];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[0]}}),"\n",(0,a.jsx)(n.h1,{id:"using-retrievechat-for-retrieve-augmented-code-generation-and-question-answering",children:"Using RetrieveChat for Retrieve Augmented Code Generation and Question Answering"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_RetrieveChat.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_RetrieveChat.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["AutoGen offers conversable agents powered by LLM, tool or human, which\ncan be used to perform tasks collectively via automated chat. This\nframework allows tool use and human participation through multi-agent\nconversation. Please find documentation about this feature\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/Use-Cases/agent_chat",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["RetrieveChat is a conversational system for retrieval-augmented code\ngeneration and question answering. In this notebook, we demonstrate how\nto utilize RetrieveChat to generate code and answer questions based on\ncustomized documentations that are not present in the LLM\u2019s training\ndataset. RetrieveChat uses the ",(0,a.jsx)(n.code,{children:"RetrieveAssistantAgent"})," and\n",(0,a.jsx)(n.code,{children:"RetrieveUserProxyAgent"}),", which is similar to the usage of\n",(0,a.jsx)(n.code,{children:"AssistantAgent"})," and ",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," in other notebooks (e.g.,\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_auto_feedback_from_code_execution.ipynb",children:"Automated Task Solving with Code Generation, Execution &\nDebugging"}),").\nEssentially, ",(0,a.jsx)(n.code,{children:"RetrieveAssistantAgent"})," and ",(0,a.jsx)(n.code,{children:"RetrieveUserProxyAgent"}),"\nimplement a different auto-reply mechanism corresponding to the\nRetrieveChat prompts."]}),"\n",(0,a.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,a.jsx)(n.p,{children:"We\u2019ll demonstrate six examples of using RetrieveChat for code generation\nand question answering:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#example-1",children:"Example 1: Generate code based off docstrings w/o human\nfeedback"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#example-2",children:"Example 2: Answer a question based off docstrings w/o human\nfeedback"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#example-3",children:"Example 3: Generate code based off docstrings w/ human\nfeedback"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#example-4",children:"Example 4: Answer a question based off docstrings w/ human\nfeedback"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsxs)(n.a,{href:"#example-5",children:["Example 5: Solve comprehensive QA problems with RetrieveChat\u2019s\nunique feature ",(0,a.jsx)(n.code,{children:"Update Context"})]})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#example-6",children:"Example 6: Solve comprehensive QA problems with customized prompt\nand few-shot learning"})}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsx)(n.p,{children:"Some extra dependencies are needed for this notebook, which can be installed via pip:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen[retrievechat] flaml[automl]\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,a.jsx)(n.h2,{id:"set-your-api-endpoint",children:"Set your API Endpoint"}),"\n",(0,a.jsxs)(n.p,{children:["The\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/reference/oai/openai_utils#config_list_from_json",children:(0,a.jsx)(n.code,{children:"config_list_from_json"})}),"\nfunction loads a list of configurations from an environment variable or\na json file."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import json\nimport os\n\nimport chromadb\n\nimport autogen\nfrom autogen.agentchat.contrib.retrieve_assistant_agent import RetrieveAssistantAgent\nfrom autogen.agentchat.contrib.retrieve_user_proxy_agent import RetrieveUserProxyAgent\n\n# Accepted file formats for that can be stored in\n# a vector database instance\nfrom autogen.retrieve_utils import TEXT_FORMATS\n\nconfig_list = autogen.config_list_from_json(env_or_file="OAI_CONFIG_LIST")\n\nassert len(config_list) > 0\nprint("models to use: ", [config_list[i]["model"] for i in range(len(config_list))])\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"models to use:  ['gpt-35-turbo']\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about configuring LLMs for agents ",(0,a.jsx)(n.a,{href:"/docs/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"construct-agents-for-retrievechat",children:"Construct agents for RetrieveChat"}),"\n",(0,a.jsxs)(n.p,{children:["We start by initializing the ",(0,a.jsx)(n.code,{children:"RetrieveAssistantAgent"})," and\n",(0,a.jsx)(n.code,{children:"RetrieveUserProxyAgent"}),". The system message needs to be set to \u201cYou are\na helpful assistant.\u201d for RetrieveAssistantAgent. The detailed\ninstructions are given in the user message. Later we will use the\n",(0,a.jsx)(n.code,{children:"RetrieveUserProxyAgent.generate_init_prompt"})," to combine the\ninstructions and a retrieval augmented generation task for an initial\nprompt to be sent to the LLM assistant."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'print("Accepted file formats for `docs_path`:")\nprint(TEXT_FORMATS)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Accepted file formats for `docs_path`:\n['xml', 'htm', 'msg', 'docx', 'org', 'pptx', 'jsonl', 'txt', 'tsv', 'yml', 'json', 'md', 'pdf', 'xlsx', 'csv', 'html', 'log', 'yaml', 'doc', 'odt', 'rtf', 'ppt', 'epub', 'rst']\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# 1. create an RetrieveAssistantAgent instance named "assistant"\nassistant = RetrieveAssistantAgent(\n    name="assistant",\n    system_message="You are a helpful assistant.",\n    llm_config={\n        "timeout": 600,\n        "cache_seed": 42,\n        "config_list": config_list,\n    },\n)\n\n# 2. create the RetrieveUserProxyAgent instance named "ragproxyagent"\n# By default, the human_input_mode is "ALWAYS", which means the agent will ask for human input at every step. We set it to "NEVER" here.\n# `docs_path` is the path to the docs directory. It can also be the path to a single file, or the url to a single file. By default,\n# it is set to None, which works only if the collection is already created.\n# `task` indicates the kind of task we\'re working on. In this example, it\'s a `code` task.\n# `chunk_token_size` is the chunk token size for the retrieve chat. By default, it is set to `max_tokens * 0.6`, here we set it to 2000.\n# `custom_text_types` is a list of file types to be processed. Default is `autogen.retrieve_utils.TEXT_FORMATS`.\n# This only applies to files under the directories in `docs_path`. Explicitly included files and urls will be chunked regardless of their types.\n# In this example, we set it to ["mdx"] to only process markdown files. Since no mdx files are included in the `websit/docs`,\n# no files there will be processed. However, the explicitly included urls will still be processed.\nragproxyagent = RetrieveUserProxyAgent(\n    name="ragproxyagent",\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=3,\n    retrieve_config={\n        "task": "code",\n        "docs_path": [\n            "https://raw.githubusercontent.com/microsoft/FLAML/main/website/docs/Examples/Integrate%20-%20Spark.md",\n            "https://raw.githubusercontent.com/microsoft/FLAML/main/website/docs/Research.md",\n            os.path.join(os.path.abspath(""), "..", "website", "docs"),\n        ],\n        "custom_text_types": ["mdx"],\n        "chunk_token_size": 2000,\n        "model": config_list[0]["model"],\n        "client": chromadb.PersistentClient(path="/tmp/chromadb"),\n        "embedding_model": "all-mpnet-base-v2",\n        "get_or_create": True,  # set to False if you don\'t want to reuse an existing collection, but you\'ll need to remove the collection manually\n    },\n    code_execution_config=False,  # set to False if you don\'t want to execute the code\n)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-1",children:"Example 1"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"#table-of-contents",children:"Back to top"})}),"\n",(0,a.jsx)(n.p,{children:"Use RetrieveChat to help generate sample code and automatically run the\ncode and fix errors if there is any."}),"\n",(0,a.jsx)(n.p,{children:"Problem: Which API should I use if I want to use FLAML for a\nclassification task and I want to train the model in 30 seconds. Use\nspark to parallel the training. Force cancel jobs if time limit is\nreached."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# reset the assistant. Always reset the assistant before starting a new conversation.\nassistant.reset()\n\n# given a problem, we use the ragproxyagent to generate a prompt to be sent to the assistant as the initial message.\n# the assistant receives the message and generates a response. The response will be sent back to the ragproxyagent for processing.\n# The conversation continues until the termination condition is met, in RetrieveChat, the termination condition when no human-in-loop is no code block detected.\n# With human-in-loop, the conversation will continue until the user says "exit".\ncode_problem = "How can I use FLAML to perform a classification task and use spark to do parallel training. Train 30 seconds and force cancel jobs if time limit is reached."\nragproxyagent.initiate_chat(\n    assistant, problem=code_problem, search_string="spark"\n)  # search_string is used as an extra filter for the embeddings search, in this case, we only want to search documents that contain "spark".\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"INFO:autogen.retrieve_utils:Found 2 chunks.\nWARNING:chromadb.segment.impl.vector.local_persistent_hnsw:Number of requested results 20 is greater than number of elements in index 2, updating n_results = 2\nWARNING:chromadb.segment.impl.vector.local_persistent_hnsw:Number of requested results 60 is greater than number of elements in index 2, updating n_results = 2\nWARNING:chromadb.segment.impl.vector.local_persistent_hnsw:Number of requested results 100 is greater than number of elements in index 2, updating n_results = 2\nWARNING:chromadb.segment.impl.vector.local_persistent_hnsw:Number of requested results 140 is greater than number of elements in index 2, updating n_results = 2\nWARNING:chromadb.segment.impl.vector.local_persistent_hnsw:Number of requested results 180 is greater than number of elements in index 2, updating n_results = 2\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'Trying to create collection.\ndoc_ids:  [[\'doc_0\']]\nAdding doc_id doc_0 to context.\nragproxyagent (to assistant):\n\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: How can I use FLAML to perform a classification task and use spark to do parallel training. Train 30 seconds and force cancel jobs if time limit is reached.\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n# Creating a dictionary\ndata = {"Square_Feet": [800, 1200, 1800, 1500, 850],\n      "Age_Years": [20, 15, 10, 7, 25],\n      "Price": [100000, 200000, 300000, 240000, 120000]}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n```python\nfrom pyspark.ml.feature import VectorAssembler\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n#### Model List\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performs parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n```python\nimport flaml\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True, # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nYou can use FLAML\'s `lgbm_spark` estimator for classification tasks and activate Spark as the parallel backend during training by setting `use_spark` to `True`. Here is an example code snippet:\n\n```python\nimport flaml\nfrom flaml.automl.spark.utils import to_pandas_on_spark\nfrom pyspark.ml.feature import VectorAssembler\n\n# Assuming you have a Spark DataFrame named \'df\' that contains your data\ndataframe = df.toPandas()\nlabel = "target"\npsdf = to_pandas_on_spark(dataframe)\n\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n\n# configure and run AutoML\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "accuracy",\n    "estimator_list": ["lgbm_spark"],\n    "task": "classification",\n    "n_jobs": -1, # Use all available CPUs\n    "use_spark": True, # Use Spark as the parallel backend\n    "force_cancel": True # Halt Spark jobs that run for longer than the time budget\n}\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\nNote that you should not use `use_spark` if you are working with Spark data, because SparkML models already run in parallel.\n\n--------------------------------------------------------------------------------\nragproxyagent (to assistant):\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nUPDATE CONTEXT\n\n--------------------------------------------------------------------------------\nUpdating context and resetting conversation.\ndoc_ids:  [[\'doc_0\']]\ndoc_ids:  [[\'doc_0\']]\ndoc_ids:  [[\'doc_0\']]\ndoc_ids:  [[\'doc_0\']]\nNo more context, will terminate.\nragproxyagent (to assistant):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\nragproxyagent (to assistant):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-2",children:"Example 2"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"#table-of-contents",children:"Back to top"})}),"\n",(0,a.jsx)(n.p,{children:"Use RetrieveChat to answer a question that is not related to code\ngeneration."}),"\n",(0,a.jsx)(n.p,{children:"Problem: Who is the author of FLAML?"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# reset the assistant. Always reset the assistant before starting a new conversation.\nassistant.reset()\n\nqa_problem = "Who is the author of FLAML?"\nragproxyagent.initiate_chat(assistant, problem=qa_problem)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"WARNING:chromadb.segment.impl.vector.local_persistent_hnsw:Number of requested results 20 is greater than number of elements in index 2, updating n_results = 2\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'doc_ids:  [[\'doc_0\', \'doc_1\']]\nAdding doc_id doc_0 to context.\nAdding doc_id doc_1 to context.\nragproxyagent (to assistant):\n\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: Who is the author of FLAML?\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n# Creating a dictionary\ndata = {"Square_Feet": [800, 1200, 1800, 1500, 850],\n      "Age_Years": [20, 15, 10, 7, 25],\n      "Price": [100000, 200000, 300000, 240000, 120000]}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n```python\nfrom pyspark.ml.feature import VectorAssembler\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n#### Model List\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performs parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n```python\nimport flaml\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True, # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n\n# Research\n\nFor technical details, please check our research publications.\n\n* [FLAML: A Fast and Lightweight AutoML Library](https://www.microsoft.com/en-us/research/publication/flaml-a-fast-and-lightweight-automl-library/). Chi Wang, Qingyun Wu, Markus Weimer, Erkang Zhu. MLSys 2021.\n\n```bibtex\n@inproceedings{wang2021flaml,\n    title={FLAML: A Fast and Lightweight AutoML Library},\n    author={Chi Wang and Qingyun Wu and Markus Weimer and Erkang Zhu},\n    year={2021},\n    booktitle={MLSys},\n}\n```\n\n* [Frugal Optimization for Cost-related Hyperparameters](https://arxiv.org/abs/2005.01571). Qingyun Wu, Chi Wang, Silu Huang. AAAI 2021.\n\n```bibtex\n@inproceedings{wu2021cfo,\n    title={Frugal Optimization for Cost-related Hyperparameters},\n    author={Qingyun Wu and Chi Wang and Silu Huang},\n    year={2021},\n    booktitle={AAAI},\n}\n```\n\n* [Economical Hyperparameter Optimization With Blended Search Strategy](https://www.microsoft.com/en-us/research/publication/economical-hyperparameter-optimization-with-blended-search-strategy/). Chi Wang, Qingyun Wu, Silu Huang, Amin Saied. ICLR 2021.\n\n```bibtex\n@inproceedings{wang2021blendsearch,\n    title={Economical Hyperparameter Optimization With Blended Search Strategy},\n    author={Chi Wang and Qingyun Wu and Silu Huang and Amin Saied},\n    year={2021},\n    booktitle={ICLR},\n}\n```\n\n* [An Empirical Study on Hyperparameter Optimization for Fine-Tuning Pre-trained Language Models](https://aclanthology.org/2021.acl-long.178.pdf). Susan Xueqing Liu, Chi Wang. ACL 2021.\n\n```bibtex\n@inproceedings{liuwang2021hpolm,\n    title={An Empirical Study on Hyperparameter Optimization for Fine-Tuning Pre-trained Language Models},\n    author={Susan Xueqing Liu and Chi Wang},\n    year={2021},\n    booktitle={ACL},\n}\n```\n\n* [ChaCha for Online AutoML](https://www.microsoft.com/en-us/research/publication/chacha-for-online-automl/). Qingyun Wu, Chi Wang, John Langford, Paul Mineiro and Marco Rossi. ICML 2021.\n\n```bibtex\n@inproceedings{wu2021chacha,\n    title={ChaCha for Online AutoML},\n    author={Qingyun Wu and Chi Wang and John Langford and Paul Mineiro and Marco Rossi},\n    year={2021},\n    booktitle={ICML},\n}\n```\n\n* [Fair AutoML](https://arxiv.org/abs/2111.06495). Qingyun Wu, Chi Wang. ArXiv preprint arXiv:2111.06495 (2021).\n\n```bibtex\n@inproceedings{wuwang2021fairautoml,\n    title={Fair AutoML},\n    author={Qingyun Wu and Chi Wang},\n    year={2021},\n    booktitle={ArXiv preprint arXiv:2111.06495},\n}\n```\n\n* [Mining Robust Default Configurations for Resource-constrained AutoML](https://arxiv.org/abs/2202.09927). Moe Kayali, Chi Wang. ArXiv preprint arXiv:2202.09927 (2022).\n\n```bibtex\n@inproceedings{kayaliwang2022default,\n    title={Mining Robust Default Configurations for Resource-constrained AutoML},\n    author={Moe Kayali and Chi Wang},\n    year={2022},\n    booktitle={ArXiv preprint arXiv:2202.09927},\n}\n```\n\n* [Targeted Hyperparameter Optimization with Lexicographic Preferences Over Multiple Objectives](https://openreview.net/forum?id=0Ij9_q567Ma). Shaokun Zhang, Feiran Jia, Chi Wang, Qingyun Wu. ICLR 2023 (notable-top-5%).\n\n```bibtex\n@inproceedings{zhang2023targeted,\n    title={Targeted Hyperparameter Optimization with Lexicographic Preferences Over Multiple Objectives},\n    author={Shaokun Zhang and Feiran Jia and Chi Wang and Qingyun Wu},\n    booktitle={International Conference on Learning Representations},\n    year={2023},\n    url={https://openreview.net/forum?id=0Ij9_q567Ma},\n}\n```\n\n* [Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference](https://arxiv.org/abs/2303.04673). Chi Wang, Susan Xueqing Liu, Ahmed H. Awadallah. ArXiv preprint arXiv:2303.04673 (2023).\n\n```bibtex\n@inproceedings{wang2023EcoOptiGen,\n    title={Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference},\n    author={Chi Wang and Susan Xueqing Liu and Ahmed H. Awadallah},\n    year={2023},\n    booktitle={ArXiv preprint arXiv:2303.04673},\n}\n```\n\n* [An Empirical Study on Challenging Math Problem Solving with GPT-4](https://arxiv.org/abs/2306.01337). Yiran Wu, Feiran Jia, Shaokun Zhang, Hangyu Li, Erkang Zhu, Yue Wang, Yin Tat Lee, Richard Peng, Qingyun Wu, Chi Wang. ArXiv preprint arXiv:2306.01337 (2023).\n\n```bibtex\n@inproceedings{wu2023empirical,\n    title={An Empirical Study on Challenging Math Problem Solving with GPT-4},\n    author={Yiran Wu and Feiran Jia and Shaokun Zhang and Hangyu Li and Erkang Zhu and Yue Wang and Yin Tat Lee and Richard Peng and Qingyun Wu and Chi Wang},\n    year={2023},\n    booktitle={ArXiv preprint arXiv:2306.01337},\n}\n```\n\n\n\n\n--------------------------------------------------------------------------------\nAdding doc_id doc_1 to context.\nragproxyagent (to assistant):\n\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: Who is the author of FLAML?\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n# Creating a dictionary\ndata = {"Square_Feet": [800, 1200, 1800, 1500, 850],\n      "Age_Years": [20, 15, 10, 7, 25],\n      "Price": [100000, 200000, 300000, 240000, 120000]}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n```python\nfrom pyspark.ml.feature import VectorAssembler\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n#### Model List\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performs parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n```python\nimport flaml\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True, # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n\n# Research\n\nFor technical details, please check our research publications.\n\n* [FLAML: A Fast and Lightweight AutoML Library](https://www.microsoft.com/en-us/research/publication/flaml-a-fast-and-lightweight-automl-library/). Chi Wang, Qingyun Wu, Markus Weimer, Erkang Zhu. MLSys 2021.\n\n```bibtex\n@inproceedings{wang2021flaml,\n    title={FLAML: A Fast and Lightweight AutoML Library},\n    author={Chi Wang and Qingyun Wu and Markus Weimer and Erkang Zhu},\n    year={2021},\n    booktitle={MLSys},\n}\n```\n\n* [Frugal Optimization for Cost-related Hyperparameters](https://arxiv.org/abs/2005.01571). Qingyun Wu, Chi Wang, Silu Huang. AAAI 2021.\n\n```bibtex\n@inproceedings{wu2021cfo,\n    title={Frugal Optimization for Cost-related Hyperparameters},\n    author={Qingyun Wu and Chi Wang and Silu Huang},\n    year={2021},\n    booktitle={AAAI},\n}\n```\n\n* [Economical Hyperparameter Optimization With Blended Search Strategy](https://www.microsoft.com/en-us/research/publication/economical-hyperparameter-optimization-with-blended-search-strategy/). Chi Wang, Qingyun Wu, Silu Huang, Amin Saied. ICLR 2021.\n\n```bibtex\n@inproceedings{wang2021blendsearch,\n    title={Economical Hyperparameter Optimization With Blended Search Strategy},\n    author={Chi Wang and Qingyun Wu and Silu Huang and Amin Saied},\n    year={2021},\n    booktitle={ICLR},\n}\n```\n\n* [An Empirical Study on Hyperparameter Optimization for Fine-Tuning Pre-trained Language Models](https://aclanthology.org/2021.acl-long.178.pdf). Susan Xueqing Liu, Chi Wang. ACL 2021.\n\n```bibtex\n@inproceedings{liuwang2021hpolm,\n    title={An Empirical Study on Hyperparameter Optimization for Fine-Tuning Pre-trained Language Models},\n    author={Susan Xueqing Liu and Chi Wang},\n    year={2021},\n    booktitle={ACL},\n}\n```\n\n* [ChaCha for Online AutoML](https://www.microsoft.com/en-us/research/publication/chacha-for-online-automl/). Qingyun Wu, Chi Wang, John Langford, Paul Mineiro and Marco Rossi. ICML 2021.\n\n```bibtex\n@inproceedings{wu2021chacha,\n    title={ChaCha for Online AutoML},\n    author={Qingyun Wu and Chi Wang and John Langford and Paul Mineiro and Marco Rossi},\n    year={2021},\n    booktitle={ICML},\n}\n```\n\n* [Fair AutoML](https://arxiv.org/abs/2111.06495). Qingyun Wu, Chi Wang. ArXiv preprint arXiv:2111.06495 (2021).\n\n```bibtex\n@inproceedings{wuwang2021fairautoml,\n    title={Fair AutoML},\n    author={Qingyun Wu and Chi Wang},\n    year={2021},\n    booktitle={ArXiv preprint arXiv:2111.06495},\n}\n```\n\n* [Mining Robust Default Configurations for Resource-constrained AutoML](https://arxiv.org/abs/2202.09927). Moe Kayali, Chi Wang. ArXiv preprint arXiv:2202.09927 (2022).\n\n```bibtex\n@inproceedings{kayaliwang2022default,\n    title={Mining Robust Default Configurations for Resource-constrained AutoML},\n    author={Moe Kayali and Chi Wang},\n    year={2022},\n    booktitle={ArXiv preprint arXiv:2202.09927},\n}\n```\n\n* [Targeted Hyperparameter Optimization with Lexicographic Preferences Over Multiple Objectives](https://openreview.net/forum?id=0Ij9_q567Ma). Shaokun Zhang, Feiran Jia, Chi Wang, Qingyun Wu. ICLR 2023 (notable-top-5%).\n\n```bibtex\n@inproceedings{zhang2023targeted,\n    title={Targeted Hyperparameter Optimization with Lexicographic Preferences Over Multiple Objectives},\n    author={Shaokun Zhang and Feiran Jia and Chi Wang and Qingyun Wu},\n    booktitle={International Conference on Learning Representations},\n    year={2023},\n    url={https://openreview.net/forum?id=0Ij9_q567Ma},\n}\n```\n\n* [Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference](https://arxiv.org/abs/2303.04673). Chi Wang, Susan Xueqing Liu, Ahmed H. Awadallah. ArXiv preprint arXiv:2303.04673 (2023).\n\n```bibtex\n@inproceedings{wang2023EcoOptiGen,\n    title={Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference},\n    author={Chi Wang and Susan Xueqing Liu and Ahmed H. Awadallah},\n    year={2023},\n    booktitle={ArXiv preprint arXiv:2303.04673},\n}\n```\n\n* [An Empirical Study on Challenging Math Problem Solving with GPT-4](https://arxiv.org/abs/2306.01337). Yiran Wu, Feiran Jia, Shaokun Zhang, Hangyu Li, Erkang Zhu, Yue Wang, Yin Tat Lee, Richard Peng, Qingyun Wu, Chi Wang. ArXiv preprint arXiv:2306.01337 (2023).\n\n```bibtex\n@inproceedings{wu2023empirical,\n    title={An Empirical Study on Challenging Math Problem Solving with GPT-4},\n    author={Yiran Wu and Feiran Jia and Shaokun Zhang and Hangyu Li and Erkang Zhu and Yue Wang and Yin Tat Lee and Richard Peng and Qingyun Wu and Chi Wang},\n    year={2023},\n    booktitle={ArXiv preprint arXiv:2306.01337},\n}\n```\n\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nThe authors of FLAML are Chi Wang, Qingyun Wu, Markus Weimer, and Erkang Zhu.\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-3",children:"Example 3"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"#table-of-contents",children:"Back to top"})}),"\n",(0,a.jsx)(n.p,{children:"Use RetrieveChat to help generate sample code and ask for human-in-loop\nfeedbacks."}),"\n",(0,a.jsx)(n.p,{children:"Problem: how to build a time series forecasting model for stock price\nusing FLAML?"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# reset the assistant. Always reset the assistant before starting a new conversation.\nassistant.reset()\n\n# set `human_input_mode` to be `ALWAYS`, so the agent will ask for human input at every step.\nragproxyagent.human_input_mode = "ALWAYS"\ncode_problem = "how to build a time series forecasting model for stock price using FLAML?"\nragproxyagent.initiate_chat(assistant, problem=code_problem)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"WARNING:chromadb.segment.impl.vector.local_persistent_hnsw:Number of requested results 20 is greater than number of elements in index 2, updating n_results = 2\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'doc_ids:  [[\'doc_0\', \'doc_1\']]\nAdding doc_id doc_0 to context.\nAdding doc_id doc_1 to context.\nragproxyagent (to assistant):\n\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: how to build a time series forecasting model for stock price using FLAML?\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n# Creating a dictionary\ndata = {"Square_Feet": [800, 1200, 1800, 1500, 850],\n      "Age_Years": [20, 15, 10, 7, 25],\n      "Price": [100000, 200000, 300000, 240000, 120000]}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n```python\nfrom pyspark.ml.feature import VectorAssembler\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n#### Model List\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performs parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n```python\nimport flaml\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True, # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n\n# Research\n\nFor technical details, please check our research publications.\n\n* [FLAML: A Fast and Lightweight AutoML Library](https://www.microsoft.com/en-us/research/publication/flaml-a-fast-and-lightweight-automl-library/). Chi Wang, Qingyun Wu, Markus Weimer, Erkang Zhu. MLSys 2021.\n\n```bibtex\n@inproceedings{wang2021flaml,\n    title={FLAML: A Fast and Lightweight AutoML Library},\n    author={Chi Wang and Qingyun Wu and Markus Weimer and Erkang Zhu},\n    year={2021},\n    booktitle={MLSys},\n}\n```\n\n* [Frugal Optimization for Cost-related Hyperparameters](https://arxiv.org/abs/2005.01571). Qingyun Wu, Chi Wang, Silu Huang. AAAI 2021.\n\n```bibtex\n@inproceedings{wu2021cfo,\n    title={Frugal Optimization for Cost-related Hyperparameters},\n    author={Qingyun Wu and Chi Wang and Silu Huang},\n    year={2021},\n    booktitle={AAAI},\n}\n```\n\n* [Economical Hyperparameter Optimization With Blended Search Strategy](https://www.microsoft.com/en-us/research/publication/economical-hyperparameter-optimization-with-blended-search-strategy/). Chi Wang, Qingyun Wu, Silu Huang, Amin Saied. ICLR 2021.\n\n```bibtex\n@inproceedings{wang2021blendsearch,\n    title={Economical Hyperparameter Optimization With Blended Search Strategy},\n    author={Chi Wang and Qingyun Wu and Silu Huang and Amin Saied},\n    year={2021},\n    booktitle={ICLR},\n}\n```\n\n* [An Empirical Study on Hyperparameter Optimization for Fine-Tuning Pre-trained Language Models](https://aclanthology.org/2021.acl-long.178.pdf). Susan Xueqing Liu, Chi Wang. ACL 2021.\n\n```bibtex\n@inproceedings{liuwang2021hpolm,\n    title={An Empirical Study on Hyperparameter Optimization for Fine-Tuning Pre-trained Language Models},\n    author={Susan Xueqing Liu and Chi Wang},\n    year={2021},\n    booktitle={ACL},\n}\n```\n\n* [ChaCha for Online AutoML](https://www.microsoft.com/en-us/research/publication/chacha-for-online-automl/). Qingyun Wu, Chi Wang, John Langford, Paul Mineiro and Marco Rossi. ICML 2021.\n\n```bibtex\n@inproceedings{wu2021chacha,\n    title={ChaCha for Online AutoML},\n    author={Qingyun Wu and Chi Wang and John Langford and Paul Mineiro and Marco Rossi},\n    year={2021},\n    booktitle={ICML},\n}\n```\n\n* [Fair AutoML](https://arxiv.org/abs/2111.06495). Qingyun Wu, Chi Wang. ArXiv preprint arXiv:2111.06495 (2021).\n\n```bibtex\n@inproceedings{wuwang2021fairautoml,\n    title={Fair AutoML},\n    author={Qingyun Wu and Chi Wang},\n    year={2021},\n    booktitle={ArXiv preprint arXiv:2111.06495},\n}\n```\n\n* [Mining Robust Default Configurations for Resource-constrained AutoML](https://arxiv.org/abs/2202.09927). Moe Kayali, Chi Wang. ArXiv preprint arXiv:2202.09927 (2022).\n\n```bibtex\n@inproceedings{kayaliwang2022default,\n    title={Mining Robust Default Configurations for Resource-constrained AutoML},\n    author={Moe Kayali and Chi Wang},\n    year={2022},\n    booktitle={ArXiv preprint arXiv:2202.09927},\n}\n```\n\n* [Targeted Hyperparameter Optimization with Lexicographic Preferences Over Multiple Objectives](https://openreview.net/forum?id=0Ij9_q567Ma). Shaokun Zhang, Feiran Jia, Chi Wang, Qingyun Wu. ICLR 2023 (notable-top-5%).\n\n```bibtex\n@inproceedings{zhang2023targeted,\n    title={Targeted Hyperparameter Optimization with Lexicographic Preferences Over Multiple Objectives},\n    author={Shaokun Zhang and Feiran Jia and Chi Wang and Qingyun Wu},\n    booktitle={International Conference on Learning Representations},\n    year={2023},\n    url={https://openreview.net/forum?id=0Ij9_q567Ma},\n}\n```\n\n* [Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference](https://arxiv.org/abs/2303.04673). Chi Wang, Susan Xueqing Liu, Ahmed H. Awadallah. ArXiv preprint arXiv:2303.04673 (2023).\n\n```bibtex\n@inproceedings{wang2023EcoOptiGen,\n    title={Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference},\n    author={Chi Wang and Susan Xueqing Liu and Ahmed H. Awadallah},\n    year={2023},\n    booktitle={ArXiv preprint arXiv:2303.04673},\n}\n```\n\n* [An Empirical Study on Challenging Math Problem Solving with GPT-4](https://arxiv.org/abs/2306.01337). Yiran Wu, Feiran Jia, Shaokun Zhang, Hangyu Li, Erkang Zhu, Yue Wang, Yin Tat Lee, Richard Peng, Qingyun Wu, Chi Wang. ArXiv preprint arXiv:2306.01337 (2023).\n\n```bibtex\n@inproceedings{wu2023empirical,\n    title={An Empirical Study on Challenging Math Problem Solving with GPT-4},\n    author={Yiran Wu and Feiran Jia and Shaokun Zhang and Hangyu Li and Erkang Zhu and Yue Wang and Yin Tat Lee and Richard Peng and Qingyun Wu and Chi Wang},\n    year={2023},\n    booktitle={ArXiv preprint arXiv:2306.01337},\n}\n```\n\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nTo build a time series forecasting model for stock price using FLAML, you can use the `lgbm_spark` estimator and organize your data in the required format. First, use `to_pandas_on_spark` function to convert your data into a pandas-on-spark dataframe/series, which Spark estimators require. Next, you should use `VectorAssembler` to merge all feature columns into a single vector column. Finally, use `flaml.AutoML` to try different configurations for the `lgbm_spark` model. Here is an example code snippet: \n\n```python\nimport flaml\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\nfrom pyspark.ml.feature import VectorAssembler\n\n# load your stock price data into a pandas dataframe\ndata = pd.read_csv(\'stock_price.csv\')\n\n# specify label column name\nlabel = \'price\'\n\n# convert pandas dataframe to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(data)\n\n# merge feature columns as a single vector column\nfeature_cols = [col for col in psdf.columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n\n# start an AutoML experiment with lgbm_spark estimator\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n--------------------------------------------------------------------------------\nragproxyagent (to assistant):\n\nI want the time_budget to be 10 mins\n\n--------------------------------------------------------------------------------\nI want the time_budget to be 10 mins\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nYou can change the `time_budget` parameter in the `settings` dictionary to 10 minutes (600 seconds) like this:\n\n```python\nimport flaml\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\nfrom pyspark.ml.feature import VectorAssembler\n\n# load your stock price data into a pandas dataframe\ndata = pd.read_csv(\'stock_price.csv\')\n\n# specify label column name\nlabel = \'price\'\n\n# convert pandas dataframe to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(data)\n\n# merge feature columns as a single vector column\nfeature_cols = [col for col in psdf.columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n\n# start an AutoML experiment with lgbm_spark estimator and time_budget of 10 mins\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 600,  # time_budget in seconds\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n\nIn this example, the `time_budget` parameter is set to 600, which represents the number of seconds the FLAML AutoML experiment will run. You can adjust this value to control the total time spent on the experiment.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n\n>>>>>>>> USING AUTO REPLY...\nragproxyagent (to assistant):\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nIs there anything else I can help you with?\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-4",children:"Example 4"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"#table-of-contents",children:"Back to top"})}),"\n",(0,a.jsx)(n.p,{children:"Use RetrieveChat to answer a question and ask for human-in-loop\nfeedbacks."}),"\n",(0,a.jsxs)(n.p,{children:["Problem: Is there a function named ",(0,a.jsx)(n.code,{children:"tune_automl"})," in FLAML?"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# reset the assistant. Always reset the assistant before starting a new conversation.\nassistant.reset()\n\n# set `human_input_mode` to be `ALWAYS`, so the agent will ask for human input at every step.\nragproxyagent.human_input_mode = "ALWAYS"\nqa_problem = "Is there a function named `tune_automl` in FLAML?"\nragproxyagent.initiate_chat(assistant, problem=qa_problem)  # type "exit" to exit the conversation\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"WARNING:chromadb.segment.impl.vector.local_persistent_hnsw:Number of requested results 20 is greater than number of elements in index 2, updating n_results = 2\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'doc_ids:  [[\'doc_0\', \'doc_1\']]\nAdding doc_id doc_0 to context.\nAdding doc_id doc_1 to context.\nragproxyagent (to assistant):\n\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: Is there a function named `tune_automl` in FLAML?\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n# Creating a dictionary\ndata = {"Square_Feet": [800, 1200, 1800, 1500, 850],\n      "Age_Years": [20, 15, 10, 7, 25],\n      "Price": [100000, 200000, 300000, 240000, 120000]}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n```python\nfrom pyspark.ml.feature import VectorAssembler\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n#### Model List\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performs parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n```python\nimport flaml\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True, # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n\n# Research\n\nFor technical details, please check our research publications.\n\n* [FLAML: A Fast and Lightweight AutoML Library](https://www.microsoft.com/en-us/research/publication/flaml-a-fast-and-lightweight-automl-library/). Chi Wang, Qingyun Wu, Markus Weimer, Erkang Zhu. MLSys 2021.\n\n```bibtex\n@inproceedings{wang2021flaml,\n    title={FLAML: A Fast and Lightweight AutoML Library},\n    author={Chi Wang and Qingyun Wu and Markus Weimer and Erkang Zhu},\n    year={2021},\n    booktitle={MLSys},\n}\n```\n\n* [Frugal Optimization for Cost-related Hyperparameters](https://arxiv.org/abs/2005.01571). Qingyun Wu, Chi Wang, Silu Huang. AAAI 2021.\n\n```bibtex\n@inproceedings{wu2021cfo,\n    title={Frugal Optimization for Cost-related Hyperparameters},\n    author={Qingyun Wu and Chi Wang and Silu Huang},\n    year={2021},\n    booktitle={AAAI},\n}\n```\n\n* [Economical Hyperparameter Optimization With Blended Search Strategy](https://www.microsoft.com/en-us/research/publication/economical-hyperparameter-optimization-with-blended-search-strategy/). Chi Wang, Qingyun Wu, Silu Huang, Amin Saied. ICLR 2021.\n\n```bibtex\n@inproceedings{wang2021blendsearch,\n    title={Economical Hyperparameter Optimization With Blended Search Strategy},\n    author={Chi Wang and Qingyun Wu and Silu Huang and Amin Saied},\n    year={2021},\n    booktitle={ICLR},\n}\n```\n\n* [An Empirical Study on Hyperparameter Optimization for Fine-Tuning Pre-trained Language Models](https://aclanthology.org/2021.acl-long.178.pdf). Susan Xueqing Liu, Chi Wang. ACL 2021.\n\n```bibtex\n@inproceedings{liuwang2021hpolm,\n    title={An Empirical Study on Hyperparameter Optimization for Fine-Tuning Pre-trained Language Models},\n    author={Susan Xueqing Liu and Chi Wang},\n    year={2021},\n    booktitle={ACL},\n}\n```\n\n* [ChaCha for Online AutoML](https://www.microsoft.com/en-us/research/publication/chacha-for-online-automl/). Qingyun Wu, Chi Wang, John Langford, Paul Mineiro and Marco Rossi. ICML 2021.\n\n```bibtex\n@inproceedings{wu2021chacha,\n    title={ChaCha for Online AutoML},\n    author={Qingyun Wu and Chi Wang and John Langford and Paul Mineiro and Marco Rossi},\n    year={2021},\n    booktitle={ICML},\n}\n```\n\n* [Fair AutoML](https://arxiv.org/abs/2111.06495). Qingyun Wu, Chi Wang. ArXiv preprint arXiv:2111.06495 (2021).\n\n```bibtex\n@inproceedings{wuwang2021fairautoml,\n    title={Fair AutoML},\n    author={Qingyun Wu and Chi Wang},\n    year={2021},\n    booktitle={ArXiv preprint arXiv:2111.06495},\n}\n```\n\n* [Mining Robust Default Configurations for Resource-constrained AutoML](https://arxiv.org/abs/2202.09927). Moe Kayali, Chi Wang. ArXiv preprint arXiv:2202.09927 (2022).\n\n```bibtex\n@inproceedings{kayaliwang2022default,\n    title={Mining Robust Default Configurations for Resource-constrained AutoML},\n    author={Moe Kayali and Chi Wang},\n    year={2022},\n    booktitle={ArXiv preprint arXiv:2202.09927},\n}\n```\n\n* [Targeted Hyperparameter Optimization with Lexicographic Preferences Over Multiple Objectives](https://openreview.net/forum?id=0Ij9_q567Ma). Shaokun Zhang, Feiran Jia, Chi Wang, Qingyun Wu. ICLR 2023 (notable-top-5%).\n\n```bibtex\n@inproceedings{zhang2023targeted,\n    title={Targeted Hyperparameter Optimization with Lexicographic Preferences Over Multiple Objectives},\n    author={Shaokun Zhang and Feiran Jia and Chi Wang and Qingyun Wu},\n    booktitle={International Conference on Learning Representations},\n    year={2023},\n    url={https://openreview.net/forum?id=0Ij9_q567Ma},\n}\n```\n\n* [Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference](https://arxiv.org/abs/2303.04673). Chi Wang, Susan Xueqing Liu, Ahmed H. Awadallah. ArXiv preprint arXiv:2303.04673 (2023).\n\n```bibtex\n@inproceedings{wang2023EcoOptiGen,\n    title={Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference},\n    author={Chi Wang and Susan Xueqing Liu and Ahmed H. Awadallah},\n    year={2023},\n    booktitle={ArXiv preprint arXiv:2303.04673},\n}\n```\n\n* [An Empirical Study on Challenging Math Problem Solving with GPT-4](https://arxiv.org/abs/2306.01337). Yiran Wu, Feiran Jia, Shaokun Zhang, Hangyu Li, Erkang Zhu, Yue Wang, Yin Tat Lee, Richard Peng, Qingyun Wu, Chi Wang. ArXiv preprint arXiv:2306.01337 (2023).\n\n```bibtex\n@inproceedings{wu2023empirical,\n    title={An Empirical Study on Challenging Math Problem Solving with GPT-4},\n    author={Yiran Wu and Feiran Jia and Shaokun Zhang and Hangyu Li and Erkang Zhu and Yue Wang and Yin Tat Lee and Richard Peng and Qingyun Wu and Chi Wang},\n    year={2023},\n    booktitle={ArXiv preprint arXiv:2306.01337},\n}\n```\n\n\n\n\n--------------------------------------------------------------------------------\nAdding doc_id doc_1 to context.\nragproxyagent (to assistant):\n\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: Is there a function named `tune_automl` in FLAML?\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n# Creating a dictionary\ndata = {"Square_Feet": [800, 1200, 1800, 1500, 850],\n      "Age_Years": [20, 15, 10, 7, 25],\n      "Price": [100000, 200000, 300000, 240000, 120000]}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n```python\nfrom pyspark.ml.feature import VectorAssembler\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n#### Model List\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performs parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n```python\nimport flaml\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True, # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n\n# Research\n\nFor technical details, please check our research publications.\n\n* [FLAML: A Fast and Lightweight AutoML Library](https://www.microsoft.com/en-us/research/publication/flaml-a-fast-and-lightweight-automl-library/). Chi Wang, Qingyun Wu, Markus Weimer, Erkang Zhu. MLSys 2021.\n\n```bibtex\n@inproceedings{wang2021flaml,\n    title={FLAML: A Fast and Lightweight AutoML Library},\n    author={Chi Wang and Qingyun Wu and Markus Weimer and Erkang Zhu},\n    year={2021},\n    booktitle={MLSys},\n}\n```\n\n* [Frugal Optimization for Cost-related Hyperparameters](https://arxiv.org/abs/2005.01571). Qingyun Wu, Chi Wang, Silu Huang. AAAI 2021.\n\n```bibtex\n@inproceedings{wu2021cfo,\n    title={Frugal Optimization for Cost-related Hyperparameters},\n    author={Qingyun Wu and Chi Wang and Silu Huang},\n    year={2021},\n    booktitle={AAAI},\n}\n```\n\n* [Economical Hyperparameter Optimization With Blended Search Strategy](https://www.microsoft.com/en-us/research/publication/economical-hyperparameter-optimization-with-blended-search-strategy/). Chi Wang, Qingyun Wu, Silu Huang, Amin Saied. ICLR 2021.\n\n```bibtex\n@inproceedings{wang2021blendsearch,\n    title={Economical Hyperparameter Optimization With Blended Search Strategy},\n    author={Chi Wang and Qingyun Wu and Silu Huang and Amin Saied},\n    year={2021},\n    booktitle={ICLR},\n}\n```\n\n* [An Empirical Study on Hyperparameter Optimization for Fine-Tuning Pre-trained Language Models](https://aclanthology.org/2021.acl-long.178.pdf). Susan Xueqing Liu, Chi Wang. ACL 2021.\n\n```bibtex\n@inproceedings{liuwang2021hpolm,\n    title={An Empirical Study on Hyperparameter Optimization for Fine-Tuning Pre-trained Language Models},\n    author={Susan Xueqing Liu and Chi Wang},\n    year={2021},\n    booktitle={ACL},\n}\n```\n\n* [ChaCha for Online AutoML](https://www.microsoft.com/en-us/research/publication/chacha-for-online-automl/). Qingyun Wu, Chi Wang, John Langford, Paul Mineiro and Marco Rossi. ICML 2021.\n\n```bibtex\n@inproceedings{wu2021chacha,\n    title={ChaCha for Online AutoML},\n    author={Qingyun Wu and Chi Wang and John Langford and Paul Mineiro and Marco Rossi},\n    year={2021},\n    booktitle={ICML},\n}\n```\n\n* [Fair AutoML](https://arxiv.org/abs/2111.06495). Qingyun Wu, Chi Wang. ArXiv preprint arXiv:2111.06495 (2021).\n\n```bibtex\n@inproceedings{wuwang2021fairautoml,\n    title={Fair AutoML},\n    author={Qingyun Wu and Chi Wang},\n    year={2021},\n    booktitle={ArXiv preprint arXiv:2111.06495},\n}\n```\n\n* [Mining Robust Default Configurations for Resource-constrained AutoML](https://arxiv.org/abs/2202.09927). Moe Kayali, Chi Wang. ArXiv preprint arXiv:2202.09927 (2022).\n\n```bibtex\n@inproceedings{kayaliwang2022default,\n    title={Mining Robust Default Configurations for Resource-constrained AutoML},\n    author={Moe Kayali and Chi Wang},\n    year={2022},\n    booktitle={ArXiv preprint arXiv:2202.09927},\n}\n```\n\n* [Targeted Hyperparameter Optimization with Lexicographic Preferences Over Multiple Objectives](https://openreview.net/forum?id=0Ij9_q567Ma). Shaokun Zhang, Feiran Jia, Chi Wang, Qingyun Wu. ICLR 2023 (notable-top-5%).\n\n```bibtex\n@inproceedings{zhang2023targeted,\n    title={Targeted Hyperparameter Optimization with Lexicographic Preferences Over Multiple Objectives},\n    author={Shaokun Zhang and Feiran Jia and Chi Wang and Qingyun Wu},\n    booktitle={International Conference on Learning Representations},\n    year={2023},\n    url={https://openreview.net/forum?id=0Ij9_q567Ma},\n}\n```\n\n* [Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference](https://arxiv.org/abs/2303.04673). Chi Wang, Susan Xueqing Liu, Ahmed H. Awadallah. ArXiv preprint arXiv:2303.04673 (2023).\n\n```bibtex\n@inproceedings{wang2023EcoOptiGen,\n    title={Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference},\n    author={Chi Wang and Susan Xueqing Liu and Ahmed H. Awadallah},\n    year={2023},\n    booktitle={ArXiv preprint arXiv:2303.04673},\n}\n```\n\n* [An Empirical Study on Challenging Math Problem Solving with GPT-4](https://arxiv.org/abs/2306.01337). Yiran Wu, Feiran Jia, Shaokun Zhang, Hangyu Li, Erkang Zhu, Yue Wang, Yin Tat Lee, Richard Peng, Qingyun Wu, Chi Wang. ArXiv preprint arXiv:2306.01337 (2023).\n\n```bibtex\n@inproceedings{wu2023empirical,\n    title={An Empirical Study on Challenging Math Problem Solving with GPT-4},\n    author={Yiran Wu and Feiran Jia and Shaokun Zhang and Hangyu Li and Erkang Zhu and Yue Wang and Yin Tat Lee and Richard Peng and Qingyun Wu and Chi Wang},\n    year={2023},\n    booktitle={ArXiv preprint arXiv:2306.01337},\n}\n```\n\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nThere is no function named `tune_automl` in FLAML. However, FLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark: \n- Use Spark ML Estimators for AutoML.\n- Use Spark to run training in parallel Spark jobs.\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-5",children:"Example 5"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"#table-of-contents",children:"Back to top"})}),"\n",(0,a.jsxs)(n.p,{children:["Use RetrieveChat to answer questions for\n",(0,a.jsx)(n.a,{href:"https://ai.google.com/research/NaturalQuestions",children:"NaturalQuestion"}),"\ndataset."]}),"\n",(0,a.jsxs)(n.p,{children:["First, we will create a new document collection which includes all the\ncontextual corpus. Then, we will choose some questions and utilize\nRetrieveChat to answer them. For this particular example, we will be\nusing the ",(0,a.jsx)(n.code,{children:"gpt-3.5-turbo"})," model, and we will demonstrate RetrieveChat\u2019s\nfeature of automatically updating context in case the documents\nretrieved do not contain sufficient information."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'config_list[0]["model"] = "gpt-35-turbo"  # change model to gpt-35-turbo\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'corpus_file = "https://huggingface.co/datasets/thinkall/NaturalQuestionsQA/resolve/main/corpus.txt"\n\n# Create a new collection for NaturalQuestions dataset\n# `task` indicates the kind of task we\'re working on. In this example, it\'s a `qa` task.\nragproxyagent = RetrieveUserProxyAgent(\n    name="ragproxyagent",\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=10,\n    retrieve_config={\n        "task": "qa",\n        "docs_path": corpus_file,\n        "chunk_token_size": 2000,\n        "model": config_list[0]["model"],\n        "client": chromadb.PersistentClient(path="/tmp/chromadb"),\n        "collection_name": "natural-questions",\n        "chunk_mode": "one_line",\n        "embedding_model": "all-MiniLM-L6-v2",\n    },\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# queries_file = "https://huggingface.co/datasets/thinkall/NaturalQuestionsQA/resolve/main/queries.jsonl"\nqueries = """{"_id": "ce2342e1feb4e119cb273c05356b33309d38fa132a1cbeac2368a337e38419b8", "text": "what is non controlling interest on balance sheet", "metadata": {"answer": ["the portion of a subsidiary corporation \'s stock that is not owned by the parent corporation"]}}\n{"_id": "3a10ff0e520530c0aa33b2c7e8d989d78a8cd5d699201fc4b13d3845010994ee", "text": "how many episodes are in chicago fire season 4", "metadata": {"answer": ["23"]}}\n{"_id": "fcdb6b11969d5d3b900806f52e3d435e615c333405a1ff8247183e8db6246040", "text": "what are bulls used for on a farm", "metadata": {"answer": ["breeding", "as work oxen", "slaughtered for meat"]}}\n{"_id": "26c3b53ec44533bbdeeccffa32e094cfea0cc2a78c9f6a6c7a008ada1ad0792e", "text": "has been honoured with the wisden leading cricketer in the world award for 2016", "metadata": {"answer": ["Virat Kohli"]}}\n{"_id": "0868d0964c719a52cbcfb116971b0152123dad908ac4e0a01bc138f16a907ab3", "text": "who carried the usa flag in opening ceremony", "metadata": {"answer": ["Erin Hamlin"]}}\n"""\nqueries = [json.loads(line) for line in queries.split("\\n") if line]\nquestions = [q["text"] for q in queries]\nanswers = [q["metadata"]["answer"] for q in queries]\nprint(questions)\nprint(answers)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"['what is non controlling interest on balance sheet', 'how many episodes are in chicago fire season 4', 'what are bulls used for on a farm', 'has been honoured with the wisden leading cricketer in the world award for 2016', 'who carried the usa flag in opening ceremony']\n[[\"the portion of a subsidiary corporation 's stock that is not owned by the parent corporation\"], ['23'], ['breeding', 'as work oxen', 'slaughtered for meat'], ['Virat Kohli'], ['Erin Hamlin']]\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'for i in range(len(questions)):\n    print(f"\\n\\n>>>>>>>>>>>>  Below are outputs of Case {i+1}  <<<<<<<<<<<<\\n\\n")\n\n    # reset the assistant. Always reset the assistant before starting a new conversation.\n    assistant.reset()\n\n    qa_problem = questions[i]\n    ragproxyagent.initiate_chat(assistant, problem=qa_problem, n_results=30)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n\n>>>>>>>>>>>>  Below are outputs of Case 1  <<<<<<<<<<<<\n\n\nTrying to create collection.\ndoc_ids:  [['doc_0', 'doc_3334', 'doc_720', 'doc_2732', 'doc_2510', 'doc_5084', 'doc_5068', 'doc_3727', 'doc_1938', 'doc_4689', 'doc_5249', 'doc_1751', 'doc_480', 'doc_3989', 'doc_2115', 'doc_1233', 'doc_2264', 'doc_633', 'doc_2376', 'doc_2293', 'doc_5274', 'doc_5213', 'doc_3991', 'doc_2880', 'doc_2737', 'doc_1257', 'doc_1748', 'doc_2038', 'doc_4073', 'doc_2876']]\nAdding doc_id doc_0 to context.\nAdding doc_id doc_3334 to context.\nAdding doc_id doc_720 to context.\nAdding doc_id doc_2732 to context.\nAdding doc_id doc_2510 to context.\nAdding doc_id doc_5084 to context.\nAdding doc_id doc_5068 to context.\nAdding doc_id doc_3727 to context.\nAdding doc_id doc_1938 to context.\nAdding doc_id doc_4689 to context.\nAdding doc_id doc_5249 to context.\nAdding doc_id doc_1751 to context.\nAdding doc_id doc_480 to context.\nAdding doc_id doc_3989 to context.\nAdding doc_id doc_3334 to context.\nAdding doc_id doc_720 to context.\nAdding doc_id doc_2732 to context.\nAdding doc_id doc_2510 to context.\nAdding doc_id doc_5084 to context.\nAdding doc_id doc_5068 to context.\nAdding doc_id doc_3727 to context.\nAdding doc_id doc_1938 to context.\nAdding doc_id doc_4689 to context.\nAdding doc_id doc_5249 to context.\nAdding doc_id doc_1751 to context.\nAdding doc_id doc_480 to context.\nAdding doc_id doc_3989 to context.\nAdding doc_id doc_2115 to context.\nAdding doc_id doc_1233 to context.\nAdding doc_id doc_2264 to context.\nAdding doc_id doc_633 to context.\nAdding doc_id doc_2376 to context.\nragproxyagent (to assistant):\n\nYou're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the\ncontext provided by the user.\nIf you can't answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nYou must give as short an answer as possible.\n\nUser's question is: what is non controlling interest on balance sheet\n\nContext is: <P> In accounting , minority interest ( or non-controlling interest ) is the portion of a subsidiary corporation 's stock that is not owned by the parent corporation . The magnitude of the minority interest in the subsidiary company is generally less than 50 % of outstanding shares , or the corporation would generally cease to be a subsidiary of the parent . </P>\n<P> The balance sheet is the financial statement showing a firm 's assets , liabilities and equity ( capital ) at a set point in time , usually the end of the fiscal year reported on the accompanying income statement . The total assets always equal the total combined liabilities and equity in dollar amount . This statement best demonstrates the basic accounting equation - Assets = Liabilities + Equity . The statement can be used to help show the status of a company . </P>\n<P> The comptroller ( who is also auditor general and head of the National Audit Office ) controls both the Consolidated Fund and the National Loans Fund . The full official title of the role is Comptroller General of the Receipt and Issue of Her Majesty 's Exchequer . </P>\n<P> Financing activities include the inflow of cash from investors such as banks and shareholders , as well as the outflow of cash to shareholders as dividends as the company generates income . Other activities which impact the long - term liabilities and equity of the company are also listed in the financing activities section of the cash flow statement . </P>\n<P> It is frequently claimed that annual accounts have not been certified by the external auditor since 1994 . In its annual report on the implementation of the 2009 EU Budget , the Court of Auditors found that the two biggest areas of the EU budget , agriculture and regional spending , have not been signed off on and remain `` materially affected by error '' . </P>\n<P> The Ministry of Finance , Government of India announces the rate of interest for PPF account every quarter . The current interest rate effective from 1 January 2018 is 7.6 % Per Annum ' ( compounded annually ) . Interest will be paid on 31 March every year . Interest is calculated on the lowest balance between the close of the fifth day and the last day of every month . </P>\n<Table> <Tr> <Th> Quarter </Th> <Th> Interest Rate </Th> </Tr> <Tr> <Td> April 2018 - June 2018 </Td> <Td> 7.6 % </Td> </Tr> </Table>\n<P> For a percentage of the settlement amount , Public adjusters work exclusively for the policyholder . This means there should be no inherent conflict of interest when it comes to advocating on the policyholder 's behalf to the insurance company . </P>\n<P> Accounts receivable is a legally enforceable claim for payment held by a business for goods supplied and / or services rendered that customers / clients have ordered but not paid for . These are generally in the form of invoices raised by a business and delivered to the customer for payment within an agreed time frame . Accounts receivable is shown in a balance sheet as an asset . It is one of a series of accounting transactions dealing with the billing of a customer for goods and services that the customer has ordered . These may be distinguished from notes receivable , which are debts created through formal legal instruments called promissory notes . </P>\n<P> A common synonym for net profit when discussing financial statements ( which include a balance sheet and an income statement ) is the bottom line . This term results from the traditional appearance of an income statement which shows all allocated revenues and expenses over a specified time period with the resulting summation on the bottom line of the report . </P>\n<Table> Electronic Fund Transfer Act <Tr> <Td colspan=\"2\"> </Td> </Tr> <Tr> <Th> Other short titles </Th> <Td> <Ul> <Li> Financial Institutions Regulatory and Interest Rate Control Act of 1978 </Li> <Li> Change in Bank Control Act </Li> <Li> Change in Savings and Loan Control Act </Li> <Li> Depository Institution Management Interlocks Act </Li> <Li> Export - Import Bank Act Amendments </Li> <Li> Federal Financial Institutions Examination Council Act </Li> <Li> National Credit Union Central Liquidity Facility Act </Li> <Li> Right to Financial Privacy Act </Li> </Ul> </Td> </Tr> <Tr> <Th> Long title </Th> <Td> An Act to extend the authority for the flexible regulation of interest rates on deposits and accounts in depository institutions . </Td> </Tr> <Tr> <Th> Nicknames </Th> <Td> American Arts Gold Medallion Act </Td> </Tr> <Tr> <Th> Enacted by </Th> <Td> the 95th United States Congress </Td> </Tr> <Tr> <Th> Effective </Th> <Td> November 10 , 1978 </Td> </Tr> <Tr> <Th colspan=\"2\"> Citations </Th> </Tr> <Tr> <Th> Public law </Th> <Td> 95 - 630 </Td> </Tr> <Tr> <Th> Statutes at Large </Th> <Td> 92 Stat. 3641 aka 92 Stat. 3728 </Td> </Tr> <Tr> <Th colspan=\"2\"> Codification </Th> </Tr> <Tr> <Th> Titles amended </Th> <Td> <Ul> <Li> 12 U.S.C. : Banks and Banking </Li> <Li> 15 U.S.C. : Commerce and Trade </Li> </Ul> </Td> </Tr> <Tr> <Th> U.S.C. sections amended </Th> <Td> <Ul> <Li> 12 U.S.C. ch. 3 \xa7 226 et seq . </Li> <Li> 15 U.S.C. ch. 41 \xa7 1601 et seq . </Li> <Li> 15 U.S.C. ch. 41 \xa7 1693 et seq . </Li> </Ul> </Td> </Tr> <Tr> <Th colspan=\"2\"> Legislative history </Th> </Tr> <Tr> <Td colspan=\"2\"> <Ul> <Li> Introduced in the House as H.R. 14279 by Fernand St. Germain ( D - RI ) on October 10 , 1978 </Li> <Li> Committee consideration by House Banking , Finance , and Urban Affairs , Senate Banking , Housing , and Urban Affairs </Li> <Li> Passed the House on October 11 , 1978 ( passed ) </Li> <Li> Passed the Senate on October 12 , 1978 ( passed ) with amendment </Li> <Li> House agreed to Senate amendment on October 14 , 1978 ( 341 - 32 , in lieu of H. Res. 1439 ) with further amendment </Li> <Li> Senate agreed to House amendment on October 14 , 1978 ( agreed ) </Li> <Li> Signed into law by President Jimmy Carter on November 10 , 1978 </Li> </Ul> </Td> </Tr> <Tr> <Th colspan=\"2\"> Major amendments </Th> </Tr> <Tr> <Td colspan=\"2\"> Credit CARD Act of 2009 </Td> </Tr> </Table>\n<P> Financial management refers to the efficient and effective management of money ( funds ) in such a manner as to accomplish the objectives of the organization . It is the specialized function directly associated with the top management . The significance of this function is not seen in the ' Line ' but also in the capacity of the ' Staff ' in overall of a company . It has been defined differently by different experts in the field . </P>\n<P> Form 990 ( officially , the `` Return of Organization Exempt From Income Tax '' ) is a United States Internal Revenue Service form that provides the public with financial information about a nonprofit organization . It is often the only source of such information . It is also used by government agencies to prevent organizations from abusing their tax - exempt status . Certain nonprofits have more comprehensive reporting requirements , such as hospitals and other health care organizations ( Schedule H ) . </P>\n<P> The Board of Governors of the Federal Reserve System , commonly known as the Federal Reserve Board , is the main governing body of the Federal Reserve System . It is charged with overseeing the Federal Reserve Banks and with helping implement monetary policy of the United States . Governors are appointed by the President of the United States and confirmed by the Senate for staggered 14 - year terms . </P>\n<P> The International Monetary Fund ( IMF ) is an international organization headquartered in Washington , D.C. , of `` 189 countries working to foster global monetary cooperation , secure financial stability , facilitate international trade , promote high employment and sustainable economic growth , and reduce poverty around the world . '' Formed in 1945 at the Bretton Woods Conference primarily by the ideas of Harry Dexter White and John Maynard Keynes , it came into formal existence in 1945 with 29 member countries and the goal of reconstructing the international payment system . It now plays a central role in the management of balance of payments difficulties and international financial crises . Countries contribute funds to a pool through a quota system from which countries experiencing balance of payments problems can borrow money . As of 2016 , the fund had SDR 477 billion ( about $668 billion ) . </P>\n<Li> Callability -- Some bonds give the issuer the right to repay the bond before the maturity date on the call dates ; see call option . These bonds are referred to as callable bonds . Most callable bonds allow the issuer to repay the bond at par . With some bonds , the issuer has to pay a premium , the so - called call premium . This is mainly the case for high - yield bonds . These have very strict covenants , restricting the issuer in its operations . To be free from these covenants , the issuer can repay the bonds early , but only at a high cost . </Li>\n<P> On November 7 , 2016 , debt held by the public was $14.3 trillion or about 76 % of the previous 12 months of GDP . Intragovernmental holdings stood at $5.4 trillion , giving a combined total gross national debt of $19.8 trillion or about 106 % of the previous 12 months of GDP ; $6.2 trillion or approximately 45 % of the debt held by the public was owned by foreign investors , the largest of which were Japan and China at about $1.09 trillion for Japan and $1.06 trillion for China as of December 2016 . </P>\n<P> A currency transaction report ( CTR ) is a report that U.S. financial institutions are required to file with FinCEN for each deposit , withdrawal , exchange of currency , or other payment or transfer , by , through , or to the financial institution which involves a transaction in currency of more than $10,000 . Used in this context , currency means the coin and / or paper money of any country that is designated as legal tender by the country of issuance . Currency also includes U.S. silver certificates , U.S. notes , Federal Reserve notes , and official foreign bank notes . </P>\n<P> Checks and balances is the principle that each of the Branches has the power to limit or check the other two and this creates a balance between the three separate powers of the state , this principle induces that the ambitions of one branch prevent that one of the other branches become supreme , and thus be eternally confronting each other and in that process leaving the people free from government abuses . Checks and Balances are designed to maintain the system of separation of powers keeping each branch in its place . This is based on the idea that it is not enough to separate the powers and guarantee their independence but to give the various branches the constitutional means to defend their own legitimate powers from the encroachments of the other branches . They guarantee that the powers of the State have the same weight ( co-equal ) , that is , to be balanced , so that they can limit each other , avoiding the abuse of state power . the origin of checks and balances , like separation of powers itself , is specifically credited to Montesquieu in the Enlightenment ( in The Spirit of the Laws , 1748 ) , under this influence was implemented in 1787 in the Constitution of the United States . </P>\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nNon controlling interest on balance sheet refers to the portion of a subsidiary corporation's stock that is not owned by the parent corporation. It represents ownership of less than 50% of the outstanding shares. It is shown as a separate line item in the equity section of the balance sheet.\n\n--------------------------------------------------------------------------------\n\n\n>>>>>>>>>>>>  Below are outputs of Case 2  <<<<<<<<<<<<\n\n\ndoc_ids:  [['doc_1', 'doc_1097', 'doc_4221', 'doc_4972', 'doc_1352', 'doc_96', 'doc_988', 'doc_2370', 'doc_2414', 'doc_5038', 'doc_302', 'doc_1608', 'doc_980', 'doc_2112', 'doc_562', 'doc_4204', 'doc_3298', 'doc_2995', 'doc_3978', 'doc_1258', 'doc_2971', 'doc_2171', 'doc_1065', 'doc_17', 'doc_2683', 'doc_87', 'doc_1767', 'doc_158', 'doc_482', 'doc_3850']]\nAdding doc_id doc_1 to context.\nAdding doc_id doc_1097 to context.\nAdding doc_id doc_4221 to context.\nAdding doc_id doc_4972 to context.\nAdding doc_id doc_1352 to context.\nAdding doc_id doc_96 to context.\nAdding doc_id doc_988 to context.\nAdding doc_id doc_2370 to context.\nAdding doc_id doc_2414 to context.\nAdding doc_id doc_5038 to context.\nAdding doc_id doc_302 to context.\nAdding doc_id doc_1608 to context.\nAdding doc_id doc_980 to context.\nAdding doc_id doc_2112 to context.\nAdding doc_id doc_562 to context.\nAdding doc_id doc_4204 to context.\nAdding doc_id doc_3298 to context.\nAdding doc_id doc_2995 to context.\nAdding doc_id doc_3978 to context.\nAdding doc_id doc_1258 to context.\nAdding doc_id doc_2971 to context.\nAdding doc_id doc_2171 to context.\nAdding doc_id doc_1065 to context.\nAdding doc_id doc_17 to context.\nAdding doc_id doc_2683 to context.\nragproxyagent (to assistant):\n\nYou're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the\ncontext provided by the user.\nIf you can't answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nYou must give as short an answer as possible.\n\nUser's question is: how many episodes are in chicago fire season 4\n\nContext is: <P> The fourth season of Chicago Fire , an American drama television series with executive producer Dick Wolf , and producers Derek Haas , Michael Brandt , and Matt Olmstead , was ordered on February 5 , 2015 , by NBC , and premiered on October 13 , 2015 and concluded on May 17 , 2016 . The season contained 23 episodes . </P>\n<P> The fourth season began airing on October 10 , 2017 , and is set to run for 23 episodes on The CW until May 22 , 2018 . </P>\n<P> The fourth season began airing on October 10 , 2017 , on The CW . </P>\n<P> The fifth season of Chicago P.D. , an American police drama television series with executive producer Dick Wolf , and producers Derek Haas , Michael Brandt , and Rick Eid , premiered on September 27 , 2017 . This season featured its 100th episode . </P>\n<P> This was the city of Chicago 's first professional sports championship since the Chicago Fire won MLS Cup ' 98 ( which came four months after the Chicago Bulls ' sixth NBA championship that year ) . The next major Chicago sports championship came in 2010 , when the NHL 's Chicago Blackhawks ended a 49 - year Stanley Cup title drought . With the Chicago Bears ' win in Super Bowl XX and the Chicago Cubs ' own World Series championship in 2016 , all Chicago sports teams have won at least one major championship since 1985 . Meanwhile , the Astros themselves made it back to the World Series in 2017 , but this time as an AL team , where they defeated the Los Angeles Dodgers in seven games , resulting in Houston 's first professional sports championship since the 2006 -- 07 Houston Dynamo won their back - to - back MLS Championships . </P>\n<P> The season was ordered in May 2017 , and production began the following month . Ben McKenzie stars as Gordon , alongside Donal Logue , David Mazouz , Morena Baccarin , Sean Pertwee , Robin Lord Taylor , Erin Richards , Camren Bicondova , Cory Michael Smith , Jessica Lucas , Chris Chalk , Drew Powell , Crystal Reed and Alexander Siddig . The fourth season premiered on September 21 , 2017 , on Fox , while the second half premiered on March 1 , 2018 . </P>\n<P> As of May 24 , 2017 , 58 episodes of The 100 have aired , concluding the fourth season . In March 2017 , The CW renewed the series for a fifth season , set to premiere on April 24 , 2018 . </P>\n<P> The fifth book , River of Fire , is scheduled to be released on April 10 , 2018 . </P>\n<P> On September 10 , 2013 , AMC officially cancelled the series after 38 episodes and three seasons . However , on November 15 , 2013 , Netflix ordered a fourth and final season of six episodes , that was released on Netflix on August 1 , 2014 . </P>\n<P> The second season of Fargo , an American anthology black comedy -- crime drama television series created by Noah Hawley , premiered on October 12 , 2015 , on the basic cable network FX . Its principal cast consists of Kirsten Dunst , Patrick Wilson , Jesse Plemons , Jean Smart , and Ted Danson . The season had ten episodes , and its initial airing concluded on December 14 , 2015 . As an anthology , each Fargo season possesses its own self - contained narrative , following a disparate set of characters in various settings . </P>\n<P> The Great Fire of London was a major conflagration that swept through the central parts of the English city of London from Sunday , 2 September to Wednesday , 5 September 1666 . The fire gutted the medieval City of London inside the old Roman city wall . It threatened but did not reach the aristocratic district of Westminster , Charles II 's Palace of Whitehall , and most of the suburban slums . It consumed 13,200 houses , 87 parish churches , St Paul 's Cathedral , and most of the buildings of the City authorities . It is estimated to have destroyed the homes of 70,000 of the City 's 80,000 inhabitants . </P>\n<P> The first season consisted of eight one - hour - long episodes which were released worldwide on Netflix on July 15 , 2016 , in Ultra HD 4K . The second season , consisting of nine episodes , was released on October 27 , 2017 in HDR . A teaser for the second season , which also announced the release date , aired during Super Bowl LI . </P>\n<P> `` Two Days Before the Day After Tomorrow '' is the eighth episode in the ninth season of the American animated television series South Park . The 133rd overall episode overall , it originally aired on Comedy Central in the United States on October 19 , 2005 . In the episode , Stan and Cartman accidentally destroy a dam , causing the town of Beaverton to be destroyed . </P>\n<P> The fourth season consists of a double order of twenty episodes , split into two parts of ten episodes ; the second half premiered on November 30 , 2016 . The season follows the battles between Ragnar and Rollo in Francia , Bjorn 's raid into the Mediterranean , and the Viking invasion of England . It concluded in its entirety on February 1 , 2017 . </P>\n<P> This is an episode list for Sabrina the Teenage Witch , an American sitcom that debuted on ABC in 1996 . From Season 5 , the program was aired on The WB . The series ran for seven seasons totaling 163 episodes . It originally premiered on September 27 , 1996 on ABC and ended on April 24 , 2003 on The WB . </P>\n<P> Hart of Dixie was renewed by The CW for 10 episode season on May 8 , 2014 . The show 's fourth and final season premiered on November 15 , 2014 . The series was later cancelled on May 7 , 2015 . </P>\n<P> The Burning Maze is the third book in the series . It is scheduled to be released on May 1 , 2018 . </P>\n<Table> <Tr> <Th colspan=\"2\"> My Name Is Earl ( season 4 ) </Th> </Tr> <Tr> <Td colspan=\"2\"> DVD cover </Td> </Tr> <Tr> <Th> Country of origin </Th> <Td> United States </Td> </Tr> <Tr> <Th> No. of episodes </Th> <Td> 27 </Td> </Tr> <Tr> <Th colspan=\"2\"> Release </Th> </Tr> <Tr> <Th> Original network </Th> <Td> NBC </Td> </Tr> <Tr> <Th> Original release </Th> <Td> September 25 , 2008 -- May 14 , 2009 </Td> </Tr> <Tr> <Th colspan=\"2\"> Season chronology </Th> </Tr> <Tr> <Td colspan=\"2\"> \u2190 Previous Season 3 </Td> </Tr> <Tr> <Td colspan=\"2\"> List of My Name Is Earl episodes </Td> </Tr> </Table>\n<P> The eighteenth season of Law & Order : Special Victims Unit debuted on Wednesday , September 21 , 2016 , on NBC and finished on Wednesday , May 24 , 2017 , with a two - hour season finale . </P>\n<P> The eighth and final season of the fantasy drama television series Game of Thrones was announced by HBO in July 2016 . Unlike the first six seasons that each had ten episodes and the seventh that had seven episodes , the eighth season will have only six episodes . Like the previous season , it will largely consist of original content not found currently in George R.R. Martin 's A Song of Ice and Fire series , and will instead adapt material Martin has revealed to showrunners about the upcoming novels in the series , The Winds of Winter and A Dream of Spring . </P>\n<P> A total of 49 episodes of The Glades were produced and aired over four seasons . </P>\n<P> Sneaky Pete is an American crime drama series created by David Shore and Bryan Cranston . The series follows Marius Josipovi\u0107 ( Giovanni Ribisi ) , a released convict who adopts the identity of his cell mate , Pete Murphy , in order to avoid his past life . The series also stars Marin Ireland , Shane McRae , Libe Barer , Michael Drayer , Peter Gerety , and Margo Martindale . The pilot debuted on August 7 , 2015 , and was followed by a full series order that September . Shore left the project in early 2016 and was replaced by Graham Yost , who served as executive producer and showrunner for the remaining nine episodes . The first season premiered in its entirety on January 13 , 2017 , exclusively on Amazon Video . On January 19 , 2017 , Amazon announced that Sneaky Pete had been renewed for a second season , which was released on March 9 , 2018 . </P>\n<P> The eighth season of Blue Bloods , a police procedural drama series created by Robin Green and Mitchell Burgess , premiered on CBS on September 29 , 2017 . The season is set to contain 22 episodes . </P>\n<P> The first five seasons of Prison Break have been released on DVD and Blu - ray in Regions 1 , 2 , and 4 . Each DVD boxed set includes all of the broadcast episodes from that season , the associated special episode , commentary from cast and crew , and profiles of various parts of Prison Break , such as Fox River State Penitentiary or the tattoo . Prison Break is also available online , including iTunes , Amazon Video , and Netflix . After the premiere of the second season of Prison Break , Fox began online streaming of the prior week 's episode , though it originally restricted viewing to the United States . </P>\n<P> In June 2017 , Remini was upped to a series regular starting with Season 2 ; shortly after , it was announced that Erinn Hayes would not be returning for the show 's second season . Sources cited in a Variety article confirmed that Remini would be returning as Detective Vanessa Cellucci , the character she portrayed in the first - season finale , and that Hayes ' dismissal was for creative reasons and `` not a reflection '' of the actress ' performance . In August 2017 , it was reported Hayes ' character will be killed off before season two begins and the season will take place 7 -- 10 months after season one ended , in order to make room for Remini . </P>\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nThere are 23 episodes in Chicago Fire season 4.\n\n--------------------------------------------------------------------------------\n\n\n>>>>>>>>>>>>  Below are outputs of Case 3  <<<<<<<<<<<<\n\n\ndoc_ids:  [['doc_47', 'doc_45', 'doc_2570', 'doc_2851', 'doc_4033', 'doc_5320', 'doc_3849', 'doc_4172', 'doc_3202', 'doc_2282', 'doc_1896', 'doc_949', 'doc_103', 'doc_1552', 'doc_2791', 'doc_392', 'doc_1175', 'doc_5315', 'doc_832', 'doc_3185', 'doc_2532', 'doc_3409', 'doc_824', 'doc_4075', 'doc_1201', 'doc_4116', 'doc_1448', 'doc_2545', 'doc_2251', 'doc_2485']]\nAdding doc_id doc_47 to context.\nAdding doc_id doc_45 to context.\nAdding doc_id doc_2570 to context.\nAdding doc_id doc_2851 to context.\nAdding doc_id doc_4033 to context.\nAdding doc_id doc_5320 to context.\nAdding doc_id doc_3849 to context.\nAdding doc_id doc_4172 to context.\nAdding doc_id doc_3202 to context.\nAdding doc_id doc_2282 to context.\nAdding doc_id doc_1896 to context.\nAdding doc_id doc_949 to context.\nAdding doc_id doc_103 to context.\nAdding doc_id doc_1552 to context.\nAdding doc_id doc_2791 to context.\nAdding doc_id doc_392 to context.\nAdding doc_id doc_1175 to context.\nAdding doc_id doc_5315 to context.\nAdding doc_id doc_832 to context.\nAdding doc_id doc_3185 to context.\nAdding doc_id doc_2532 to context.\nragproxyagent (to assistant):\n\nYou're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the\ncontext provided by the user.\nIf you can't answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nYou must give as short an answer as possible.\n\nUser's question is: what are bulls used for on a farm\n\nContext is: <P> Many cattle ranches and stations run bulls with cows , and most dairy or beef farms traditionally had at least one , if not several , bulls for purposes of herd maintenance . However , the problems associated with handling a bull ( particularly where cows must be removed from its presence to be worked ) has prompted many dairy farmers to restrict themselves to artificial insemination ( AI ) of the cows . Semen is removed from the bulls and stored in canisters of liquid nitrogen , where it is kept until it can be sold , at which time it can be very profitable , in fact , many ranchers keep bulls specifically for this purpose . AI is also used to increase the quality of a herd , or to introduce an outcross of bloodlines . Some ranchers prefer to use AI to allow them to breed to several different bulls in a season or to breed their best stock to a higher quality bull than they could afford to purchase outright . AI may also be used in conjunction with embryo transfer to allow cattle producers to add new breeding to their herds . </P>\n<P> Other than the few bulls needed for breeding , the vast majority of male cattle are slaughtered for meat before the age of three years , except where they are needed ( castrated ) as work oxen for haulage . Most of these beef animals are castrated as calves to reduce aggressive behavior and prevent unwanted mating , although some are reared as uncastrated bull beef . A bull is typically ready for slaughter one or two months sooner than a castrated male or a female , and produces proportionately more , leaner muscle . </P>\n<P> Pastoral farming is the major land use but there are increases in land area devoted to horticulture . </P>\n<P> Animal fibers are natural fibers that consist largely of particular proteins . Instances are silk , hair / fur ( including wool ) and feathers . The animal fibers used most commonly both in the manufacturing world as well as by the hand spinners are wool from domestic sheep and silk . Also very popular are alpaca fiber and mohair from Angora goats . Unusual fibers such as Angora wool from rabbits and Chiengora from dogs also exist , but are rarely used for mass production . </P>\n<P> In 2012 , there were 3.2 million farmers , ranchers and other agricultural managers and an estimated 757,900 agricultural workers were legally employed in the US . Animal breeders accounted for 11,500 of those workers with the rest categorized as miscellaneous agricultural workers . The median pay was $9.12 per hour or $18,970 per year . In 2009 , about 519,000 people under age 20 worked on farms owned by their family . In addition to the youth who lived on family farms , an additional 230,000 youth were employed in agriculture . In 2004 , women made up approximately 24 % of farmers ; that year , there were 580,000 women employed in agriculture , forestry , and fishing . </P>\n<P> The recipe can vary widely . The defining ingredients are minced meat ( commonly beef when named cottage pie or lamb when named shepherd 's pie ) , typically cooked in a gravy with onions and sometimes other vegetables , such as peas , celery or carrots , and topped with mashed potato . The pie is sometimes also topped with grated cheese . </P>\n<P> The history of the domesticated sheep goes back to between 11000 and 9000 BC , and the domestication of the wild mouflon in ancient Mesopotamia . Sheep are among the first animals to have been domesticated by humans , and there is evidence of sheep farming in Iranian statuary dating to that time period . These sheep were primarily raised for meat , milk , and skins . Woolly sheep began to be developed around 6000 BC in Iran , and cultures such as the Persians relied on sheep 's wool for trading . They were then imported to Africa and Europe via trading . </P>\n<P> Although large - scale use of wheels did not occur in the Americas prior to European contact , numerous small wheeled artifacts , identified as children 's toys , have been found in Mexican archeological sites , some dating to about 1500 BC . It is thought that the primary obstacle to large - scale development of the wheel in the Americas was the absence of domesticated large animals which could be used to pull wheeled carriages . The closest relative of cattle present in Americas in pre-Columbian times , the American Bison , is difficult to domesticate and was never domesticated by Native Americans ; several horse species existed until about 12,000 years ago , but ultimately became extinct . The only large animal that was domesticated in the Western hemisphere , the llama , did not spread far beyond the Andes by the time of the arrival of Columbus . </P>\n<P> The Call of the Wild is a short adventure novel by Jack London published in 1903 and set in Yukon , Canada during the 1890s Klondike Gold Rush , when strong sled dogs were in high demand . The central character of the novel is a dog named Buck . The story opens at a ranch in Santa Clara Valley , California , when Buck is stolen from his home and sold into service as a sled dog in Alaska . He becomes progressively feral in the harsh environment , where he is forced to fight to survive and dominate other dogs . By the end , he sheds the veneer of civilization , and relies on primordial instinct and learned experience to emerge as a leader in the wild . </P>\n<P> The Three Little Pigs was included in The Nursery Rhymes of England ( London and New York , c. 1886 ) , by James Halliwell - Phillipps . The story in its arguably best - known form appeared in English Fairy Tales by Joseph Jacobs , first published in 1890 and crediting Halliwell as his source . The story begins with the title characters being sent out into the world by their mother , to `` seek out their fortune '' . The first little pig builds a house of straw , but a wolf blows it down and devours him . The second little pig builds a house of sticks , which the wolf also blows down , and the second little pig is also devoured . Each exchange between wolf and pig features ringing proverbial phrases , namely : </P>\n<P> `` How now brown cow '' ( / \u02c8ha\u028a \u02c8na\u028a \u02c8bra\u028an \u02c8ka\u028a / ) is a phrase used in elocution teaching to demonstrate rounded vowel sounds . Each `` ow '' sound in the phrase represents the diphthong / a\u028a / . Although orthographies for each of the four words in this utterance is represented by the English spelling `` ow '' , the articulation required to create this same diphthong represented by the International Phonetic Association 's phonetic alphabet as / a\u028a / is also represented by the spelling `` ou '' . Some examples of these homophonic / a\u028a / 's are the English words `` house '' , `` blouse '' , `` noun '' , and `` cloud '' . The use of the phrase `` how now brown cow '' in teaching elocution can be dated back to at least 1926 . Although not in use today , the phrase `` how now '' is a greeting , short for `` how say you now '' , and can be found in archaic literature , such as the plays of William Shakespeare . </P>\n<P> Brisket is a cut of meat from the breast or lower chest of beef or veal . The beef brisket is one of the nine beef primal cuts , though the precise definition of the cut differs internationally . The brisket muscles include the superficial and deep pectorals . As cattle do not have collar bones , these muscles support about 60 % of the body weight of standing / moving cattle . This requires a significant amount of connective tissue , so the resulting meat must be cooked correctly to tenderize the connective tissue . </P>\n<P> The music to `` Man Gave Names to All the Animals '' is reggae - inspired . The lyrics were inspired by the biblical Book of Genesis , verses 2 : 19 -- 20 in which Adam named the animals and birds . The lyrics have an appeal to children , rhyming the name of the animal with one of its characteristics . So after describing an animal 's `` muddy trail '' and `` curly tail , '' Dylan sings that `` he was n't too small and he was n't too big '' and so that animal was named a pig . Similarly , the cow got its name because Adam `` saw milk comin ' out but he did n't know how '' and the bear got its name because it has a `` great big furry back and furry hair . '' </P>\n<P> As early as 1671 railed roads were in use in Durham to ease the conveyance of coal ; the first of these was the Tanfield Wagonway . Many of these tramroads or wagon ways were built in the 17th and 18th centuries . They used simply straight and parallel rails of timber on which carts with simple flanged iron wheels were drawn by horses , enabling several wagons to be moved simultaneously . </P>\n<P> Unicorns are not found in Greek mythology , but rather in the accounts of natural history , for Greek writers of natural history were convinced of the reality of unicorns , which they believed lived in India , a distant and fabulous realm for them . The earliest description is from Ctesias , who in his book Indika ( `` On India '' ) described them as wild asses , fleet of foot , having a horn a cubit and a half ( 700 mm , 28 inches ) in length , and colored white , red and black . Aristotle must be following Ctesias when he mentions two one - horned animals , the oryx ( a kind of antelope ) and the so - called `` Indian ass '' . Strabo says that in the Caucasus there were one - horned horses with stag - like heads . Pliny the Elder mentions the oryx and an Indian ox ( perhaps a rhinoceros ) as one - horned beasts , as well as `` a very fierce animal called the monoceros which has the head of the stag , the feet of the elephant , and the tail of the boar , while the rest of the body is like that of the horse ; it makes a deep lowing noise , and has a single black horn , which projects from the middle of its forehead , two cubits ( 900 mm , 35 inches ) in length . '' In On the Nature of Animals ( \u03a0\u03b5\u03c1\u1f76 \u0396\u1ff4\u03c9\u03bd \u1f38\u03b4\u03b9\u03cc\u03c4\u03b7\u03c4\u03bf\u03c2 , De natura animalium ) , Aelian , quoting Ctesias , adds that India produces also a one - horned horse ( iii. 41 ; iv. 52 ) , and says ( xvi. 20 ) that the monoceros ( Greek : \u03bc\u03bf\u03bd\u03cc\u03ba\u03b5\u03c1\u03c9\u03c2 ) was sometimes called cartazonos ( Greek : \u03ba\u03b1\u03c1\u03c4\u03ac\u03b6\u03c9\u03bd\u03bf\u03c2 ) , which may be a form of the Arabic karkadann , meaning `` rhinoceros '' . </P>\n<P> The First Battle of Bull Run ( the name used by Union forces ) , also known as the First Battle of Manassas ( the name used by Confederate forces ) , was fought on July 21 , 1861 in Prince William County , Virginia , just north of the city of Manassas and about 25 miles west - southwest of Washington , D.C. It was the first major battle of the American Civil War . The Union 's forces were slow in positioning themselves , allowing Confederate reinforcements time to arrive by rail . Each side had about 18,000 poorly trained and poorly led troops in their first battle . It was a Confederate victory , followed by a disorganized retreat of the Union forces . </P>\n<P> Hops production is concentrated in moist temperate climates , with much of the world 's production occurring near the 48th parallel north . Hop plants prefer the same soils as potatoes and the leading potato - growing states in the United States are also major hops - producing areas ; however , not all potato - growing areas can produce good hops naturally : soils in the Maritime Provinces of Canada , for example , lack the boron that hops prefer . Historically , hops were not grown in Ireland , but were imported from England . In 1752 more than 500 tons of English hops were imported through Dublin alone . </P>\n<P> Shepherd 's pie or cottage pie is a meat pie with a crust of mashed potato . </P>\n<P> Castles served a range of purposes , the most important of which were military , administrative , and domestic . As well as defensive structures , castles were also offensive tools which could be used as a base of operations in enemy territory . Castles were established by Norman invaders of England for both defensive purposes and to pacify the country 's inhabitants . As William the Conqueror advanced through England , he fortified key positions to secure the land he had taken . Between 1066 and 1087 , he established 36 castles such as Warwick Castle , which he used to guard against rebellion in the English Midlands . </P>\n<P> The Rocky and Bullwinkle Show remained in syndicated reruns and was still available for local television stations through The Program Exchange as late as 2016 ; WBBZ - TV , for instance , aired the show in a strip to counterprogram 10 PM newscasts in the Buffalo , New York market during the summer 2013 season . The underlying rights are now owned by Universal Pictures , which holds the library of predecessor companies DreamWorks Animation and Classic Media , and who in turn with copyright holder Ward Productions forms the joint venture Bullwinkle Studios , which manages the Rocky and Bullwinkle properties ; Universal 's purchase of Classic Media coincided with The Program Exchange 's shutdown . </P>\n<P> When Yellowstone National Park was created in 1872 , gray wolf ( Canis lupus ) populations were already in decline in Montana , Wyoming and Idaho . The creation of the national park did not provide protection for wolves or other predators , and government predator control programs in the first decades of the 1900s essentially helped eliminate the gray wolf from Yellowstone . The last wolves were killed in Yellowstone in 1926 . After that time , sporadic reports of wolves still occurred , but scientists confirmed that sustainable wolf populations had been extirpated and were absent from Yellowstone during the mid-1900s . </P>\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nBulls are used for breeding and often kept for their semen to sell for AI purposes. Some male cattle are also kept as work oxen for haulage. The vast majority, however, are slaughtered for meat before the age of three years.\n\n--------------------------------------------------------------------------------\n\n\n>>>>>>>>>>>>  Below are outputs of Case 4  <<<<<<<<<<<<\n\n\ndoc_ids:  [['doc_3031', 'doc_819', 'doc_4521', 'doc_3980', 'doc_3423', 'doc_5275', 'doc_745', 'doc_753', 'doc_3562', 'doc_4139', 'doc_3678', 'doc_4931', 'doc_2347', 'doc_1115', 'doc_2806', 'doc_5204', 'doc_2707', 'doc_3653', 'doc_1122', 'doc_2398', 'doc_309', 'doc_3891', 'doc_2087', 'doc_330', 'doc_4844', 'doc_2155', 'doc_2674', 'doc_5357', 'doc_1581', 'doc_9']]\nAdding doc_id doc_3031 to context.\nAdding doc_id doc_819 to context.\nAdding doc_id doc_4521 to context.\nAdding doc_id doc_3980 to context.\nAdding doc_id doc_3423 to context.\nAdding doc_id doc_5275 to context.\nAdding doc_id doc_745 to context.\nAdding doc_id doc_753 to context.\nAdding doc_id doc_3562 to context.\nragproxyagent (to assistant):\n\nYou're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the\ncontext provided by the user.\nIf you can't answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nYou must give as short an answer as possible.\n\nUser's question is: has been honoured with the wisden leading cricketer in the world award for 2016\n\nContext is: <P> The first recipient was Uttam Kumar from Bengali cinema , who was honoured at the 15th National Film Awards in 1968 for his performances in Anthony Firingee and Chiriyakhana . As of 2017 , Amitabh Bachchan is the most honoured actor , with four awards . Two actors -- Kamal Haasan and Mammootty -- have been honoured three times , while six actors -- Sanjeev Kumar , Mithun Chakraborty , Om Puri , Naseeruddin Shah , Mohanlal , and Ajay Devgn -- have won the award two times . Two actors have achieved the honour for performing in two languages -- Mithun Chakraborty ( Hindi and Bengali ) and Mammootty ( Malayalam and English ) . The most recent recipient is Riddhi Sen , who was honoured at the 65th National Film Awards for his performance in the Bengali film Nagarkirtan . </P>\n<P> There was controversy over the National Film Award for Best Actor , which the committee awarded to Akshay Kumar for his performance in Rustom , snubbing Aamir Khan 's performance for Dangal . Committee member Priyadarshan , who has worked with Kumar on several films , gave the following explanation for awarding Kumar instead of Khan : </P>\n<P> The 2017 ICC Champions Trophy was the eighth ICC Champions Trophy , a cricket tournament for the eight top - ranked One Day International ( ODI ) teams in the world . It was held in England and Wales from 1 June to 18 June 2017 . Pakistan won the competition for the first time with a 180 - run victory over India in the final at The Oval . The margin of victory was the largest by any team in the final of an ICC ODI tournament in terms of runs . </P>\n<Table> List of One Day International cricket double centuries <Tr> <Th> No . </Th> <Th> Runs </Th> <Th> Batsman </Th> <Th> S / R </Th> <Th> For </Th> <Th> Against </Th> <Th> ODI </Th> <Th> Venue </Th> <Th> Date </Th> </Tr> <Tr> <Td> </Td> <Td> 200 * </Td> <Td> Tendulkar , Sachin Sachin Tendulkar </Td> <Td> 136.05 </Td> <Td> India </Td> <Td> South Africa </Td> <Td> 2962 </Td> <Td> Captain Roop Singh Stadium , Gwalior , India </Td> <Td> 24 February 2010 </Td> </Tr> <Tr> <Td> </Td> <Td> 219 </Td> <Td> Sehwag , Virender Virender Sehwag </Td> <Td> 146.98 </Td> <Td> India </Td> <Td> West Indies </Td> <Td> 3223 </Td> <Td> Holkar Stadium , Indore , India </Td> <Td> 8 December 2011 </Td> </Tr> <Tr> <Td> </Td> <Td> 209 </Td> <Td> Sharma , Rohit Rohit Sharma </Td> <Td> 132.28 </Td> <Td> India </Td> <Td> Australia </Td> <Td> 3428 </Td> <Td> M. Chinnaswamy Stadium , Bangalore , India </Td> <Td> 2 November 2013 </Td> </Tr> <Tr> <Td> </Td> <Td> 264 </Td> <Td> Sharma , Rohit Rohit Sharma </Td> <Td> 152.60 </Td> <Td> India </Td> <Td> Sri Lanka </Td> <Td> 3544 </Td> <Td> Eden Gardens , India </Td> <Td> 13 November 2014 </Td> </Tr> <Tr> <Td> 5 </Td> <Td> 215 </Td> <Td> Gayle , Chris Chris Gayle </Td> <Td> 146.30 </Td> <Td> West Indies </Td> <Td> Zimbabwe </Td> <Td> 3612 </Td> <Td> Manuka Oval , Canberra , Australia </Td> <Td> 24 February 2015 </Td> </Tr> <Tr> <Td> 6 </Td> <Td> 237 * </Td> <Td> Guptill , Martin Martin Guptill </Td> <Td> 145.40 </Td> <Td> New Zealand </Td> <Td> West Indies </Td> <Td> 3643 </Td> <Td> Wellington Regional Stadium , Wellington , New Zealand </Td> <Td> 22 March 2015 </Td> </Tr> <Tr> <Td> 7 </Td> <Td> 208 * </Td> <Td> Sharma , Rohit Rohit Sharma </Td> <Td> 135.95 </Td> <Td> India </Td> <Td> Sri Lanka </Td> <Td> 3941 </Td> <Td> Punjab Cricket Association IS Bindra Stadium , Mohali , India </Td> <Td> 13 December 2017 </Td> </Tr> </Table>\n<P> G. Sankara Kurup , ( 3 June 1901 , Nayathode , Kingdom of Cochin ( now in Ernakulam district , Kerala , India ) -- 2 February 1978 , Vappalassery , Angamaly , Ernakulam district , Kerala ) , better known as Mahakavi G ( The Great Poet G ) , was the first winner of the Jnanpith Award , India 's highest literary award . He won the prize in 1965 for his collection of poems in Malayalam Odakkuzhal ( The Bamboo Flute , 1950 ) . With part of the prize money he established the literary award Odakkuzhal in 1968 . He was also the recipient of the Soviet Land Nehru Award , in 1967 , and the Padma Bhushan in 1968 . His poetry collection Viswadarshanam won the Kerala Sahitya Akademi Award in 1961 and Kendra Sahitya Akademi Award in 1963 . </P>\n<P> The 2019 Cricket World Cup ( officially ICC Cricket World Cup 2019 ) is the 12th edition of the Cricket World Cup , scheduled to be hosted by England and Wales , from 30 May to 14 July 2019 . </P>\n<Table> 2018 Under - 19 Cricket World Cup <Tr> <Td colspan=\"2\"> </Td> </Tr> <Tr> <Th> Dates </Th> <Td> 13 January -- 3 February 2018 </Td> </Tr> <Tr> <Th> Administrator ( s ) </Th> <Td> International Cricket Council </Td> </Tr> <Tr> <Th> Cricket format </Th> <Td> 50 overs </Td> </Tr> <Tr> <Th> Tournament format ( s ) </Th> <Td> Round - robin and knockout </Td> </Tr> <Tr> <Th> Host ( s ) </Th> <Td> New Zealand </Td> </Tr> <Tr> <Th> Champions </Th> <Td> India ( 4th title ) </Td> </Tr> <Tr> <Th> Runners - up </Th> <Td> Australia </Td> </Tr> <Tr> <Th> Participants </Th> <Td> 16 </Td> </Tr> <Tr> <Th> Matches played </Th> <Td> 48 </Td> </Tr> <Tr> <Th> Player of the series </Th> <Td> Shubman Gill </Td> </Tr> <Tr> <Th> Most runs </Th> <Td> Alick Athanaze ( 418 ) </Td> </Tr> <Tr> <Th> Most wickets </Th> <Td> Anukul Roy ( 14 ) Qais Ahmad ( 14 ) Faisal Jamkhandi ( 14 ) </Td> </Tr> <Tr> <Th> Official website </Th> <Td> Official website </Td> </Tr> <Tr> <Td colspan=\"2\"> \u2190 2016 2020 \u2192 </Td> </Tr> </Table>\n<P> The 2018 ICC Under - 19 Cricket World Cup was an international limited - overs cricket tournament that was held in New Zealand from 13 January to 3 February 2018 . It was the twelfth edition of the Under - 19 Cricket World Cup , and the third to be held in New Zealand ( after the 2002 and 2010 events ) . New Zealand was the first country to host the event three times . The opening ceremony took place on 7 January 2018 . The West Indies were the defending champions . However , they failed to defend their title , after losing their first two group fixtures . </P>\n<P> Scoring over 10,000 runs across a playing career in any format of cricket is considered a significant achievement . In the year 2001 , Sachin Tendulkar became the first player to score 10,000 runs in ODIs , while playing a match during the bi-lateral series against Australia at home . In the chase for achieving top scores , West Indies ' Desmond Haynes retired as the most prolific run - scorer in One Day Internationals ( ODIs ) , with a total of 8,648 runs in 1994 . The record stood for four years until it was broken by India 's Mohammed Azharuddin . Azharuddin remained the top - scorer in the format until his compatriot Sachin Tendulkar passed him in October 2000 . As of August 2016 , eleven players -- from six teams that are Full members of the International Cricket Council -- have scored more than 10,000 runs in ODIs . Four of these are from Sri Lanka and three from India . The rest are one player each from Pakistan , Australia , West Indies , and South Africa . Bangladesh , England , New Zealand , and Zimbabwe are yet to have a player reach the 10,000 - run mark in this format . </P>\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nI'm sorry, I couldn't find any information about who has been honoured with the Wisden Leading Cricketer in the World award for 2016. UPDATE CONTEXT.\n\n--------------------------------------------------------------------------------\nUpdating context and resetting conversation.\nAdding doc_id doc_4139 to context.\nAdding doc_id doc_3678 to context.\nAdding doc_id doc_4931 to context.\nAdding doc_id doc_2347 to context.\nAdding doc_id doc_1115 to context.\nAdding doc_id doc_2806 to context.\nAdding doc_id doc_5204 to context.\nAdding doc_id doc_2707 to context.\nAdding doc_id doc_3653 to context.\nragproxyagent (to assistant):\n\nYou're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the\ncontext provided by the user.\nIf you can't answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nYou must give as short an answer as possible.\n\nUser's question is: has been honoured with the wisden leading cricketer in the world award for 2016\n\nContext is: <Table> List of the Indian Oscar nominee ( s ) / recipient ( s ) , also showing the year , film , category , and result <Tr> <Th> Year </Th> <Th> Nominee ( s ) / recipient ( s ) </Th> <Th> Film </Th> <Th> Category / Honorary Award </Th> <Th> Result / received </Th> <Th> Ref . </Th> </Tr> <Tr> <Td> 1958 ( 30th ) </Td> <Td> Mehboob Khan </Td> <Td> Mother India </Td> <Td> Best Foreign Language Film </Td> <Td> Nominated </Td> <Td> </Td> </Tr> <Tr> <Td> 1961 ( 33rd ) </Td> <Td> Ismail Merchant </Td> <Td> The Creation of Woman </Td> <Td> Best Short Subject ( Live Action ) </Td> <Td> Nominated </Td> <Td> </Td> </Tr> <Tr> <Td> 1979 ( 51st ) </Td> <Td> Vidhu Vinod Chopra and K.K. Kapil </Td> <Td> An Encounter with Faces </Td> <Td> Best Documentary ( Short Subject ) </Td> <Td> Nominated </Td> <Td> </Td> </Tr> <Tr> <Td> ( 55th ) </Td> <Td> Bhanu Athaiya </Td> <Td> Gandhi </Td> <Td> Best Costume Design </Td> <Td> Won </Td> <Td> </Td> </Tr> <Tr> <Td> Ravi Shankar </Td> <Td> Best Original Score </Td> <Td> Nominated </Td> </Tr> <Tr> <Td> ( 59th ) </Td> <Td> Ismail Merchant </Td> <Td> A Room with a View </Td> <Td> Best Picture </Td> <Td> Nominated </Td> <Td> </Td> </Tr> <Tr> <Td> ( 61st ) </Td> <Td> Mira Nair </Td> <Td> Salaam Bombay ! </Td> <Td> Best Foreign Language Film </Td> <Td> Nominated </Td> <Td> </Td> </Tr> <Tr> <Td> 1992 ( 64th ) </Td> <Td> Satyajit Ray </Td> <Td> Pather Pachali </Td> <Td> Honorary Award </Td> <Td> Received </Td> <Td> </Td> </Tr> <Tr> <Td> ( 65th ) </Td> <Td> Ismail Merchant </Td> <Td> Howards End </Td> <Td> Best Picture </Td> <Td> Nominated </Td> <Td> </Td> </Tr> <Tr> <Td> ( 66th ) </Td> <Td> Ismail Merchant </Td> <Td> The Remains of the Day </Td> <Td> Best Picture </Td> <Td> Nominated </Td> <Td> </Td> </Tr> <Tr> <Td> 2002 ( 74th ) </Td> <Td> Ashutosh Gowarikar </Td> <Td> Lagaan </Td> <Td> Best Foreign Language Film </Td> <Td> Nominated </Td> <Td> </Td> </Tr> <Tr> <Td> 2005 ( 77th ) </Td> <Td> Ashvin Kumar </Td> <Td> Little Terrorist </Td> <Td> Best Short Subject ( Live Action ) </Td> <Td> Nominated </Td> <Td> </Td> </Tr> <Tr> <Td> 2007 ( 79th ) </Td> <Td> Deepa Mehta </Td> <Td> Water </Td> <Td> Best Foreign Language Film </Td> <Td> Nominated </Td> <Td> </Td> </Tr> <Tr> <Td> 2009 ( 81st ) </Td> <Td> Resul Pookutty </Td> <Td> Slumdog Millionaire </Td> <Td> Best Sound Mixing </Td> <Td> Won </Td> <Td> </Td> </Tr> <Tr> <Td> A.R. Rahman </Td> <Td> Best Original Score </Td> <Td> Won </Td> </Tr> <Tr> <Td> A.R. Rahman and Gulzar </Td> <Td> Best Original Song </Td> <Td> Won </Td> </Tr> <Tr> <Td> 2011 ( 83rd ) </Td> <Td> A.R. Rahman </Td> <Td> 127 Hours </Td> <Td> Best Original Score </Td> <Td> Nominated </Td> <Td> </Td> </Tr> <Tr> <Td> A.R. Rahman </Td> <Td> Best Original Song </Td> <Td> Nominated </Td> </Tr> <Tr> <Td> 2013 ( 85th ) </Td> <Td> Bombay Jayashri </Td> <Td> Life of Pi </Td> <Td> Best Original Song </Td> <Td> Nominated </Td> <Td> </Td> </Tr> <Tr> <Td> 2016 </Td> <Td> Rahul Thakkar </Td> <Td> n / a </Td> <Td> Sci - Tech Award </Td> <Td> Received </Td> <Td> </Td> </Tr> <Tr> <Td> 2016 </Td> <Td> Cottalango Leon </Td> <Td> n / a </Td> <Td> Sci - Tech Award </Td> <Td> Received </Td> <Td> </Td> </Tr> <Tr> <Td> 2018 </Td> <Td> Vikas Sathaye </Td> <Td> n / a </Td> <Td> Sci - Tech Award </Td> <Td> Received </Td> <Td> </Td> </Tr> </Table>\n<P> The 2017 Nobel Peace Prize was awarded to the International Campaign to Abolish Nuclear Weapons ( ICAN ) `` for its work to draw attention to the catastrophic humanitarian consequences of any use of nuclear weapons and for its ground - breaking efforts to achieve a treaty - based prohibition on such weapons , '' according to the Norwegian Nobel Committee announcement on October 6 , 2017 . The award announcement acknowledged the fact that `` the world 's nine nuclear - armed powers and their allies '' neither signed nor supported the treaty - based prohibition known as the Treaty on the Prohibition of Nuclear Weapons or nuclear ban treaty , yet in an interview Committee Chair Berit Reiss - Andersen told reporters that the award was intended to give `` encouragement to all players in the field '' to disarm . The award was hailed by civil society as well as governmental and intergovernmental representatives who support the nuclear ban treaty , but drew criticism from those opposed . At the Nobel Peace Prize award ceremony held in Oslo City Hall on December 10 , 2017 , Setsuko Thurlow , an 85 - year - old survivor of the 1945 atomic bombing of Hiroshima , and ICAN Executive Director Beatrice Fihn jointly received a medal and diploma of the award on behalf of ICAN and delivered the Nobel lecture . </P>\n<P> Career records for batting average are usually subject to a minimum qualification of 20 innings played or completed , in order to exclude batsmen who have not played enough games for their skill to be reliably assessed . Under this qualification , the highest Test batting average belongs to Australia 's Sir Donald Bradman , with 99.94 . Given that a career batting average over 50 is exceptional , and that only five other players have averages over 60 , this is an outstanding statistic . The fact that Bradman 's average is so far above that of any other cricketer has led several statisticians to argue that , statistically at least , he was the greatest athlete in any sport . </P>\n<Table> <Tr> <Th colspan=\"4\"> Indian cricket team in South Africa in 2017 -- 18 </Th> </Tr> <Tr> <Th> </Th> <Td> </Td> <Td> </Td> </Tr> <Tr> <Th> </Th> <Td> South Africa </Td> <Td> India </Td> </Tr> <Tr> <Th> Dates </Th> <Td colspan=\"3\"> 5 January 2018 -- 24 February 2018 </Td> </Tr> <Tr> <Th> Captains </Th> <Td> Faf du Plessis ( Tests and ODIs ) JP Duminy ( T20Is ) </Td> <Td> Virat Kohli </Td> </Tr> <Tr> <Th colspan=\"4\"> Test series </Th> </Tr> <Tr> <Th> Result </Th> <Td colspan=\"3\"> South Africa won the 3 - match series 2 -- 1 </Td> </Tr> <Tr> <Th> Most runs </Th> <Td> AB de Villiers ( 211 ) </Td> <Td> Virat Kohli ( 286 ) </Td> </Tr> <Tr> <Th> Most wickets </Th> <Td> Vernon Philander ( 15 ) Kagiso Rabada ( 15 ) </Td> <Td> Mohammed Shami ( 15 ) </Td> </Tr> <Tr> <Th> Player of the series </Th> <Td colspan=\"3\"> Vernon Philander ( SA ) </Td> </Tr> <Tr> <Th colspan=\"4\"> One Day International series </Th> </Tr> <Tr> <Th> Results </Th> <Td colspan=\"3\"> India won the 6 - match series 5 -- 1 </Td> </Tr> <Tr> <Th> Most runs </Th> <Td> Hashim Amla ( 154 ) </Td> <Td> Virat Kohli ( 558 ) </Td> </Tr> <Tr> <Th> Most wickets </Th> <Td> Lungi Ngidi ( 8 ) </Td> <Td> Kuldeep Yadav ( 17 ) </Td> </Tr> <Tr> <Th> Player of the series </Th> <Td colspan=\"3\"> Virat Kohli ( Ind ) </Td> </Tr> <Tr> <Th colspan=\"4\"> Twenty20 International series </Th> </Tr> <Tr> <Th> Results </Th> <Td colspan=\"3\"> India won the 3 - match series 2 -- 1 </Td> </Tr> <Tr> <Th> Most runs </Th> <Td> JP Duminy ( 122 ) </Td> <Td> Shikhar Dhawan ( 143 ) </Td> </Tr> <Tr> <Th> Most wickets </Th> <Td> Junior Dala ( 7 ) </Td> <Td> Bhuvneshwar Kumar ( 7 ) </Td> </Tr> <Tr> <Th> Player of the series </Th> <Td colspan=\"3\"> Bhuvneshwar Kumar ( Ind ) </Td> </Tr> </Table>\n<P> Brian Lara took the least number of innings ( 195 ) to reach the 10,000 run mark , later equalled by Sachin Tendulkar and Kumar Sangakkara , while Australia 's Steve Waugh took 244 innings to achieve the feat . Alastair Cook is the fastest in terms of time span , taking 10 years and 87 days . The time taken by Shivnarine Chanderpaul ( 18 years and 37 days ) is the slowest among all . As of May 2017 , Tendulkar leads the list with 15,921 runs followed by Ricky Ponting of Australia with 13,378 . </P>\n<Table> <Tr> <Th> 50 + </Th> <Th> Player </Th> <Th> Matches </Th> <Th> Innings </Th> </Tr> <Tr> <Th> 119 </Th> <Td> Sachin Tendulkar </Td> <Td> 200 </Td> <Td> 329 </Td> </Tr> <Tr> <Th> 103 </Th> <Td> Jacques Kallis </Td> <Td> 166 </Td> <Td> 280 </Td> </Tr> <Tr> <Th> 103 </Th> <Td> Ricky Ponting </Td> <Td> 168 </Td> <Td> 287 </Td> </Tr> <Tr> <Th> 99 </Th> <Td> Rahul Dravid </Td> <Td> 164 </Td> <Td> 286 </Td> </Tr> <Tr> <Th> 96 </Th> <Td> Shivnarine Chanderpaul </Td> <Td> 164 </Td> <Td> 280 </Td> </Tr> <Tr> <Td colspan=\"4\"> <P> Last updated : 15 June 2016 </P> </Td> </Tr> </Table>\n<P> Chandan Shetty emerged as the winner of this season on 28. January. 2018 with Karthik being the runner up . Other finalists Niveditha , Diwakar , Shruti were eliminated </P>\n<P> Arthur Chung ( January 10 , 1918 -- June 23 , 2008 ) was the first President of Guyana from 1970 to 1980 . During his time as President of Guyana , the office was that of a ceremonial head of state , with real power in the hands of Prime Minister Forbes Burnham . He was honoured with Guyana 's highest national honour , the Order of Excellence ( O.E. ) . </P>\n<Tr> <Td colspan=\"2\"> Incumbent Achal Kumar Jyoti since 6 July 2017 </Td> </Tr>\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nUPDATE CONTEXT. The current context does not provide information related to the question.\n\n--------------------------------------------------------------------------------\nUpdating context and resetting conversation.\nAdding doc_id doc_1122 to context.\nAdding doc_id doc_2398 to context.\nAdding doc_id doc_309 to context.\nAdding doc_id doc_3891 to context.\nAdding doc_id doc_2087 to context.\nAdding doc_id doc_330 to context.\nAdding doc_id doc_4844 to context.\nragproxyagent (to assistant):\n\nYou're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the\ncontext provided by the user.\nIf you can't answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nYou must give as short an answer as possible.\n\nUser's question is: has been honoured with the wisden leading cricketer in the world award for 2016\n\nContext is: <Table> <Tr> <Th> No </Th> <Th> Name ( birth -- death ) </Th> <Th> Portrait </Th> <Th> Elected ( % votes ) </Th> <Th> Took office </Th> <Th> Left office </Th> <Th> Term ( in years ) </Th> <Th> Notes </Th> <Th> President ( s ) </Th> <Th colspan=\"2\"> Candidate of </Th> </Tr> <Tr> <Th> </Th> <Td> Sarvepalli Radhakrishnan ( 1888 -- 1975 ) </Td> <Td> </Td> <Td> 1952 ( Unopposed ) <P> 1957 ( Unopposed ) </P> </Td> <Td> 13 May 1952 </Td> <Td> 12 May 1962 </Td> <Td> 10 </Td> <Td> Radhakrishnan was a prominent scholar . Besides being awarded the Bharat Ratna he also held the position of vice-chancellor in the Banaras Hindu University and the Andhra college . He served as the Vice-President for two terms . </Td> <Td> Rajendra Prasad </Td> <Td> </Td> <Td> Independent </Td> </Tr> <Tr> <Th> </Th> <Td> Zakir Husain ( 1897 -- 1969 ) </Td> <Td> -- </Td> <Td> 1962 ( 97.59 ) </Td> <Td> 13 May 1962 </Td> <Td> 12 May 1967 </Td> <Td> 5 </Td> <Td> </Td> <Td> Sarvepalli Radhakrishnan </Td> <Td> </Td> <Td> Independent </Td> </Tr> <Tr> <Th> </Th> <Td> Varahagiri Venkata Giri ( 1894 -- 1980 ) </Td> <Td> -- </Td> <Td> 1967 ( 71.45 ) </Td> <Td> 13 May 1967 </Td> <Td> 3 May 1969 </Td> <Td> </Td> <Td> </Td> <Td> Zakir Husain </Td> <Td> </Td> <Td> Independent </Td> </Tr> <Tr> <Th> </Th> <Td> Gopal Swarup Pathak ( 1896 -- 1982 ) </Td> <Td> -- </Td> <Td> 1969 -- </Td> <Td> 31 August 1969 </Td> <Td> 30 August 1974 </Td> <Td> 5 </Td> <Td> </Td> <Td> Varahagiri Venkata Giri ( 1969 -- 1974 ) <P> Fakhruddin Ali Ahmed ( 1974 ) </P> </Td> <Td> </Td> <Td> Independent </Td> </Tr> <Tr> <Th> 5 </Th> <Td> Basappa Danappa Jatti ( 1912 -- 2002 ) </Td> <Td> -- </Td> <Td> ( 78.70 ) </Td> <Td> 31 August 1974 </Td> <Td> 30 August 1979 </Td> <Td> 5 </Td> <Td> </Td> <Td> Fakhruddin Ali Ahmed ( 1974 -- 1977 ) Neelam Sanjiva Reddy ( 1977 -- 1979 ) </Td> <Td> </Td> <Td> Indian National Congress </Td> </Tr> <Tr> <Th> 6 </Th> <Td> Mohammad Hidayatullah ( 1905 -- 1992 ) </Td> <Td> -- </Td> <Td> 1979 ( Unopposed ) </Td> <Td> 31 August 1979 </Td> <Td> 30 August 1984 </Td> <Td> 5 </Td> <Td> </Td> <Td> Neelam Sanjiva Reddy ( 1979 -- 1982 ) Giani Zail Singh ( 1982 -- 1984 ) </Td> <Td> </Td> <Td> Independent </Td> </Tr> <Tr> <Th> 7 </Th> <Td> Ramaswamy Venkataraman ( 1910 -- 2009 ) </Td> <Td> </Td> <Td> 1984 ( 71.05 ) </Td> <Td> 31 August 1984 </Td> <Td> 24 July 1987 </Td> <Td> </Td> <Td> </Td> <Td> Giani Zail Singh </Td> <Td> </Td> <Td> Indian National Congress </Td> </Tr> <Tr> <Th> 8 </Th> <Td> Shankar Dayal Sharma ( 1918 -- 1999 ) </Td> <Td> </Td> <Td> ( Unopposed ) </Td> <Td> 3 September 1987 </Td> <Td> 24 July 1992 </Td> <Td> 5 </Td> <Td> </Td> <Td> Ramaswamy Venkataraman </Td> <Td> </Td> <Td> Indian National Congress </Td> </Tr> <Tr> <Th> 9 </Th> <Td> Kocheril Raman Narayanan ( 1920 -- 2005 ) </Td> <Td> </Td> <Td> 1992 ( 99.86 ) </Td> <Td> 21 August 1992 </Td> <Td> 24 July 1997 </Td> <Td> 5 </Td> <Td> </Td> <Td> Shankar Dayal Sharma </Td> <Td> </Td> <Td> Indian National Congress </Td> </Tr> <Tr> <Th> 10 </Th> <Td> Krishan Kant ( 1927 -- 2002 ) </Td> <Td> -- </Td> <Td> 1997 ( 61.76 ) </Td> <Td> 21 August 1997 </Td> <Td> 27 July 2002 </Td> <Td> </Td> <Td> </Td> <Td> Kocheril Raman Narayanan ( 1997 -- 2002 ) A.P.J. Abdul Kalam ( 2002 ) </Td> <Td> </Td> <Td> Janata Dal </Td> </Tr> <Tr> <Th> 11 </Th> <Td> Bhairon Singh Shekhawat ( 1923 -- 2010 ) </Td> <Td> </Td> <Td> 2002 ( 59.82 ) </Td> <Td> 19 August 2002 </Td> <Td> 21 July 2007 </Td> <Td> 5 </Td> <Td> </Td> <Td> A.P.J. Abdul Kalam </Td> <Td> </Td> <Td> Bharatiya Janata Party </Td> </Tr> <Tr> <Th> 12 </Th> <Td> Mohammad Hamid Ansari ( 1937 -- ) </Td> <Td> </Td> <Td> 2007 ( 60.51 ) 2012 ( 67.31 ) </Td> <Td> 11 August 2007 </Td> <Td> 11 August 2017 </Td> <Td> 10 </Td> <Td> </Td> <Td> Pratibha Patil ( 2007 -- 2012 ) Pranab Mukherjee ( 2012 -- 2017 ) Ram Nath Kovind ( 2017 ) </Td> <Td> </Td> <Td> Indian National Congress </Td> </Tr> <Tr> <Th> 13 </Th> <Td> Muppavarapu Venkaiah Naidu ( 1949 -- ) </Td> <Td> </Td> <Td> 2017 ( 67.89 ) </Td> <Td> 11 August 2017 </Td> <Td> Incumbent </Td> <Td> -- </Td> <Td> </Td> <Td> Ram Nath Kovind </Td> <Td> </Td> <Td> Bharatiya Janata Party </Td> </Tr> </Table>\n<Table> <Tr> <Th colspan=\"2\"> Governor of Maharashtra </Th> </Tr> <Tr> <Td colspan=\"2\"> Incumbent Chennamaneni Vidyasagar Rao since 30 August 2014 </Td> </Tr> <Tr> <Th> Style </Th> <Td> His Excellency </Td> </Tr> <Tr> <Th> Residence </Th> <Td> Main : Raj Bhavan ( Mumbai ) Additional : Raj Bhavan ( Nagpur ) ; Raj Bhavan ( Pune ) & Raj Bhavan ( Mahabaleshwar ) </Td> </Tr> <Tr> <Th> Appointer </Th> <Td> President of India </Td> </Tr> <Tr> <Th> Term length </Th> <Td> Five Years </Td> </Tr> <Tr> <Th> Inaugural holder </Th> <Td> John Colville , PC , GCIE </Td> </Tr> <Tr> <Th> Formation </Th> <Td> 15 August 1947 ; 70 years ago ( 1947 - 08 - 15 ) </Td> </Tr> </Table>\n<P> Every player who has won this award and has been eligible for the Naismith Memorial Basketball Hall of Fame has been inducted . Kareem Abdul - Jabbar won the award a record six times . Both Bill Russell and Michael Jordan won the award five times , while Wilt Chamberlain and LeBron James won the award four times . Russell and James are the only players to have won the award four times in five seasons . Moses Malone , Larry Bird and Magic Johnson each won the award three times , while Bob Pettit , Karl Malone , Tim Duncan , Steve Nash and Stephen Curry have each won it twice . Only two rookies have won the award : Wilt Chamberlain in the 1959 -- 60 season and Wes Unseld in the 1968 -- 69 season . Hakeem Olajuwon of Nigeria , Tim Duncan of the U.S. Virgin Islands , Steve Nash of Canada and Dirk Nowitzki of Germany are the only MVP winners considered `` international players '' by the NBA . </P>\n<P> The Jawaharlal Nehru Centre for Advanced Scientific Research ( JNCASR ) is a multidisciplinary research institute located at Jakkur , Bangalore , India . It was established by the Department of Science and Technology of the Government of India , to mark the birth centenary of Pandit Jawaharlal Nehru . </P>\n<P> Ajay Tyagi was appointed chairman on 10 January 2017 replacing UK Sinha . And took charge of chairman office on 1 March 2017 . The Board comprises </P>\n<Table> <Tr> <Th> Year </Th> <Th> Player </Th> <Th> Country </Th> </Tr> <Tr> <Td> 2003 </Td> <Th> Ponting , Ricky Ricky Ponting </Th> <Td> Australia </Td> </Tr> <Tr> <Td> </Td> <Th> Warne , Shane Shane Warne </Th> <Td> Australia </Td> </Tr> <Tr> <Td> 2005 </Td> <Th> Flintoff , Andrew Andrew Flintoff </Th> <Td> England </Td> </Tr> <Tr> <Td> 2006 </Td> <Th> Muralitharan , Muttiah Muttiah Muralitharan </Th> <Td> Sri Lanka </Td> </Tr> <Tr> <Td> 2007 </Td> <Th> Kallis , Jacques Jacques Kallis </Th> <Td> South Africa </Td> </Tr> <Tr> <Td> 2008 </Td> <Th> Sehwag , Virender Virender Sehwag </Th> <Td> India </Td> </Tr> <Tr> <Td> 2009 </Td> <Th> Sehwag , Virender Virender Sehwag </Th> <Td> India </Td> </Tr> <Tr> <Td> </Td> <Th> Tendulkar , Sachin Sachin Tendulkar </Th> <Td> India </Td> </Tr> <Tr> <Td> 2011 </Td> <Th> Sangakkara , Kumar Kumar Sangakkara </Th> <Td> Sri Lanka </Td> </Tr> <Tr> <Td> 2012 </Td> <Th> Clarke , Michael Michael Clarke </Th> <Td> Australia </Td> </Tr> <Tr> <Td> 2013 </Td> <Th> Steyn , Dale Dale Steyn </Th> <Td> South Africa </Td> </Tr> <Tr> <Td> 2014 </Td> <Th> Sangakkara , Kumar Kumar Sangakkara </Th> <Td> Sri Lanka </Td> </Tr> <Tr> <Td> 2015 </Td> <Th> Williamson , Kane Kane Williamson </Th> <Td> New Zealand </Td> </Tr> <Tr> <Td> 2016 </Td> <Th> Kohli , Virat Virat Kohli </Th> <Td> India </Td> </Tr> <Tr> <Td> 2017 </Td> <Th> Kohli , Virat Virat Kohli </Th> <Td> India </Td> </Tr> </Table>\n<P> Mankombu Sambasivan Swaminathan ( born 7 August 1925 ) is an Indian geneticist and international administrator , renowned for his leading role in India 's Green Revolution a program under which high - yield varieties of wheat and rice seedlings were planted in the fields of poor farmers . Swaminathan is known as `` Indian Father of Green Revolution '' for his leadership and success in introducing and further developing high - yielding varieties of wheat in India . He is the founder and chairman of the MS Swaminathan Research Foundation . His stated vision is to rid the world of hunger and poverty . Swaminathan is an advocate of moving India to sustainable development , especially using environmentally sustainable agriculture , sustainable food security and the preservation of biodiversity , which he calls an `` evergreen revolution . '' </P>\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nI'm sorry, the provided context doesn't contain information about any cricketer being honored with the Wisden Leading Cricketer in the World award for 2016. UPDATE CONTEXT if you have any other query.\n\n--------------------------------------------------------------------------------\n\n\n>>>>>>>>>>>>  Below are outputs of Case 5  <<<<<<<<<<<<\n\n\ndoc_ids:  [['doc_20', 'doc_2943', 'doc_2059', 'doc_3293', 'doc_4056', 'doc_1914', 'doc_2749', 'doc_1796', 'doc_3468', 'doc_1793', 'doc_876', 'doc_2577', 'doc_27', 'doc_366', 'doc_321', 'doc_3103', 'doc_715', 'doc_3534', 'doc_142', 'doc_5337', 'doc_2426', 'doc_5346', 'doc_3021', 'doc_1596', 'doc_316', 'doc_1103', 'doc_1602', 'doc_1677', 'doc_1670', 'doc_2853']]\nAdding doc_id doc_20 to context.\nAdding doc_id doc_2943 to context.\nAdding doc_id doc_2059 to context.\nAdding doc_id doc_3293 to context.\nAdding doc_id doc_4056 to context.\nAdding doc_id doc_1914 to context.\nAdding doc_id doc_2749 to context.\nAdding doc_id doc_1796 to context.\nAdding doc_id doc_3468 to context.\nAdding doc_id doc_1793 to context.\nAdding doc_id doc_876 to context.\nAdding doc_id doc_2577 to context.\nAdding doc_id doc_27 to context.\nragproxyagent (to assistant):\n\nYou're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the\ncontext provided by the user.\nIf you can't answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nYou must give as short an answer as possible.\n\nUser's question is: who carried the usa flag in opening ceremony\n\nContext is: <P> On January 17 , 1899 , under orders from President William McKinley , Commander Edward D. Taussig of USS Bennington landed on Wake and formally took possession of the island for the United States . After a 21 - gun salute , the flag was raised and a brass plate was affixed to the flagstaff with the following inscription : </P>\n<Li> 1960 Flag with 50 stars ( Hawaii ) </Li>\n<P> The flag of the United States of America , often referred to as the American flag , is the national flag of the United States . It consists of thirteen equal horizontal stripes of red ( top and bottom ) alternating with white , with a blue rectangle in the canton ( referred to specifically as the `` union '' ) bearing fifty small , white , five - pointed stars arranged in nine offset horizontal rows , where rows of six stars ( top and bottom ) alternate with rows of five stars . The 50 stars on the flag represent the 50 states of the United States of America , and the 13 stripes represent the thirteen British colonies that declared independence from the Kingdom of Great Britain , and became the first states in the U.S. Nicknames for the flag include The Stars and Stripes , Old Glory , and The Star - Spangled Banner . </P>\n<P> The Pledge of Allegiance of the United States is an expression of allegiance to the Flag of the United States and the republic of the United States of America . It was originally composed by Captain George Thatcher Balch , a Union Army Officer during the Civil War and later a teacher of patriotism in New York City schools . The form of the pledge used today was largely devised by Francis Bellamy in 1892 , and formally adopted by Congress as the pledge in 1942 . The official name of The Pledge of Allegiance was adopted in 1945 . The most recent alteration of its wording came on Flag Day in 1954 , when the words `` under God '' were added . </P>\n<P> In modern times , the U.S. military plays ( or sounds ) `` Reveille '' in the morning , generally near sunrise , though its exact time varies from base to base . On U.S. Army posts and Air Force bases , `` Reveille '' is played by itself or followed by the bugle call `` To the Colors '' at which time the national flag is raised and all U.S. military personnel outdoors are required to come to attention and present a salute in uniform , either to the flag or in the direction of the music if the flag is not visible . While in formation , soldiers are brought to the position of parade rest while `` Reveille '' plays then called to attention and present arms as the national flag is raised . On board U.S. Navy , Marine Corps , and Coast Guard facilities , the flag is generally raised at 0800 ( 8 am ) while `` The Star Spangled Banner '' or the bugle call `` To the Colors '' is played . On some U.S. military bases , `` Reveille '' is accompanied by a cannon shot . </P>\n<P> When the National Anthem was first recognized by law in 1932 , there was no prescription as to behavior during its playing . On June 22 , 1942 , the law was revised indicating that those in uniform should salute during its playing , while others should simply stand at attention , men removing their hats . ( The same code also required that women should place their hands over their hearts when the flag is displayed during the playing of the Anthem , but not if the flag was not present . ) On December 23 , 1942 the law was again revised instructing men and women to stand at attention and face in the direction of the music when it was played . That revision also directed men and women to place their hands over their hearts only if the flag was displayed . Those in uniform were required to salute . On July 7 , 1976 , the law was simplified . Men and women were instructed to stand with their hands over their hearts , men removing their hats , irrespective of whether or not the flag was displayed and those in uniform saluting . On August 12 , 1998 , the law was rewritten keeping the same instructions , but differentiating between `` those in uniform '' and `` members of the Armed Forces and veterans '' who were both instructed to salute during the playing whether or not the flag was displayed . Because of the changes in law over the years and confusion between instructions for the Pledge of Allegence versus the National Anthem , throughout most of the 20th century many people simply stood at attention or with their hands folded in front of them during the playing of the Anthem , and when reciting the Pledge they would hold their hand ( or hat ) over their heart . After 9 / 11 , the custom of placing the hand over the heart during the playing of the Anthem became nearly universal . </P>\n<P> A flag designed by John McConnell in 1969 for the first Earth Day is a dark blue field charged with The Blue Marble , a famous NASA photo of the Earth as seen from outer space . The first edition of McConnell 's flag used screen - printing and used different colors : ocean and land were blue and the clouds were white . McConnell presented his flag to the United Nations as a symbol for consideration . </P>\n<P> The torch - bearing arm was displayed at the Centennial Exposition in Philadelphia in 1876 , and in Madison Square Park in Manhattan from 1876 to 1882 . Fundraising proved difficult , especially for the Americans , and by 1885 work on the pedestal was threatened by lack of funds . Publisher Joseph Pulitzer , of the New York World , started a drive for donations to finish the project and attracted more than 120,000 contributors , most of whom gave less than a dollar . The statue was built in France , shipped overseas in crates , and assembled on the completed pedestal on what was then called Bedloe 's Island . The statue 's completion was marked by New York 's first ticker - tape parade and a dedication ceremony presided over by President Grover Cleveland . </P>\n<P> The horizontal stripes on the flag represent the nine original departments of Uruguay , based on the U.S flag , where the stripes represent the original 13 colonies . The first flag designed in 1828 had 9 light blue stripes ; this number was reduced to 4 in 1830 due to visibility problems from distance . The Sun of May represents the May Revolution of 1810 ; according to the historian Diego Abad de Santill\xe1n , the Sun of May is a figurative sun that represents Inti , the sun god of the Inca religion . It also appears in the Flag of Argentina and the Coat of Arms of Bolivia . </P>\n<P> The anthem has been recorded and performed in many different languages , usually as a result of the hosting of either form of the Games in various countries . The IOC does n't require that the anthem be performed in either English or Greek . But in the 2008 Olympic opening and closing ceremonies in Beijing , China , Greek was sung instead of the host country 's official language , Mandarin . Also in the 2016 Olympic opening ceremonies in Rio de Janeiro , Brazil , English was also sung instead of host country 's official language , Portuguese . </P>\n<P> The United States Oath of Allegiance , officially referred to as the `` Oath of Allegiance , '' 8 C.F.R. Part 337 ( 2008 ) , is an allegiance oath that must be taken by all immigrants who wish to become United States citizens . </P>\n<P> During the first half of the 19th century , seven stars were added to the flag to represent the seven signatories to the Venezuelan declaration of independence , being the provinces of Caracas , Cuman\xe1 , Barcelona , Barinas , Margarita , M\xe9rida , and Trujillo . </P>\n<P> With the annexation of Hawaii in 1898 and the seizure of Guam and the Philippines during the Spanish -- American War that same year , the United States began to consider unclaimed and uninhabited Wake Island , located approximately halfway between Honolulu and Manila , as a good location for a telegraph cable station and coaling station for refueling warships of the rapidly expanding United States Navy and passing merchant and passenger steamships . On July 4 , 1898 , United States Army Brigadier General Francis V. Greene of the 2nd Brigade , Philippine Expeditionary Force , of the Eighth Army Corps , stopped at Wake Island and raised the American flag while en route to the Philippines on the steamship liner SS China . </P>\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nI don't have the answer with the provided context. UPDATE CONTEXT.\n\n--------------------------------------------------------------------------------\nUpdating context and resetting conversation.\nAdding doc_id doc_366 to context.\nragproxyagent (to assistant):\n\nYou're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the\ncontext provided by the user.\nIf you can't answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nYou must give as short an answer as possible.\n\nUser's question is: who carried the usa flag in opening ceremony\n\nContext is: <Table> <Tr> <Th> # </Th> <Th> Event year </Th> <Th> Season </Th> <Th> Ceremony </Th> <Th> Flag bearer </Th> <Th> Sex </Th> <Th> State / Country </Th> <Th> Sport </Th> </Tr> <Tr> <Td> 62 </Td> <Td> 2018 </Td> <Td> Winter </Td> <Td> Closing </Td> <Td> Diggins , Jessica Jessica Diggins </Td> <Td> </Td> <Td> Minnesota </Td> <Td> Cross-country skiing </Td> </Tr> <Tr> <Td> 61 </Td> <Td> 2018 </Td> <Td> Winter </Td> <Td> Opening </Td> <Td> Hamlin , Erin Erin Hamlin </Td> <Td> </Td> <Td> New York </Td> <Td> Luge </Td> </Tr> <Tr> <Td> 60 </Td> <Td> 2016 </Td> <Td> Summer </Td> <Td> Closing </Td> <Td> Biles , Simone Simone Biles </Td> <Td> </Td> <Td> Texas </Td> <Td> Gymnastics </Td> </Tr> <Tr> <Td> 59 </Td> <Td> 2016 </Td> <Td> Summer </Td> <Td> Opening </Td> <Td> Phelps , Michael Michael Phelps </Td> <Td> </Td> <Td> Maryland </Td> <Td> Swimming </Td> </Tr> <Tr> <Td> 58 </Td> <Td> 2014 </Td> <Td> Winter </Td> <Td> Closing </Td> <Td> Chu , Julie Julie Chu </Td> <Td> </Td> <Td> Connecticut </Td> <Td> Hockey </Td> </Tr> <Tr> <Td> 57 </Td> <Td> 2014 </Td> <Td> Winter </Td> <Td> Opening </Td> <Td> Lodwick , Todd Todd Lodwick </Td> <Td> </Td> <Td> Colorado </Td> <Td> Nordic combined </Td> </Tr> <Tr> <Td> 56 </Td> <Td> 2012 </Td> <Td> Summer </Td> <Td> Closing </Td> <Td> Nellum , Bryshon Bryshon Nellum </Td> <Td> </Td> <Td> California </Td> <Td> Athletics </Td> </Tr> <Tr> <Td> 55 </Td> <Td> 2012 </Td> <Td> Summer </Td> <Td> Opening </Td> <Td> Zagunis , Mariel Mariel Zagunis </Td> <Td> </Td> <Td> Oregon </Td> <Td> Fencing </Td> </Tr> <Tr> <Td> 54 </Td> <Td> </Td> <Td> Winter </Td> <Td> Closing </Td> <Td> Demong , Bill Bill Demong </Td> <Td> </Td> <Td> New York </Td> <Td> Nordic combined </Td> </Tr> <Tr> <Td> 53 </Td> <Td> </Td> <Td> Winter </Td> <Td> Opening </Td> <Td> Grimmette , Mark Mark Grimmette </Td> <Td> </Td> <Td> Michigan </Td> <Td> Luge </Td> </Tr> <Tr> <Td> 52 </Td> <Td> 2008 </Td> <Td> Summer </Td> <Td> Closing </Td> <Td> Lorig , Khatuna Khatuna Lorig </Td> <Td> </Td> <Td> Georgia ( country ) </Td> <Td> Archery </Td> </Tr> <Tr> <Td> 51 </Td> <Td> 2008 </Td> <Td> Summer </Td> <Td> Opening </Td> <Td> Lomong , Lopez Lopez Lomong </Td> <Td> </Td> <Td> Sudan ( now South Sudan ) </Td> <Td> Athletics </Td> </Tr> <Tr> <Td> 50 </Td> <Td> 2006 </Td> <Td> Winter </Td> <Td> Closing </Td> <Td> Cheek , Joey Joey Cheek </Td> <Td> </Td> <Td> North Carolina </Td> <Td> Speed skating </Td> </Tr> <Tr> <Td> 49 </Td> <Td> 2006 </Td> <Td> Winter </Td> <Td> Opening </Td> <Td> Witty , Chris Chris Witty </Td> <Td> </Td> <Td> Wisconsin </Td> <Td> Speed skating </Td> </Tr> <Tr> <Td> 48 </Td> <Td> </Td> <Td> Summer </Td> <Td> Closing </Td> <Td> Hamm , Mia Mia Hamm </Td> <Td> </Td> <Td> Texas </Td> <Td> Women 's soccer </Td> </Tr> <Tr> <Td> 47 </Td> <Td> </Td> <Td> Summer </Td> <Td> Opening </Td> <Td> Staley , Dawn Dawn Staley </Td> <Td> </Td> <Td> Pennsylvania </Td> <Td> Basketball </Td> </Tr> <Tr> <Td> 46 </Td> <Td> 2002 </Td> <Td> Winter </Td> <Td> Closing </Td> <Td> Shimer , Brian Brian Shimer </Td> <Td> </Td> <Td> Florida </Td> <Td> Bobsleigh </Td> </Tr> <Tr> <Td> 45 </Td> <Td> 2002 </Td> <Td> Winter </Td> <Td> Opening </Td> <Td> Peterson , Amy Amy Peterson </Td> <Td> </Td> <Td> Minnesota </Td> <Td> Short track speed skating </Td> </Tr> <Tr> <Td> 44 </Td> <Td> 2000 </Td> <Td> Summer </Td> <Td> Closing </Td> <Td> Gardner , Rulon Rulon Gardner </Td> <Td> </Td> <Td> Wyoming </Td> <Td> Wrestling </Td> </Tr> <Tr> <Td> 43 </Td> <Td> 2000 </Td> <Td> Summer </Td> <Td> Opening </Td> <Td> Meidl , Cliff Cliff Meidl </Td> <Td> </Td> <Td> California </Td> <Td> Canoeing </Td> </Tr> <Tr> <Td> 42 </Td> <Td> 1998 </Td> <Td> Winter </Td> <Td> Closing </Td> <Td> Granato , Cammi Cammi Granato </Td> <Td> </Td> <Td> Illinois </Td> <Td> Hockey </Td> </Tr> <Tr> <Td> 41 </Td> <Td> 1998 </Td> <Td> Winter </Td> <Td> Opening </Td> <Td> Flaim , Eric Eric Flaim </Td> <Td> </Td> <Td> Massachusetts </Td> <Td> Speed skating </Td> </Tr> <Tr> <Td> 40 </Td> <Td> </Td> <Td> Summer </Td> <Td> Closing </Td> <Td> Matz , Michael Michael Matz </Td> <Td> </Td> <Td> Pennsylvania </Td> <Td> Equestrian </Td> </Tr> <Tr> <Td> 39 </Td> <Td> </Td> <Td> Summer </Td> <Td> Opening </Td> <Td> Baumgartner , Bruce Bruce Baumgartner </Td> <Td> </Td> <Td> New Jersey </Td> <Td> Wrestling </Td> </Tr> <Tr> <Td> 38 </Td> <Td> 1994 </Td> <Td> Winter </Td> <Td> Closing </Td> <Td> Jansen , Dan Dan Jansen </Td> <Td> </Td> <Td> Wisconsin </Td> <Td> Speed skating </Td> </Tr> <Tr> <Td> 37 </Td> <Td> 1994 </Td> <Td> Winter </Td> <Td> Opening </Td> <Td> Myler , Cammy Cammy Myler </Td> <Td> </Td> <Td> New York </Td>\n\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nErin Hamlin carried the USA flag in the opening ceremony.\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'max_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Film </Th> <Th> Year </Th> <Th> Fuck count </Th> <Th> Minutes </Th> <Th> Uses / mi ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Character </Th> <Th> Ultimate Avengers </Th> <Th> Ultimate Avengers 2 </Th> <Th> I ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Position </Th> <Th> Country </Th> <Th> Town / City </Th> <Th> PM2. 5 </Th> <Th> PM ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Rank </Th> <Th> Country ( or dependent territory ) </Th> <Th> Population </Th> <Th ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Rank </Th> <Th> State </Th> <Th> Gross collections ( in thousands ) </Th> <Th> Rev ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Date </Th> <Th> Province </Th> <Th> Mag . </Th> <Th> MMI </Th> <Th> Deaths </Th> < ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> City </Th> <Th> River </Th> <Th> State </Th> </Tr> <Tr> <Td> Gangakhed </Td> <Td>  ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Player </Th> <Th> Pos . </Th> <Th> Team </Th> <Th> Career start </Th> <Th> Career  ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> ABO and Rh blood type distribution by country ( population averages ) <Tr> <Th> Country </Th ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> </Th> <Th colspan="3"> Total area </Th> <Th colspan="4"> Land area </Th> <Th colsp ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> Performance in the European Cup and UEFA Champions League by club <Tr> <Th> <Ul> <Li> </Li>  ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Rank </Th> <Th> City </Th> <Th> State </Th> <Th> Land area ( sq mi ) </Th> <Th> La ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> # </Th> <Th> Country </Th> <Th> Name </Th> <Th> International goals </Th> <Th> Cap ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Rank </Th> <Th> City </Th> <Th> Image </Th> <Th> Population </Th> <Th> Definition  ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Rank </Th> <Th> Team </Th> <Th> Won </Th> <Th> Lost </Th> <Th> Tied </Th> <Th> Pct ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Territory </Th> <Th> Rights holder </Th> <Th> Ref </Th> </Tr> <Tr> <Td> Asia </Td> ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> ( hide ) Rank </Th> <Th> Nat </Th> <Th> Name </Th> <Th> Years </Th> <Th> Goals </T ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> </Th> <Th colspan="3"> Total area </Th> <Th colspan="4"> Land area </Th> <Th colsp ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th colspan="2"> Bids by school </Th> <Th colspan="2"> Most recent </Th> <Th colspan="2 ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Rank </Th> <Th> Name </Th> <Th> Nation </Th> <Th> TP </Th> <Th colspan="2"> SP </T ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> 2014 Rank </Th> <Th> City </Th> <Th> 2014 Estimate </Th> <Th> 2010 Census </Th> <T ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> S.No . </Th> <Th> Year </Th> <Th> Name </Th> </Tr> <Tr> <Td> </Td> <Td> 1961 </Td> ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> Densities of various materials covering a range of values <Tr> <Th> Material </Th> <Th> \u03c1 (  ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Club </Th> <Th> Season </Th> <Th colspan="3"> League </Th> <Th colspan="2"> Nation ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Rank ( 2016 ) </Th> <Th> Airports ( large hubs ) </Th> <Th> IATA Code </Th> <Th> M ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> City </Th> <Th> Region / State </Th> <Th> Country </Th> <Th> Park name </Th> <Th>  ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Year </Th> <Th> Winner ( nationally ) </Th> <Th> Votes </Th> <Th> Percent </Th> <T ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Compound </Th> <Th> SERT </Th> <Th> NET </Th> <Th> DAT </Th> <Th> 5 - HT </Th> <Th ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Rank </Th> <Th> Name </Th> <Th> Industry </Th> <Th> Revenue ( USD millions ) </Th> ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Rank </Th> <Th> Name </Th> <Th> Name in Georgian </Th> <Th> Population 1989 </Th>  ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Country </Th> <Th colspan="2"> The World Factbook </Th> <Th colspan="2"> World Res ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Rank </Th> <Th> Country </Th> <Th> Area ( km2 ) </Th> <Th> Notes </Th> </Tr> <Tr>  ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Rank </Th> <Th> Country </Th> <Th> Area ( km2 ) </Th> <Th> Notes </Th> </Tr> <Tr>  ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Date </Th> <Th> State ( s ) </Th> <Th> Magnitude </Th> <Th> Fatalities </Th> <Th>  ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Artist </Th> <Th> # Gold </Th> <Th> # Platinum </Th> <Th> # Multi-Platinum </Th> < ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> </Th> <Th colspan="2"> Name </Th> <Th> Number of locations </Th> <Th> Revenue </Th ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> </Th> <Th> Name </Th> <Th> Country </Th> <Th> Region </Th> <Th> Depth ( meters ) < ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> Rank </Th> <Th> Player ( 2017 HRs ) </Th> <Th> HR </Th> </Tr> <Tr> <Td> </Td> <Td> ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    <Table> <Tr> <Th> No . </Th> <Th> Athlete </Th> <Th> Nation </Th> <Th> Sport </Th> <Th> Years </Th>  ...\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In this example, questions were directly selected from the dataset.\nRetrieveChat was able to answer the questions correctly in the first\nattempt as the retrieved context contained the necessary information in\nthe first two cases. However, in the last three cases, the context with\nthe highest similarity to the question embedding did not contain the\nrequired information to answer the question. As a result, the LLM model\nresponded with ",(0,a.jsx)(n.code,{children:"UPDATE CONTEXT"}),". With the unique and innovative ability\nto update context in RetrieveChat, the agent automatically updated the\ncontext and sent it to the LLM model again. After several rounds of this\nprocess, the agent was able to generate the correct answer to the\nquestions."]}),"\n",(0,a.jsx)(n.h3,{id:"example-6",children:"Example 6"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"#table-of-contents",children:"Back to top"})}),"\n",(0,a.jsxs)(n.p,{children:["Use RetrieveChat to answer multi-hop questions for\n",(0,a.jsx)(n.a,{href:"https://github.com/Alab-NII/2wikimultihop",children:"2WikiMultihopQA"})," dataset\nwith customized prompt and few-shot learning."]}),"\n",(0,a.jsxs)(n.p,{children:["First, we will create a new document collection which includes all the\ncontextual corpus. Then, we will choose some questions and utilize\nRetrieveChat to answer them. For this particular example, we will be\nusing the ",(0,a.jsx)(n.code,{children:"gpt-3.5-turbo"})," model, and we will demonstrate RetrieveChat\u2019s\nfeature of automatically updating context in case the documents\nretrieved do not contain sufficient information. Moreover, we\u2019ll\ndemonstrate how to use customized prompt and few-shot learning to\naddress tasks that are not pre-defined in RetrieveChat."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"PROMPT_MULTIHOP = \"\"\"You're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the context provided by the user. You must think step-by-step.\nFirst, please learn the following examples of context and question pairs and their corresponding answers.\n\nContext:\nKurram Garhi: Kurram Garhi is a small village located near the city of Bannu, which is the part of Khyber Pakhtunkhwa province of Pakistan. Its population is approximately 35000.\nTrojkrsti: Trojkrsti is a village in Municipality of Prilep, Republic of Macedonia.\nQ: Are both Kurram Garhi and Trojkrsti located in the same country?\nA: Kurram Garhi is located in the country of Pakistan. Trojkrsti is located in the country of Republic of Macedonia. Thus, they are not in the same country. So the answer is: no.\n\n\nContext:\nEarly Side of Later: Early Side of Later is the third studio album by English singer- songwriter Matt Goss. It was released on 21 June 2004 by Concept Music and reached No. 78 on the UK Albums Chart.\nWhat's Inside: What's Inside is the fourteenth studio album by British singer- songwriter Joan Armatrading.\nQ: Which album was released earlier, What'S Inside or Cassandra'S Dream (Album)?\nA: What's Inside was released in the year 1995. Cassandra's Dream (album) was released in the year 2008. Thus, of the two, the album to release earlier is What's Inside. So the answer is: What's Inside.\n\n\nContext:\nMaria Alexandrovna (Marie of Hesse): Maria Alexandrovna , born Princess Marie of Hesse and by Rhine (8 August 1824 \u2013 3 June 1880) was Empress of Russia as the first wife of Emperor Alexander II.\nGrand Duke Alexei Alexandrovich of Russia: Grand Duke Alexei Alexandrovich of Russia,(Russian: \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447; 14 January 1850 (2 January O.S.) in St. Petersburg \u2013 14 November 1908 in Paris) was the fifth child and the fourth son of Alexander II of Russia and his first wife Maria Alexandrovna (Marie of Hesse).\nQ: What is the cause of death of Grand Duke Alexei Alexandrovich Of Russia's mother?\nA: The mother of Grand Duke Alexei Alexandrovich of Russia is Maria Alexandrovna. Maria Alexandrovna died from tuberculosis. So the answer is: tuberculosis.\n\n\nContext:\nLaughter in Hell: Laughter in Hell is a 1933 American Pre-Code drama film directed by Edward L. Cahn and starring Pat O'Brien. The film's title was typical of the sensationalistic titles of many Pre-Code films.\nEdward L. Cahn: Edward L. Cahn (February 12, 1899 \u2013 August 25, 1963) was an American film director.\nQ: When did the director of film Laughter In Hell die?\nA: The film Laughter In Hell was directed by Edward L. Cahn. Edward L. Cahn died on August 25, 1963. So the answer is: August 25, 1963.\n\nSecond, please complete the answer by thinking step-by-step.\n\nContext:\n{input_context}\nQ: {input_question}\nA:\n\"\"\"\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# create the RetrieveUserProxyAgent instance named "ragproxyagent"\ncorpus_file = "https://huggingface.co/datasets/thinkall/2WikiMultihopQA/resolve/main/corpus.txt"\n\n# Create a new collection for NaturalQuestions dataset\nragproxyagent = RetrieveUserProxyAgent(\n    name="ragproxyagent",\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=3,\n    retrieve_config={\n        "task": "qa",\n        "docs_path": corpus_file,\n        "chunk_token_size": 2000,\n        "model": config_list[0]["model"],\n        "client": chromadb.PersistentClient(path="/tmp/chromadb"),\n        "collection_name": "2wikimultihopqa",\n        "chunk_mode": "one_line",\n        "embedding_model": "all-MiniLM-L6-v2",\n        "customized_prompt": PROMPT_MULTIHOP,\n        "customized_answer_prefix": "the answer is",\n    },\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# queries_file = "https://huggingface.co/datasets/thinkall/2WikiMultihopQA/resolve/main/queries.jsonl"\nqueries = """{"_id": "61a46987092f11ebbdaeac1f6bf848b6", "text": "Which film came out first, Blind Shaft or The Mask Of Fu Manchu?", "metadata": {"answer": ["The Mask Of Fu Manchu"]}}\n{"_id": "a7b9672009c311ebbdb0ac1f6bf848b6", "text": "Are North Marion High School (Oregon) and Seoul High School both located in the same country?", "metadata": {"answer": ["no"]}}\n"""\nqueries = [json.loads(line) for line in queries.split("\\n") if line]\nquestions = [q["text"] for q in queries]\nanswers = [q["metadata"]["answer"] for q in queries]\nprint(questions)\nprint(answers)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"['Which film came out first, Blind Shaft or The Mask Of Fu Manchu?', 'Are North Marion High School (Oregon) and Seoul High School both located in the same country?']\n[['The Mask Of Fu Manchu'], ['no']]\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'for i in range(len(questions)):\n    print(f"\\n\\n>>>>>>>>>>>>  Below are outputs of Case {i+1}  <<<<<<<<<<<<\\n\\n")\n\n    # reset the assistant. Always reset the assistant before starting a new conversation.\n    assistant.reset()\n\n    qa_problem = questions[i]\n    ragproxyagent.initiate_chat(assistant, problem=qa_problem, n_results=10)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n\n>>>>>>>>>>>>  Below are outputs of Case 1  <<<<<<<<<<<<\n\n\nTrying to create collection.\ndoc_ids:  [['doc_12', 'doc_11', 'doc_16', 'doc_19', 'doc_13116', 'doc_14', 'doc_13', 'doc_18', 'doc_977', 'doc_10']]\nAdding doc_id doc_12 to context.\nAdding doc_id doc_11 to context.\nAdding doc_id doc_16 to context.\nAdding doc_id doc_19 to context.\nAdding doc_id doc_13116 to context.\nAdding doc_id doc_14 to context.\nAdding doc_id doc_13 to context.\nAdding doc_id doc_18 to context.\nAdding doc_id doc_977 to context.\nAdding doc_id doc_10 to context.\nragproxyagent (to assistant):\n\nYou're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the context provided by the user. You must think step-by-step.\nFirst, please learn the following examples of context and question pairs and their corresponding answers.\n\nContext:\nKurram Garhi: Kurram Garhi is a small village located near the city of Bannu, which is the part of Khyber Pakhtunkhwa province of Pakistan. Its population is approximately 35000.\nTrojkrsti: Trojkrsti is a village in Municipality of Prilep, Republic of Macedonia.\nQ: Are both Kurram Garhi and Trojkrsti located in the same country?\nA: Kurram Garhi is located in the country of Pakistan. Trojkrsti is located in the country of Republic of Macedonia. Thus, they are not in the same country. So the answer is: no.\n\n\nContext:\nEarly Side of Later: Early Side of Later is the third studio album by English singer- songwriter Matt Goss. It was released on 21 June 2004 by Concept Music and reached No. 78 on the UK Albums Chart.\nWhat's Inside: What's Inside is the fourteenth studio album by British singer- songwriter Joan Armatrading.\nQ: Which album was released earlier, What'S Inside or Cassandra'S Dream (Album)?\nA: What's Inside was released in the year 1995. Cassandra's Dream (album) was released in the year 2008. Thus, of the two, the album to release earlier is What's Inside. So the answer is: What's Inside.\n\n\nContext:\nMaria Alexandrovna (Marie of Hesse): Maria Alexandrovna , born Princess Marie of Hesse and by Rhine (8 August 1824 \u2013 3 June 1880) was Empress of Russia as the first wife of Emperor Alexander II.\nGrand Duke Alexei Alexandrovich of Russia: Grand Duke Alexei Alexandrovich of Russia,(Russian: \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447; 14 January 1850 (2 January O.S.) in St. Petersburg \u2013 14 November 1908 in Paris) was the fifth child and the fourth son of Alexander II of Russia and his first wife Maria Alexandrovna (Marie of Hesse).\nQ: What is the cause of death of Grand Duke Alexei Alexandrovich Of Russia's mother?\nA: The mother of Grand Duke Alexei Alexandrovich of Russia is Maria Alexandrovna. Maria Alexandrovna died from tuberculosis. So the answer is: tuberculosis.\n\n\nContext:\nLaughter in Hell: Laughter in Hell is a 1933 American Pre-Code drama film directed by Edward L. Cahn and starring Pat O'Brien. The film's title was typical of the sensationalistic titles of many Pre-Code films.\nEdward L. Cahn: Edward L. Cahn (February 12, 1899 \u2013 August 25, 1963) was an American film director.\nQ: When did the director of film Laughter In Hell die?\nA: The film Laughter In Hell was directed by Edward L. Cahn. Edward L. Cahn died on August 25, 1963. So the answer is: August 25, 1963.\n\nSecond, please complete the answer by thinking step-by-step.\n\nContext:\nThe Mask of Fu Manchu: The Mask of Fu Manchu is a 1932 pre-Code adventure film directed by Charles Brabin. It was written by Irene Kuhn, Edgar Allan Woolf and John Willard based on the 1932 novel of the same name by Sax Rohmer. Starring Boris Karloff as Fu Manchu, and featuring Myrna Loy as his depraved daughter, the movie revolves around Fu Manchu's quest for the golden sword and mask of Genghis Khan. Lewis Stone plays his nemesis. Dr. Petrie is absent from this film.\nThe Mysterious Dr. Fu Manchu: The Mysterious Dr. Fu Manchu is a 1929 American pre-Code drama film directed by Rowland V. Lee and starring Warner Oland as Dr. Fu Manchu. It was the first Fu Manchu film of the talkie era. Since this was during the transition period to sound, a silent version was also released in the United States.\nThe Face of Fu Manchu: The Face of Fu Manchu is a 1965 thriller film directed by Don Sharp and based on the characters created by Sax Rohmer. It stars Christopher Lee as the eponymous villain, a Chinese criminal mastermind, and Nigel Green as his pursuing rival Nayland Smith, a Scotland Yard detective. The film was a British- West German co-production, and was the first in a five- part series starring Lee and produced by Harry Alan Towers for Constantin Film, the second of which was\" The Brides of Fu Manchu\" released the next year, with the final entry being\" The Castle of Fu Manchu\" in 1969. It was shot in Technicolor and Techniscope, on- location in County Dublin, Ireland.\nThe Return of Dr. Fu Manchu: The Return of Dr. Fu Manchu is a 1930 American pre-Code film directed by Rowland V. Lee. It is the second of three films starring Warner Oland as the fiendish Fu Manchu, who returns from apparent death in the previous film,\" The Mysterious Dr. Fu Manchu\"( 1929), to seek revenge on those he holds responsible for the death of his wife and child.\nThe Vengeance of Fu Manchu: The Vengeance of Fu Manchu is a 1967 British film directed by Jeremy Summers and starring Christopher Lee, Horst Frank, Douglas Wilmer and Tsai Chin. It was the third British/ West German Constantin Film co-production of the Dr. Fu Manchu series and the first to be filmed in Hong Kong. It was generally released in the U.K. through Warner- Path\xe9( as a support feature to the Lindsay Shonteff film\" The Million Eyes of Sumuru\") on 3 December 1967.\nThe Brides of Fu Manchu: The Brides of Fu Manchu is a 1966 British/ West German Constantin Film co-production adventure crime film based on the fictional Chinese villain Dr. Fu Manchu, created by Sax Rohmer. It was the second film in a series, and was preceded by\" The Face of Fu ManchuThe Vengeance of Fu Manchu\" followed in 1967,\" The Blood of Fu Manchu\" in 1968, and\" The Castle of Fu Manchu\" in 1969. It was produced by Harry Alan Towers for Hallam Productions. Like the first film, it was directed by Don Sharp, and starred Christopher Lee as Fu Manchu. Nigel Green was replaced by Douglas Wilmer as Scotland Yard detective Nayland Smith. The action takes place mainly in London, where much of the location filming took place.\nThe Castle of Fu Manchu: The Castle of Fu Manchu( also known as The Torture Chamber of Dr. Fu Manchu and also known by its German title Die Folterkammer des Dr. Fu Man Chu) is a 1969 film and the fifth and final Dr. Fu Manchu film with Christopher Lee portraying the title character.\nThe Blood of Fu Manchu: The Blood of Fu Manchu, also known as Fu Manchu and the Kiss of Death, Kiss of Death, Kiss and Kill( U.S. title) and Against All Odds( original U.S. video title), is a 1968 British adventure crime film directed by Jes\xfas Franco, based on the fictional Asian villain Dr. Fu Manchu created by Sax Rohmer. It was the fourth film in a series, and was preceded by\" The Vengeance of Fu Manchu The Castle of Fu Manchu\" followed in 1969. It was produced by Harry Alan Towers for Udastex Films. It starred Christopher Lee as Dr. Fu Manchu, Richard Greene as Scotland Yard detective Nayland Smith, and Howard Marion- Crawford as Dr. Petrie. The movie was filmed in Spain and Brazil. Shirley Eaton appears in a scene that she claimed she was never paid for; apparently, the director Jes\xfas Franco had inserted some stock footage of her from one of her films(\" The Girl from Rio\"( 1968)) into the film without telling her. She only found out years later that she had been in a Fu Manchu film.\nDon Sharp: Donald Herman Sharp( 19 April 192114 December 2011) was an Australian- born British film director. His best known films were made for Hammer in the 1960s, and included\" The Kiss of the Vampire\"( 1962) and\" Rasputin, the Mad Monk\"( 1966). In 1965 he directed\" The Face of Fu Manchu\", based on the character created by Sax Rohmer, and starring Christopher Lee. Sharp also directed the sequel\" The Brides of Fu Manchu\"( 1966). In the 1980s he was also responsible for several hugely popular miniseries adapted from the novels of Barbara Taylor Bradford.\nBlind Shaft: Blind Shaft is a 2003 film about a pair of brutal con artists operating in the illegal coal mines of present- day northern China. The film was written and directed by Li Yang( \u674e\u6768), and is based on Chinese writer Liu Qingbang's short novel\" Shen MuSacred Wood\").\n\nQ: Which film came out first, Blind Shaft or The Mask Of Fu Manchu?\nA:\n\n\n--------------------------------------------------------------------------------\nAdding doc_id doc_11 to context.\nAdding doc_id doc_16 to context.\nAdding doc_id doc_19 to context.\nAdding doc_id doc_13116 to context.\nAdding doc_id doc_14 to context.\nAdding doc_id doc_13 to context.\nAdding doc_id doc_18 to context.\nAdding doc_id doc_977 to context.\nAdding doc_id doc_10 to context.\nragproxyagent (to assistant):\n\nYou're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the context provided by the user. You must think step-by-step.\nFirst, please learn the following examples of context and question pairs and their corresponding answers.\n\nContext:\nKurram Garhi: Kurram Garhi is a small village located near the city of Bannu, which is the part of Khyber Pakhtunkhwa province of Pakistan. Its population is approximately 35000.\nTrojkrsti: Trojkrsti is a village in Municipality of Prilep, Republic of Macedonia.\nQ: Are both Kurram Garhi and Trojkrsti located in the same country?\nA: Kurram Garhi is located in the country of Pakistan. Trojkrsti is located in the country of Republic of Macedonia. Thus, they are not in the same country. So the answer is: no.\n\n\nContext:\nEarly Side of Later: Early Side of Later is the third studio album by English singer- songwriter Matt Goss. It was released on 21 June 2004 by Concept Music and reached No. 78 on the UK Albums Chart.\nWhat's Inside: What's Inside is the fourteenth studio album by British singer- songwriter Joan Armatrading.\nQ: Which album was released earlier, What'S Inside or Cassandra'S Dream (Album)?\nA: What's Inside was released in the year 1995. Cassandra's Dream (album) was released in the year 2008. Thus, of the two, the album to release earlier is What's Inside. So the answer is: What's Inside.\n\n\nContext:\nMaria Alexandrovna (Marie of Hesse): Maria Alexandrovna , born Princess Marie of Hesse and by Rhine (8 August 1824 \u2013 3 June 1880) was Empress of Russia as the first wife of Emperor Alexander II.\nGrand Duke Alexei Alexandrovich of Russia: Grand Duke Alexei Alexandrovich of Russia,(Russian: \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447; 14 January 1850 (2 January O.S.) in St. Petersburg \u2013 14 November 1908 in Paris) was the fifth child and the fourth son of Alexander II of Russia and his first wife Maria Alexandrovna (Marie of Hesse).\nQ: What is the cause of death of Grand Duke Alexei Alexandrovich Of Russia's mother?\nA: The mother of Grand Duke Alexei Alexandrovich of Russia is Maria Alexandrovna. Maria Alexandrovna died from tuberculosis. So the answer is: tuberculosis.\n\n\nContext:\nLaughter in Hell: Laughter in Hell is a 1933 American Pre-Code drama film directed by Edward L. Cahn and starring Pat O'Brien. The film's title was typical of the sensationalistic titles of many Pre-Code films.\nEdward L. Cahn: Edward L. Cahn (February 12, 1899 \u2013 August 25, 1963) was an American film director.\nQ: When did the director of film Laughter In Hell die?\nA: The film Laughter In Hell was directed by Edward L. Cahn. Edward L. Cahn died on August 25, 1963. So the answer is: August 25, 1963.\n\nSecond, please complete the answer by thinking step-by-step.\n\nContext:\nThe Mask of Fu Manchu: The Mask of Fu Manchu is a 1932 pre-Code adventure film directed by Charles Brabin. It was written by Irene Kuhn, Edgar Allan Woolf and John Willard based on the 1932 novel of the same name by Sax Rohmer. Starring Boris Karloff as Fu Manchu, and featuring Myrna Loy as his depraved daughter, the movie revolves around Fu Manchu's quest for the golden sword and mask of Genghis Khan. Lewis Stone plays his nemesis. Dr. Petrie is absent from this film.\nThe Mysterious Dr. Fu Manchu: The Mysterious Dr. Fu Manchu is a 1929 American pre-Code drama film directed by Rowland V. Lee and starring Warner Oland as Dr. Fu Manchu. It was the first Fu Manchu film of the talkie era. Since this was during the transition period to sound, a silent version was also released in the United States.\nThe Face of Fu Manchu: The Face of Fu Manchu is a 1965 thriller film directed by Don Sharp and based on the characters created by Sax Rohmer. It stars Christopher Lee as the eponymous villain, a Chinese criminal mastermind, and Nigel Green as his pursuing rival Nayland Smith, a Scotland Yard detective. The film was a British- West German co-production, and was the first in a five- part series starring Lee and produced by Harry Alan Towers for Constantin Film, the second of which was\" The Brides of Fu Manchu\" released the next year, with the final entry being\" The Castle of Fu Manchu\" in 1969. It was shot in Technicolor and Techniscope, on- location in County Dublin, Ireland.\nThe Return of Dr. Fu Manchu: The Return of Dr. Fu Manchu is a 1930 American pre-Code film directed by Rowland V. Lee. It is the second of three films starring Warner Oland as the fiendish Fu Manchu, who returns from apparent death in the previous film,\" The Mysterious Dr. Fu Manchu\"( 1929), to seek revenge on those he holds responsible for the death of his wife and child.\nThe Vengeance of Fu Manchu: The Vengeance of Fu Manchu is a 1967 British film directed by Jeremy Summers and starring Christopher Lee, Horst Frank, Douglas Wilmer and Tsai Chin. It was the third British/ West German Constantin Film co-production of the Dr. Fu Manchu series and the first to be filmed in Hong Kong. It was generally released in the U.K. through Warner- Path\xe9( as a support feature to the Lindsay Shonteff film\" The Million Eyes of Sumuru\") on 3 December 1967.\nThe Brides of Fu Manchu: The Brides of Fu Manchu is a 1966 British/ West German Constantin Film co-production adventure crime film based on the fictional Chinese villain Dr. Fu Manchu, created by Sax Rohmer. It was the second film in a series, and was preceded by\" The Face of Fu ManchuThe Vengeance of Fu Manchu\" followed in 1967,\" The Blood of Fu Manchu\" in 1968, and\" The Castle of Fu Manchu\" in 1969. It was produced by Harry Alan Towers for Hallam Productions. Like the first film, it was directed by Don Sharp, and starred Christopher Lee as Fu Manchu. Nigel Green was replaced by Douglas Wilmer as Scotland Yard detective Nayland Smith. The action takes place mainly in London, where much of the location filming took place.\nThe Castle of Fu Manchu: The Castle of Fu Manchu( also known as The Torture Chamber of Dr. Fu Manchu and also known by its German title Die Folterkammer des Dr. Fu Man Chu) is a 1969 film and the fifth and final Dr. Fu Manchu film with Christopher Lee portraying the title character.\nThe Blood of Fu Manchu: The Blood of Fu Manchu, also known as Fu Manchu and the Kiss of Death, Kiss of Death, Kiss and Kill( U.S. title) and Against All Odds( original U.S. video title), is a 1968 British adventure crime film directed by Jes\xfas Franco, based on the fictional Asian villain Dr. Fu Manchu created by Sax Rohmer. It was the fourth film in a series, and was preceded by\" The Vengeance of Fu Manchu The Castle of Fu Manchu\" followed in 1969. It was produced by Harry Alan Towers for Udastex Films. It starred Christopher Lee as Dr. Fu Manchu, Richard Greene as Scotland Yard detective Nayland Smith, and Howard Marion- Crawford as Dr. Petrie. The movie was filmed in Spain and Brazil. Shirley Eaton appears in a scene that she claimed she was never paid for; apparently, the director Jes\xfas Franco had inserted some stock footage of her from one of her films(\" The Girl from Rio\"( 1968)) into the film without telling her. She only found out years later that she had been in a Fu Manchu film.\nDon Sharp: Donald Herman Sharp( 19 April 192114 December 2011) was an Australian- born British film director. His best known films were made for Hammer in the 1960s, and included\" The Kiss of the Vampire\"( 1962) and\" Rasputin, the Mad Monk\"( 1966). In 1965 he directed\" The Face of Fu Manchu\", based on the character created by Sax Rohmer, and starring Christopher Lee. Sharp also directed the sequel\" The Brides of Fu Manchu\"( 1966). In the 1980s he was also responsible for several hugely popular miniseries adapted from the novels of Barbara Taylor Bradford.\nBlind Shaft: Blind Shaft is a 2003 film about a pair of brutal con artists operating in the illegal coal mines of present- day northern China. The film was written and directed by Li Yang( \u674e\u6768), and is based on Chinese writer Liu Qingbang's short novel\" Shen MuSacred Wood\").\n\nQ: Which film came out first, Blind Shaft or The Mask Of Fu Manchu?\nA:\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nBlind Shaft is a 2003 film while The Mask of Fu Manchu is a 1932 pre-Code adventure film. Thus, The Mask of Fu Manchu came out earlier than Blind Shaft. So the answer is: The Mask of Fu Manchu.\n\n--------------------------------------------------------------------------------\n\n\n>>>>>>>>>>>>  Below are outputs of Case 2  <<<<<<<<<<<<\n\n\ndoc_ids:  [['doc_74', 'doc_76', 'doc_68', 'doc_42890', 'doc_75', 'doc_19596', 'doc_45135', 'doc_995', 'doc_7274', 'doc_23187']]\nAdding doc_id doc_74 to context.\nAdding doc_id doc_76 to context.\nAdding doc_id doc_68 to context.\nAdding doc_id doc_42890 to context.\nAdding doc_id doc_75 to context.\nAdding doc_id doc_19596 to context.\nAdding doc_id doc_45135 to context.\nAdding doc_id doc_995 to context.\nAdding doc_id doc_7274 to context.\nAdding doc_id doc_23187 to context.\nragproxyagent (to assistant):\n\nYou're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the context provided by the user. You must think step-by-step.\nFirst, please learn the following examples of context and question pairs and their corresponding answers.\n\nContext:\nKurram Garhi: Kurram Garhi is a small village located near the city of Bannu, which is the part of Khyber Pakhtunkhwa province of Pakistan. Its population is approximately 35000.\nTrojkrsti: Trojkrsti is a village in Municipality of Prilep, Republic of Macedonia.\nQ: Are both Kurram Garhi and Trojkrsti located in the same country?\nA: Kurram Garhi is located in the country of Pakistan. Trojkrsti is located in the country of Republic of Macedonia. Thus, they are not in the same country. So the answer is: no.\n\n\nContext:\nEarly Side of Later: Early Side of Later is the third studio album by English singer- songwriter Matt Goss. It was released on 21 June 2004 by Concept Music and reached No. 78 on the UK Albums Chart.\nWhat's Inside: What's Inside is the fourteenth studio album by British singer- songwriter Joan Armatrading.\nQ: Which album was released earlier, What'S Inside or Cassandra'S Dream (Album)?\nA: What's Inside was released in the year 1995. Cassandra's Dream (album) was released in the year 2008. Thus, of the two, the album to release earlier is What's Inside. So the answer is: What's Inside.\n\n\nContext:\nMaria Alexandrovna (Marie of Hesse): Maria Alexandrovna , born Princess Marie of Hesse and by Rhine (8 August 1824 \u2013 3 June 1880) was Empress of Russia as the first wife of Emperor Alexander II.\nGrand Duke Alexei Alexandrovich of Russia: Grand Duke Alexei Alexandrovich of Russia,(Russian: \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447; 14 January 1850 (2 January O.S.) in St. Petersburg \u2013 14 November 1908 in Paris) was the fifth child and the fourth son of Alexander II of Russia and his first wife Maria Alexandrovna (Marie of Hesse).\nQ: What is the cause of death of Grand Duke Alexei Alexandrovich Of Russia's mother?\nA: The mother of Grand Duke Alexei Alexandrovich of Russia is Maria Alexandrovna. Maria Alexandrovna died from tuberculosis. So the answer is: tuberculosis.\n\n\nContext:\nLaughter in Hell: Laughter in Hell is a 1933 American Pre-Code drama film directed by Edward L. Cahn and starring Pat O'Brien. The film's title was typical of the sensationalistic titles of many Pre-Code films.\nEdward L. Cahn: Edward L. Cahn (February 12, 1899 \u2013 August 25, 1963) was an American film director.\nQ: When did the director of film Laughter In Hell die?\nA: The film Laughter In Hell was directed by Edward L. Cahn. Edward L. Cahn died on August 25, 1963. So the answer is: August 25, 1963.\n\nSecond, please complete the answer by thinking step-by-step.\n\nContext:\nSeoul High School: Seoul High School( Hangul: \uc11c\uc6b8\uace0\ub4f1\ud559\uad50) is a public high school located in the heart of Seoul, South Korea.\nNorth Marion High School (Oregon): North Marion High School is a public high school in Aurora, Oregon, United States. The school is part of the North Marion School District with all four schools being located on the same campus. The school draws students from the cities of Aurora, Hubbard, and Donald as well as the communities of Broadacres and Butteville.\nMarion High School (Kansas): Marion High School is a public high school in Marion, Kansas, USA. It is one of three schools operated by Marion USD 408, and is the sole high school in the district.\nNorthwest High School: Northwest High School or North West High School may refer to:\nMarion High School (Indiana): Marion High School is a high school in Marion, Indiana with more than 1,000 students.\nMacon County High School: Macon County High School is located in Montezuma, Georgia, United States, which is a part of Macon County. Enrollment as of the 2017- 2018 school year is 491.\nCanyon High School (Ogden, Utah): Canyon High School was a high school in Ogden, Utah.\nNorthside High School: Northside High School or North Side High School or Northside Christian School or similar can refer to:\nSprings Boys' High School: Springs Boys' High School is a high school in Springs, Gauteng, South Africa.\nInternational School of Koje: International School of Koje( ISK) is a privately funded international school located in Geoje, South Korea.\n\nQ: Are North Marion High School (Oregon) and Seoul High School both located in the same country?\nA:\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nNo, North Marion High School (Oregon) is located in the United States, specifically in the state of Oregon, while Seoul High School is located in South Korea. So they are not in the same country.\n\n--------------------------------------------------------------------------------\nUpdating context and resetting conversation.\ndoc_ids:  [['doc_76', 'doc_68', 'doc_74', 'doc_75', 'doc_19596', 'doc_42890', 'doc_24819', 'doc_69', 'doc_995', 'doc_7274']]\nAdding doc_id doc_24819 to context.\nAdding doc_id doc_69 to context.\nragproxyagent (to assistant):\n\nYou're a retrieve augmented chatbot. You answer user's questions based on your own knowledge and the context provided by the user. You must think step-by-step.\nFirst, please learn the following examples of context and question pairs and their corresponding answers.\n\nContext:\nKurram Garhi: Kurram Garhi is a small village located near the city of Bannu, which is the part of Khyber Pakhtunkhwa province of Pakistan. Its population is approximately 35000.\nTrojkrsti: Trojkrsti is a village in Municipality of Prilep, Republic of Macedonia.\nQ: Are both Kurram Garhi and Trojkrsti located in the same country?\nA: Kurram Garhi is located in the country of Pakistan. Trojkrsti is located in the country of Republic of Macedonia. Thus, they are not in the same country. So the answer is: no.\n\n\nContext:\nEarly Side of Later: Early Side of Later is the third studio album by English singer- songwriter Matt Goss. It was released on 21 June 2004 by Concept Music and reached No. 78 on the UK Albums Chart.\nWhat's Inside: What's Inside is the fourteenth studio album by British singer- songwriter Joan Armatrading.\nQ: Which album was released earlier, What'S Inside or Cassandra'S Dream (Album)?\nA: What's Inside was released in the year 1995. Cassandra's Dream (album) was released in the year 2008. Thus, of the two, the album to release earlier is What's Inside. So the answer is: What's Inside.\n\n\nContext:\nMaria Alexandrovna (Marie of Hesse): Maria Alexandrovna , born Princess Marie of Hesse and by Rhine (8 August 1824 \u2013 3 June 1880) was Empress of Russia as the first wife of Emperor Alexander II.\nGrand Duke Alexei Alexandrovich of Russia: Grand Duke Alexei Alexandrovich of Russia,(Russian: \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447; 14 January 1850 (2 January O.S.) in St. Petersburg \u2013 14 November 1908 in Paris) was the fifth child and the fourth son of Alexander II of Russia and his first wife Maria Alexandrovna (Marie of Hesse).\nQ: What is the cause of death of Grand Duke Alexei Alexandrovich Of Russia's mother?\nA: The mother of Grand Duke Alexei Alexandrovich of Russia is Maria Alexandrovna. Maria Alexandrovna died from tuberculosis. So the answer is: tuberculosis.\n\n\nContext:\nLaughter in Hell: Laughter in Hell is a 1933 American Pre-Code drama film directed by Edward L. Cahn and starring Pat O'Brien. The film's title was typical of the sensationalistic titles of many Pre-Code films.\nEdward L. Cahn: Edward L. Cahn (February 12, 1899 \u2013 August 25, 1963) was an American film director.\nQ: When did the director of film Laughter In Hell die?\nA: The film Laughter In Hell was directed by Edward L. Cahn. Edward L. Cahn died on August 25, 1963. So the answer is: August 25, 1963.\n\nSecond, please complete the answer by thinking step-by-step.\n\nContext:\nSeoul High School: Seoul High School( Hangul: \uc11c\uc6b8\uace0\ub4f1\ud559\uad50) is a public high school located in the heart of Seoul, South Korea.\nNorth Marion High School (Oregon): North Marion High School is a public high school in Aurora, Oregon, United States. The school is part of the North Marion School District with all four schools being located on the same campus. The school draws students from the cities of Aurora, Hubbard, and Donald as well as the communities of Broadacres and Butteville.\nMarion High School (Kansas): Marion High School is a public high school in Marion, Kansas, USA. It is one of three schools operated by Marion USD 408, and is the sole high school in the district.\nNorthwest High School: Northwest High School or North West High School may refer to:\nMarion High School (Indiana): Marion High School is a high school in Marion, Indiana with more than 1,000 students.\nMacon County High School: Macon County High School is located in Montezuma, Georgia, United States, which is a part of Macon County. Enrollment as of the 2017- 2018 school year is 491.\nCanyon High School (Ogden, Utah): Canyon High School was a high school in Ogden, Utah.\nNorthside High School: Northside High School or North Side High School or Northside Christian School or similar can refer to:\nSprings Boys' High School: Springs Boys' High School is a high school in Springs, Gauteng, South Africa.\nInternational School of Koje: International School of Koje( ISK) is a privately funded international school located in Geoje, South Korea.\nAnderson High School (Anderson, Indiana): Anderson High School is a public high school located in Anderson, Indiana.\nNorth Marion High School (West Virginia): North Marion High School is a public Double A (\"AA\") high school in the U.S. state of West Virginia, with a current enrollment of 851 students. North Marion High School is located approximately 4 miles from Farmington, West Virginia on US Route 250 north. While it is closer to the city of Mannington, West Virginia, and is often considered to be located in Rachel, West Virginia, the school mailing address is Farmington. Rachel is a small coal mining community located adjacent to the school, and is an unincorporated municipality. North Marion High School is represented as \"Grantville High School\" in the popular alternative history novel \"1632\" by writer Eric Flint. The novel is set in the fictional town of Grantville, which is based on the real town and surroundings of Mannington.\nQ: Are North Marion High School (Oregon) and Seoul High School both located in the same country?\nA:\n\n\n--------------------------------------------------------------------------------\nassistant (to ragproxyagent):\n\nNorth Marion High School (Oregon) is located in the country of United States. Seoul High School is located in the country of South Korea. Thus, they are not in the same country. So the answer is: no.\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"max_tokens is too small to fit a single line of text. Breaking this line:\n    Clyde Thompson: Clyde Thompson( 1910 \u2013 July 1, 1979) was an American prisoner turned chaplain. He is ...\nmax_tokens is too small to fit a single line of text. Breaking this line:\n    Australian Historical Monographs: The Australian Historical Monographs are a series of Historical st ...\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},6973:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>d,toc:()=>l});var a=t(5893),o=t(1151);const i={tags:["code generation","debugging"],description:"Use conversable language learning model agents to solve tasks and provide automatic feedback through a comprehensive example of writing, executing, and debugging Python code to compare stock price changes.\n",source_notebook:"/notebook/agentchat_auto_feedback_from_code_execution.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_auto_feedback_from_code_execution.ipynb",title:"Task Solving with Code Generation, Execution and Debugging"},s="Task Solving with Code Generation, Execution and Debugging",r={id:"notebooks/agentchat_auto_feedback_from_code_execution",title:"Task Solving with Code Generation, Execution and Debugging",description:"Use conversable language learning model agents to solve tasks and provide automatic feedback through a comprehensive example of writing, executing, and debugging Python code to compare stock price changes.\n",source:"@site/docs/notebooks/agentchat_auto_feedback_from_code_execution.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_auto_feedback_from_code_execution",permalink:"/autogen/docs/notebooks/agentchat_auto_feedback_from_code_execution",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_auto_feedback_from_code_execution.ipynb",tags:[{label:"code generation",permalink:"/autogen/docs/tags/code-generation"},{label:"debugging",permalink:"/autogen/docs/tags/debugging"}],version:"current",frontMatter:{tags:["code generation","debugging"],description:"Use conversable language learning model agents to solve tasks and provide automatic feedback through a comprehensive example of writing, executing, and debugging Python code to compare stock price changes.\n",source_notebook:"/notebook/agentchat_auto_feedback_from_code_execution.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_auto_feedback_from_code_execution.ipynb",title:"Task Solving with Code Generation, Execution and Debugging"},sidebar:"notebooksSidebar",previous:{title:"Using RetrieveChat for Retrieve Augmented Code Generation and Question Answering",permalink:"/autogen/docs/notebooks/agentchat_RetrieveChat"},next:{title:"Task Solving with Provided Tools as Functions (Asynchronous Function Calls)",permalink:"/autogen/docs/notebooks/agentchat_function_call_async"}},c={},l=[{value:"Example Task: Check Stock Price Change",id:"example-task-check-stock-price-change",level:2},{value:"Check chat results",id:"check-chat-results",level:4},{value:"Example Task: Plot Chart",id:"example-task-plot-chart",level:2},{value:"Use a Different Code Execution Environment",id:"use-a-different-code-execution-environment",level:2}],d=['\x3c!--\ntags: ["code generation", "debugging"]\ndescription: |\n    Use conversable language learning model agents to solve tasks and provide automatic feedback through a comprehensive example of writing, executing, and debugging Python code to compare stock price changes.\n--\x3e'];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[0]}}),"\n",(0,a.jsx)(n.h1,{id:"task-solving-with-code-generation-execution-and-debugging",children:"Task Solving with Code Generation, Execution and Debugging"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_auto_feedback_from_code_execution.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_auto_feedback_from_code_execution.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["AutoGen offers conversable LLM agents, which can be used to solve\nvarious tasks with human or automatic feedback, including tasks that\nrequire using tools via code. Please find documentation about this\nfeature\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/Use-Cases/agent_chat",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["In this notebook, we demonstrate how to use ",(0,a.jsx)(n.code,{children:"AssistantAgent"})," and\n",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," to write code and execute the code. Here\n",(0,a.jsx)(n.code,{children:"AssistantAgent"})," is an LLM-based agent that can write Python code (in a\nPython coding block) for a user to execute for a given task.\n",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," is an agent which serves as a proxy for the human user\nto execute the code written by ",(0,a.jsx)(n.code,{children:"AssistantAgent"}),", or automatically\nexecute the code. Depending on the setting of ",(0,a.jsx)(n.code,{children:"human_input_mode"})," and\n",(0,a.jsx)(n.code,{children:"max_consecutive_auto_reply"}),", the ",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," either solicits\nfeedback from the human user or returns auto-feedback based on the\nresult of code execution (success or failure and corresponding outputs)\nto ",(0,a.jsx)(n.code,{children:"AssistantAgent"}),". ",(0,a.jsx)(n.code,{children:"AssistantAgent"})," will debug the code and suggest\nnew code if the result contains error. The two agents keep communicating\nto each other until the task is done."]}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsxs)(n.p,{children:["Install ",(0,a.jsx)(n.code,{children:"pyautogen"}),":"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typing import Dict, Union\n\nfrom IPython import get_ipython\nfrom IPython.display import display, Image\n\nimport autogen\n\nconfig_list = autogen.config_list_from_json(\n    "OAI_CONFIG_LIST",\n    # filter_dict={\n    #     "model": ["gpt-4", "gpt-4-0314", "gpt4", "gpt-4-32k", "gpt-4-32k-0314", "gpt-4-32k-v0314"],\n    # },\n)\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about configuring LLMs for agents ",(0,a.jsx)(n.a,{href:"/docs/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"example-task-check-stock-price-change",children:"Example Task: Check Stock Price Change"}),"\n",(0,a.jsxs)(n.p,{children:["In the example below, let\u2019s see how to use the agents in AutoGen to\nwrite a python script and execute the script. This process involves\nconstructing a ",(0,a.jsx)(n.code,{children:"AssistantAgent"})," to serve as the assistant, along with a\n",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," that acts as a proxy for the human user. In this\nexample demonstrated below, when constructing the ",(0,a.jsx)(n.code,{children:"UserProxyAgent"}),", we\nselect the ",(0,a.jsx)(n.code,{children:"human_input_mode"})," to \u201cNEVER\u201d. This means that the\n",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," will not solicit feedback from the human user. It stops\nreplying when the limit defined by ",(0,a.jsx)(n.code,{children:"max_consecutive_auto_reply"})," is\nreached, or when ",(0,a.jsx)(n.code,{children:"is_termination_msg()"})," returns true for the received\nmessage."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# create an AssistantAgent named "assistant"\nassistant = autogen.AssistantAgent(\n    name="assistant",\n    llm_config={\n        "cache_seed": 41,  # seed for caching and reproducibility\n        "config_list": config_list,  # a list of OpenAI API configurations\n        "temperature": 0,  # temperature for sampling\n    },  # configuration for autogen\'s enhanced inference API which is compatible with OpenAI API\n)\n# create a UserProxyAgent instance named "user_proxy"\nuser_proxy = autogen.UserProxyAgent(\n    name="user_proxy",\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=10,\n    is_termination_msg=lambda x: x.get("content", "").rstrip().endswith("TERMINATE"),\n    code_execution_config={\n        "work_dir": "coding",\n        "use_docker": False,  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n    },\n)\n# the assistant receives a message from the user_proxy, which contains the task description\nchat_res = user_proxy.initiate_chat(\n    assistant,\n    message="""What date is today? Compare the year-to-date gain for META and TESLA.""",\n    summary_method="reflection_with_llm",\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"user_proxy (to assistant):\n\nWhat date is today? Compare the year-to-date gain for META and TESLA.\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\nrecipitent sending assistant What date is today? Compare the year-to-date gain for META and TESLA. None\nassistant (to user_proxy):\n\nTo get the current date, we can use Python's `datetime` module. After that, we will need to retrieve the year-to-date (YTD) gain for both META (Meta Platforms, Inc.) and TESLA (Tesla, Inc.). We can do this by fetching the stock prices from the beginning of the year and the current stock prices, then calculating the percentage change.\n\nFirst, let's write a Python script to get the current date:\n\n```python\n# filename: get_current_date.py\n\nfrom datetime import datetime\n\n# Get the current date\ncurrent_date = datetime.now()\n\n# Print the current date in YYYY-MM-DD format\nprint(current_date.strftime('%Y-%m-%d'))\n```\n\nPlease save the above code in a file named `get_current_date.py` and execute it to get today's date. After that, we will proceed to the next step of fetching the stock data.\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nrecipitent sending user_proxy To get the current date, we can use Python's `datetime` module. After that, we will need to retrieve the year-to-date (YTD) gain for both META (Meta Platforms, Inc.) and TESLA (Tesla, Inc.). We can do this by fetching the stock prices from the beginning of the year and the current stock prices, then calculating the percentage change.\n\nFirst, let's write a Python script to get the current date:\n\n```python\n# filename: get_current_date.py\n\nfrom datetime import datetime\n\n# Get the current date\ncurrent_date = datetime.now()\n\n# Print the current date in YYYY-MM-DD format\nprint(current_date.strftime('%Y-%m-%d'))\n```\n\nPlease save the above code in a file named `get_current_date.py` and execute it to get today's date. After that, we will proceed to the next step of fetching the stock data. None\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \n2024-02-16\n\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\nrecipitent sending assistant exitcode: 0 (execution succeeded)\nCode output: \n2024-02-16\n None\nassistant (to user_proxy):\n\nGreat, today's date is 2024-02-16.\n\nNext, we will fetch the stock prices for META (Meta Platforms, Inc.) and TESLA (Tesla, Inc.) from the beginning of the year until today. To do this, we can use the `yfinance` library in Python, which allows us to retrieve historical stock data.\n\nI will provide you with a Python script that will:\n1. Fetch the stock prices for META and TESLA from the beginning of the year (2024-01-01) to today (2024-02-16).\n2. Calculate the YTD gain for each stock.\n\nPlease execute the following Python script:\n\n```python\n# filename: compare_ytd_gains.py\n\nimport yfinance as yf\nfrom datetime import datetime\n\n# Define the tickers for Meta Platforms, Inc. and Tesla, Inc.\ntickers = [\"META\", \"TSLA\"]\n\n# Define the start and end dates for the YTD period\nstart_date = datetime(2024, 1, 1)\nend_date = datetime(2024, 2, 16)\n\n# Function to calculate YTD gain\ndef calculate_ytd_gain(ticker):\n    # Fetch historical data for the ticker\n    data = yf.download(ticker, start=start_date, end=end_date)\n    \n    # Get the first and last closing prices\n    initial_price = data['Close'].iloc[0]\n    final_price = data['Close'].iloc[-1]\n    \n    # Calculate the YTD gain\n    ytd_gain = ((final_price - initial_price) / initial_price) * 100\n    return ytd_gain\n\n# Calculate and print the YTD gains for both stocks\nytd_gains = {}\nfor ticker in tickers:\n    ytd_gains[ticker] = calculate_ytd_gain(ticker)\n\nprint(f\"YTD gain for META: {ytd_gains['META']:.2f}%\")\nprint(f\"YTD gain for TSLA: {ytd_gains['TSLA']:.2f}%\")\n```\n\nBefore running this script, ensure that you have the `yfinance` library installed. If it's not installed, you can install it using the following command:\n\n```sh\npip install yfinance\n```\n\nAfter installing `yfinance`, save the script as `compare_ytd_gains.py` and execute it to compare the YTD gains for META and TESLA.\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\n\n>>>>>>>> EXECUTING CODE BLOCK 1 (inferred language is sh)...\nrecipitent sending user_proxy Great, today's date is 2024-02-16.\n\nNext, we will fetch the stock prices for META (Meta Platforms, Inc.) and TESLA (Tesla, Inc.) from the beginning of the year until today. To do this, we can use the `yfinance` library in Python, which allows us to retrieve historical stock data.\n\nI will provide you with a Python script that will:\n1. Fetch the stock prices for META and TESLA from the beginning of the year (2024-01-01) to today (2024-02-16).\n2. Calculate the YTD gain for each stock.\n\nPlease execute the following Python script:\n\n```python\n# filename: compare_ytd_gains.py\n\nimport yfinance as yf\nfrom datetime import datetime\n\n# Define the tickers for Meta Platforms, Inc. and Tesla, Inc.\ntickers = [\"META\", \"TSLA\"]\n\n# Define the start and end dates for the YTD period\nstart_date = datetime(2024, 1, 1)\nend_date = datetime(2024, 2, 16)\n\n# Function to calculate YTD gain\ndef calculate_ytd_gain(ticker):\n    # Fetch historical data for the ticker\n    data = yf.download(ticker, start=start_date, end=end_date)\n    \n    # Get the first and last closing prices\n    initial_price = data['Close'].iloc[0]\n    final_price = data['Close'].iloc[-1]\n    \n    # Calculate the YTD gain\n    ytd_gain = ((final_price - initial_price) / initial_price) * 100\n    return ytd_gain\n\n# Calculate and print the YTD gains for both stocks\nytd_gains = {}\nfor ticker in tickers:\n    ytd_gains[ticker] = calculate_ytd_gain(ticker)\n\nprint(f\"YTD gain for META: {ytd_gains['META']:.2f}%\")\nprint(f\"YTD gain for TSLA: {ytd_gains['TSLA']:.2f}%\")\n```\n\nBefore running this script, ensure that you have the `yfinance` library installed. If it's not installed, you can install it using the following command:\n\n```sh\npip install yfinance\n```\n\nAfter installing `yfinance`, save the script as `compare_ytd_gains.py` and execute it to compare the YTD gains for META and TESLA. None\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nYTD gain for META: 39.78%\nYTD gain for TSLA: -19.31%\n\nRequirement already satisfied: yfinance in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (0.2.36)\nRequirement already satisfied: pandas>=1.3.0 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.2.0)\nRequirement already satisfied: numpy>=1.16.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.26.4)\nRequirement already satisfied: requests>=2.31 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.31.0)\nRequirement already satisfied: multitasking>=0.0.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (0.0.11)\nRequirement already satisfied: lxml>=4.9.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (5.1.0)\nRequirement already satisfied: appdirs>=1.4.4 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.4.4)\nRequirement already satisfied: pytz>=2022.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2024.1)\nRequirement already satisfied: frozendict>=2.3.4 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.4.0)\nRequirement already satisfied: peewee>=3.16.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (3.17.1)\nRequirement already satisfied: beautifulsoup4>=4.11.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (4.12.3)\nRequirement already satisfied: html5lib>=1.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.1)\nRequirement already satisfied: soupsieve>1.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\nRequirement already satisfied: six>=1.9 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\nRequirement already satisfied: webencodings in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2.8.2)\nRequirement already satisfied: tzdata>=2022.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2024.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (2024.2.2)\n\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\nrecipitent sending assistant exitcode: 0 (execution succeeded)\nCode output: \nYTD gain for META: 39.78%\nYTD gain for TSLA: -19.31%\n\nRequirement already satisfied: yfinance in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (0.2.36)\nRequirement already satisfied: pandas>=1.3.0 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.2.0)\nRequirement already satisfied: numpy>=1.16.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.26.4)\nRequirement already satisfied: requests>=2.31 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.31.0)\nRequirement already satisfied: multitasking>=0.0.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (0.0.11)\nRequirement already satisfied: lxml>=4.9.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (5.1.0)\nRequirement already satisfied: appdirs>=1.4.4 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.4.4)\nRequirement already satisfied: pytz>=2022.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2024.1)\nRequirement already satisfied: frozendict>=2.3.4 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.4.0)\nRequirement already satisfied: peewee>=3.16.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (3.17.1)\nRequirement already satisfied: beautifulsoup4>=4.11.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (4.12.3)\nRequirement already satisfied: html5lib>=1.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.1)\nRequirement already satisfied: soupsieve>1.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\nRequirement already satisfied: six>=1.9 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\nRequirement already satisfied: webencodings in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2.8.2)\nRequirement already satisfied: tzdata>=2022.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2024.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (2024.2.2)\n None\nassistant (to user_proxy):\n\nThe year-to-date (YTD) gain for META (Meta Platforms, Inc.) is approximately 39.78%, and the YTD loss for TESLA (Tesla, Inc.) is approximately -19.31%. This means that so far this year, META's stock price has increased by about 39.78%, while TESLA's stock price has decreased by about 19.31%.\n\nPlease note that stock prices are subject to market fluctuations, and the values provided are based on the closing prices from the start of the year to today's date.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The example above involves code execution. In AutoGen, code execution is\ntriggered automatically by the ",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," when it detects an\nexecutable code block in a received message and no human user input is\nprovided. This process occurs in a designated working directory, using a\nDocker container by default. Unless a specific directory is specified,\nAutoGen defaults to the ",(0,a.jsx)(n.code,{children:"autogen/extensions"})," directory. Users have the\noption to specify a different working directory by setting the\n",(0,a.jsx)(n.code,{children:"work_dir"})," argument when constructing a new instance of the\n",(0,a.jsx)(n.code,{children:"UserProxyAgent"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"The whole chat is auto-generated."}),"\n",(0,a.jsx)(n.h4,{id:"check-chat-results",children:"Check chat results"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"initiate_chat"})," method returns a ",(0,a.jsx)(n.code,{children:"ChatResult"})," object, which is a\ndataclass object storing information about the chat. Currently, it\nincludes the following attributes:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"chat_history"}),": a list of chat history."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"summary"}),": a string of chat summary. A summary is only available if\na summary_method is provided when initiating the chat."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"cost"}),": a tuple of (total_cost, total_actual_cost), where total_cost\nis a dictionary of cost information, and total_actual_cost is a\ndictionary of information on the actual incurred cost with cache."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"human_input"}),": a list of strings of human inputs solicited during\nthe chat. (Note that since we are setting ",(0,a.jsx)(n.code,{children:"human_input_mode"})," to\n",(0,a.jsx)(n.code,{children:"NEVER"})," in this notebook, this list is always empty.)"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'print("Chat history:", chat_res.chat_history)\n\nprint("Summary:", chat_res.summary)\nprint("Cost info:", chat_res.cost)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Chat history: [{'content': 'What date is today? Compare the year-to-date gain for META and TESLA.', 'role': 'assistant'}, {'content': \"To get the current date, we can use Python's `datetime` module. After that, we will need to retrieve the year-to-date (YTD) gain for both META (Meta Platforms, Inc.) and TESLA (Tesla, Inc.). We can do this by fetching the stock prices from the beginning of the year and the current stock prices, then calculating the percentage change.\\n\\nFirst, let's write a Python script to get the current date:\\n\\n```python\\n# filename: get_current_date.py\\n\\nfrom datetime import datetime\\n\\n# Get the current date\\ncurrent_date = datetime.now()\\n\\n# Print the current date in YYYY-MM-DD format\\nprint(current_date.strftime('%Y-%m-%d'))\\n```\\n\\nPlease save the above code in a file named `get_current_date.py` and execute it to get today's date. After that, we will proceed to the next step of fetching the stock data.\", 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\n2024-02-16\\n', 'role': 'assistant'}, {'content': 'Great, today\\'s date is 2024-02-16.\\n\\nNext, we will fetch the stock prices for META (Meta Platforms, Inc.) and TESLA (Tesla, Inc.) from the beginning of the year until today. To do this, we can use the `yfinance` library in Python, which allows us to retrieve historical stock data.\\n\\nI will provide you with a Python script that will:\\n1. Fetch the stock prices for META and TESLA from the beginning of the year (2024-01-01) to today (2024-02-16).\\n2. Calculate the YTD gain for each stock.\\n\\nPlease execute the following Python script:\\n\\n```python\\n# filename: compare_ytd_gains.py\\n\\nimport yfinance as yf\\nfrom datetime import datetime\\n\\n# Define the tickers for Meta Platforms, Inc. and Tesla, Inc.\\ntickers = [\"META\", \"TSLA\"]\\n\\n# Define the start and end dates for the YTD period\\nstart_date = datetime(2024, 1, 1)\\nend_date = datetime(2024, 2, 16)\\n\\n# Function to calculate YTD gain\\ndef calculate_ytd_gain(ticker):\\n    # Fetch historical data for the ticker\\n    data = yf.download(ticker, start=start_date, end=end_date)\\n    \\n    # Get the first and last closing prices\\n    initial_price = data[\\'Close\\'].iloc[0]\\n    final_price = data[\\'Close\\'].iloc[-1]\\n    \\n    # Calculate the YTD gain\\n    ytd_gain = ((final_price - initial_price) / initial_price) * 100\\n    return ytd_gain\\n\\n# Calculate and print the YTD gains for both stocks\\nytd_gains = {}\\nfor ticker in tickers:\\n    ytd_gains[ticker] = calculate_ytd_gain(ticker)\\n\\nprint(f\"YTD gain for META: {ytd_gains[\\'META\\']:.2f}%\")\\nprint(f\"YTD gain for TSLA: {ytd_gains[\\'TSLA\\']:.2f}%\")\\n```\\n\\nBefore running this script, ensure that you have the `yfinance` library installed. If it\\'s not installed, you can install it using the following command:\\n\\n```sh\\npip install yfinance\\n```\\n\\nAfter installing `yfinance`, save the script as `compare_ytd_gains.py` and execute it to compare the YTD gains for META and TESLA.', 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\nYTD gain for META: 39.78%\\nYTD gain for TSLA: -19.31%\\n\\nRequirement already satisfied: yfinance in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (0.2.36)\\nRequirement already satisfied: pandas>=1.3.0 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.2.0)\\nRequirement already satisfied: numpy>=1.16.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.26.4)\\nRequirement already satisfied: requests>=2.31 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.31.0)\\nRequirement already satisfied: multitasking>=0.0.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (0.0.11)\\nRequirement already satisfied: lxml>=4.9.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (5.1.0)\\nRequirement already satisfied: appdirs>=1.4.4 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.4.4)\\nRequirement already satisfied: pytz>=2022.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2024.1)\\nRequirement already satisfied: frozendict>=2.3.4 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.4.0)\\nRequirement already satisfied: peewee>=3.16.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (3.17.1)\\nRequirement already satisfied: beautifulsoup4>=4.11.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (4.12.3)\\nRequirement already satisfied: html5lib>=1.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.1)\\nRequirement already satisfied: soupsieve>1.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\\nRequirement already satisfied: six>=1.9 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\\nRequirement already satisfied: webencodings in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\\nRequirement already satisfied: python-dateutil>=2.8.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2.8.2)\\nRequirement already satisfied: tzdata>=2022.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2024.1)\\nRequirement already satisfied: charset-normalizer<4,>=2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.3.2)\\nRequirement already satisfied: idna<4,>=2.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.6)\\nRequirement already satisfied: urllib3<3,>=1.21.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (1.26.18)\\nRequirement already satisfied: certifi>=2017.4.17 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (2024.2.2)\\n', 'role': 'assistant'}, {'content': \"The year-to-date (YTD) gain for META (Meta Platforms, Inc.) is approximately 39.78%, and the YTD loss for TESLA (Tesla, Inc.) is approximately -19.31%. This means that so far this year, META's stock price has increased by about 39.78%, while TESLA's stock price has decreased by about 19.31%.\\n\\nPlease note that stock prices are subject to market fluctuations, and the values provided are based on the closing prices from the start of the year to today's date.\\n\\nTERMINATE\", 'role': 'user'}]\nSummary: Today's date is 2024-02-16. The year-to-date gain for META (Meta Platforms, Inc.) is approximately 39.78%, while TESLA (Tesla, Inc.) has experienced a year-to-date loss of about -19.31%.\nCost info: ({'total_cost': 0.21233999999999997, 'gpt-4': {'cost': 0.21233999999999997, 'prompt_tokens': 5348, 'completion_tokens': 865, 'total_tokens': 6213}}, {'total_cost': 0.1866, 'gpt-4': {'cost': 0.1866, 'prompt_tokens': 4858, 'completion_tokens': 681, 'total_tokens': 5539}})\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example-task-plot-chart",children:"Example Task: Plot Chart"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# followup of the previous question\nuser_proxy.send(\n    recipient=assistant,\n    message="""Plot a chart of their stock price change YTD and save to stock_price_ytd.png.""",\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"user_proxy (to assistant):\n\nPlot a chart of their stock price change YTD and save to stock_price_ytd.png.\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\nrecipitent sending assistant Plot a chart of their stock price change YTD and save to stock_price_ytd.png. None\nassistant (to user_proxy):\n\nTo plot a chart of the YTD stock price changes for META and TESLA and save it to a file named `stock_price_ytd.png`, we will use Python with libraries such as `matplotlib` for plotting and `yfinance` for fetching the stock data.\n\nHere is the Python script that will perform the task:\n\n```python\n# filename: plot_stock_price_ytd.py\n\nimport yfinance as yf\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the tickers for Meta Platforms, Inc. and Tesla, Inc.\ntickers = [\"META\", \"TSLA\"]\n\n# Define the start and end dates for the YTD period\nstart_date = datetime(2024, 1, 1)\nend_date = datetime(2024, 2, 16)\n\n# Fetch historical data for both tickers\ndata = yf.download(tickers, start=start_date, end=end_date)['Close']\n\n# Normalize the data to 100 (percentage change) based on the first closing price\nnormalized_data = (data / data.iloc[0]) * 100\n\n# Plot the data\nplt.figure(figsize=(14, 7))\nfor ticker in tickers:\n    plt.plot(normalized_data.index, normalized_data[ticker], label=ticker)\n\n# Add titles and labels\nplt.title('Stock Price Change YTD')\nplt.xlabel('Date')\nplt.ylabel('Normalized Price (Base 100)')\nplt.legend()\n\n# Save the plot to a PNG file\nplt.savefig('stock_price_ytd.png')\n\n# Show the plot\nplt.show()\n```\n\nBefore running this script, ensure that you have the `matplotlib` library installed. If it's not installed, you can install it using the following command:\n\n```sh\npip install matplotlib\n```\n\nAfter installing `matplotlib`, save the script as `plot_stock_price_ytd.py` and execute it. The script will display the chart and save it as `stock_price_ytd.png` in the current directory.\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nrecipitent sending user_proxy To plot a chart of the YTD stock price changes for META and TESLA and save it to a file named `stock_price_ytd.png`, we will use Python with libraries such as `matplotlib` for plotting and `yfinance` for fetching the stock data.\n\nHere is the Python script that will perform the task:\n\n```python\n# filename: plot_stock_price_ytd.py\n\nimport yfinance as yf\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the tickers for Meta Platforms, Inc. and Tesla, Inc.\ntickers = [\"META\", \"TSLA\"]\n\n# Define the start and end dates for the YTD period\nstart_date = datetime(2024, 1, 1)\nend_date = datetime(2024, 2, 16)\n\n# Fetch historical data for both tickers\ndata = yf.download(tickers, start=start_date, end=end_date)['Close']\n\n# Normalize the data to 100 (percentage change) based on the first closing price\nnormalized_data = (data / data.iloc[0]) * 100\n\n# Plot the data\nplt.figure(figsize=(14, 7))\nfor ticker in tickers:\n    plt.plot(normalized_data.index, normalized_data[ticker], label=ticker)\n\n# Add titles and labels\nplt.title('Stock Price Change YTD')\nplt.xlabel('Date')\nplt.ylabel('Normalized Price (Base 100)')\nplt.legend()\n\n# Save the plot to a PNG file\nplt.savefig('stock_price_ytd.png')\n\n# Show the plot\nplt.show()\n```\n\nBefore running this script, ensure that you have the `matplotlib` library installed. If it's not installed, you can install it using the following command:\n\n```sh\npip install matplotlib\n```\n\nAfter installing `matplotlib`, save the script as `plot_stock_price_ytd.py` and execute it. The script will display the chart and save it as `stock_price_ytd.png` in the current directory. None\nuser_proxy (to assistant):\n\nexitcode: 1 (execution failed)\nCode output: \nTraceback (most recent call last):\n  File \"plot_stock_price_ytd.py\", line 4, in <module>\n    import matplotlib.pyplot as plt\nModuleNotFoundError: No module named 'matplotlib'\n\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\nrecipitent sending assistant exitcode: 1 (execution failed)\nCode output: \nTraceback (most recent call last):\n  File \"plot_stock_price_ytd.py\", line 4, in <module>\n    import matplotlib.pyplot as plt\nModuleNotFoundError: No module named 'matplotlib'\n None\nassistant (to user_proxy):\n\nIt appears that the `matplotlib` library is not installed in your Python environment. To proceed, you need to install the `matplotlib` library. Please run the following command to install it:\n\n```sh\npip install matplotlib\n```\n\nAfter the installation is complete, please try running the `plot_stock_price_ytd.py` script again. Here is the script for your convenience:\n\n```python\n# filename: plot_stock_price_ytd.py\n\nimport yfinance as yf\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the tickers for Meta Platforms, Inc. and Tesla, Inc.\ntickers = [\"META\", \"TSLA\"]\n\n# Define the start and end dates for the YTD period\nstart_date = datetime(2024, 1, 1)\nend_date = datetime(2024, 2, 16)\n\n# Fetch historical data for both tickers\ndata = yf.download(tickers, start=start_date, end=end_date)['Close']\n\n# Normalize the data to 100 (percentage change) based on the first closing price\nnormalized_data = (data / data.iloc[0]) * 100\n\n# Plot the data\nplt.figure(figsize=(14, 7))\nfor ticker in tickers:\n    plt.plot(normalized_data.index, normalized_data[ticker], label=ticker)\n\n# Add titles and labels\nplt.title('Stock Price Change YTD')\nplt.xlabel('Date')\nplt.ylabel('Normalized Price (Base 100)')\nplt.legend()\n\n# Save the plot to a PNG file\nplt.savefig('stock_price_ytd.png')\n\n# Show the plot\nplt.show()\n```\n\nExecute the script after installing `matplotlib` to generate and save the chart.\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is sh)...\n\n>>>>>>>> EXECUTING CODE BLOCK 1 (inferred language is python)...\nrecipitent sending user_proxy It appears that the `matplotlib` library is not installed in your Python environment. To proceed, you need to install the `matplotlib` library. Please run the following command to install it:\n\n```sh\npip install matplotlib\n```\n\nAfter the installation is complete, please try running the `plot_stock_price_ytd.py` script again. Here is the script for your convenience:\n\n```python\n# filename: plot_stock_price_ytd.py\n\nimport yfinance as yf\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Define the tickers for Meta Platforms, Inc. and Tesla, Inc.\ntickers = [\"META\", \"TSLA\"]\n\n# Define the start and end dates for the YTD period\nstart_date = datetime(2024, 1, 1)\nend_date = datetime(2024, 2, 16)\n\n# Fetch historical data for both tickers\ndata = yf.download(tickers, start=start_date, end=end_date)['Close']\n\n# Normalize the data to 100 (percentage change) based on the first closing price\nnormalized_data = (data / data.iloc[0]) * 100\n\n# Plot the data\nplt.figure(figsize=(14, 7))\nfor ticker in tickers:\n    plt.plot(normalized_data.index, normalized_data[ticker], label=ticker)\n\n# Add titles and labels\nplt.title('Stock Price Change YTD')\nplt.xlabel('Date')\nplt.ylabel('Normalized Price (Base 100)')\nplt.legend()\n\n# Save the plot to a PNG file\nplt.savefig('stock_price_ytd.png')\n\n# Show the plot\nplt.show()\n```\n\nExecute the script after installing `matplotlib` to generate and save the chart. None\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nCollecting matplotlib\n  Downloading matplotlib-3.8.3-cp310-cp310-macosx_11_0_arm64.whl.metadata (5.8 kB)\nCollecting contourpy>=1.0.1 (from matplotlib)\n  Using cached contourpy-1.2.0-cp310-cp310-macosx_11_0_arm64.whl.metadata (5.8 kB)\nCollecting cycler>=0.10 (from matplotlib)\n  Using cached cycler-0.12.1-py3-none-any.whl.metadata (3.8 kB)\nCollecting fonttools>=4.22.0 (from matplotlib)\n  Downloading fonttools-4.49.0-cp310-cp310-macosx_10_9_universal2.whl.metadata (159 kB)\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 0.0/159.1 kB ? eta -:--:--\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.0/159.1 kB 1.0 MB/s eta 0:00:01\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501 153.6/159.1 kB 2.1 MB/s eta 0:00:01\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 159.1/159.1 kB 2.0 MB/s eta 0:00:00\nCollecting kiwisolver>=1.3.1 (from matplotlib)\n  Using cached kiwisolver-1.4.5-cp310-cp310-macosx_11_0_arm64.whl.metadata (6.4 kB)\nRequirement already satisfied: numpy<2,>=1.21 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from matplotlib) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from matplotlib) (23.2)\nCollecting pillow>=8 (from matplotlib)\n  Using cached pillow-10.2.0-cp310-cp310-macosx_11_0_arm64.whl.metadata (9.7 kB)\nCollecting pyparsing>=2.3.1 (from matplotlib)\n  Using cached pyparsing-3.1.1-py3-none-any.whl.metadata (5.1 kB)\nRequirement already satisfied: python-dateutil>=2.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: six>=1.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\nDownloading matplotlib-3.8.3-cp310-cp310-macosx_11_0_arm64.whl (7.5 MB)\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 0.0/7.5 MB ? eta -:--:--\n   \u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 0.3/7.5 MB 7.9 MB/s eta 0:00:01\n   \u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 0.9/7.5 MB 11.2 MB/s eta 0:00:01\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/7.5 MB 14.7 MB/s eta 0:00:01\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.1/7.5 MB 21.4 MB/s eta 0:00:01\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 5.8/7.5 MB 29.7 MB/s eta 0:00:01\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 7.5/7.5 MB 33.1 MB/s eta 0:00:00\nUsing cached contourpy-1.2.0-cp310-cp310-macosx_11_0_arm64.whl (242 kB)\nUsing cached cycler-0.12.1-py3-none-any.whl (8.3 kB)\nDownloading fonttools-4.49.0-cp310-cp310-macosx_10_9_universal2.whl (2.8 MB)\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 0.0/2.8 MB ? eta -:--:--\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.8/2.8 MB 81.0 MB/s eta 0:00:00\nUsing cached kiwisolver-1.4.5-cp310-cp310-macosx_11_0_arm64.whl (66 kB)\nUsing cached pillow-10.2.0-cp310-cp310-macosx_11_0_arm64.whl (3.3 MB)\nUsing cached pyparsing-3.1.1-py3-none-any.whl (103 kB)\nInstalling collected packages: pyparsing, pillow, kiwisolver, fonttools, cycler, contourpy, matplotlib\nSuccessfully installed contourpy-1.2.0 cycler-0.12.1 fonttools-4.49.0 kiwisolver-1.4.5 matplotlib-3.8.3 pillow-10.2.0 pyparsing-3.1.1\n\nFigure(1400x700)\n\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\nrecipitent sending assistant exitcode: 0 (execution succeeded)\nCode output: \nCollecting matplotlib\n  Downloading matplotlib-3.8.3-cp310-cp310-macosx_11_0_arm64.whl.metadata (5.8 kB)\nCollecting contourpy>=1.0.1 (from matplotlib)\n  Using cached contourpy-1.2.0-cp310-cp310-macosx_11_0_arm64.whl.metadata (5.8 kB)\nCollecting cycler>=0.10 (from matplotlib)\n  Using cached cycler-0.12.1-py3-none-any.whl.metadata (3.8 kB)\nCollecting fonttools>=4.22.0 (from matplotlib)\n  Downloading fonttools-4.49.0-cp310-cp310-macosx_10_9_universal2.whl.metadata (159 kB)\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 0.0/159.1 kB ? eta -:--:--\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.0/159.1 kB 1.0 MB/s eta 0:00:01\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501 153.6/159.1 kB 2.1 MB/s eta 0:00:01\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 159.1/159.1 kB 2.0 MB/s eta 0:00:00\nCollecting kiwisolver>=1.3.1 (from matplotlib)\n  Using cached kiwisolver-1.4.5-cp310-cp310-macosx_11_0_arm64.whl.metadata (6.4 kB)\nRequirement already satisfied: numpy<2,>=1.21 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from matplotlib) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from matplotlib) (23.2)\nCollecting pillow>=8 (from matplotlib)\n  Using cached pillow-10.2.0-cp310-cp310-macosx_11_0_arm64.whl.metadata (9.7 kB)\nCollecting pyparsing>=2.3.1 (from matplotlib)\n  Using cached pyparsing-3.1.1-py3-none-any.whl.metadata (5.1 kB)\nRequirement already satisfied: python-dateutil>=2.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: six>=1.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\nDownloading matplotlib-3.8.3-cp310-cp310-macosx_11_0_arm64.whl (7.5 MB)\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 0.0/7.5 MB ? eta -:--:--\n   \u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 0.3/7.5 MB 7.9 MB/s eta 0:00:01\n   \u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 0.9/7.5 MB 11.2 MB/s eta 0:00:01\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/7.5 MB 14.7 MB/s eta 0:00:01\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.1/7.5 MB 21.4 MB/s eta 0:00:01\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 5.8/7.5 MB 29.7 MB/s eta 0:00:01\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 7.5/7.5 MB 33.1 MB/s eta 0:00:00\nUsing cached contourpy-1.2.0-cp310-cp310-macosx_11_0_arm64.whl (242 kB)\nUsing cached cycler-0.12.1-py3-none-any.whl (8.3 kB)\nDownloading fonttools-4.49.0-cp310-cp310-macosx_10_9_universal2.whl (2.8 MB)\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 0.0/2.8 MB ? eta -:--:--\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.8/2.8 MB 81.0 MB/s eta 0:00:00\nUsing cached kiwisolver-1.4.5-cp310-cp310-macosx_11_0_arm64.whl (66 kB)\nUsing cached pillow-10.2.0-cp310-cp310-macosx_11_0_arm64.whl (3.3 MB)\nUsing cached pyparsing-3.1.1-py3-none-any.whl (103 kB)\nInstalling collected packages: pyparsing, pillow, kiwisolver, fonttools, cycler, contourpy, matplotlib\nSuccessfully installed contourpy-1.2.0 cycler-0.12.1 fonttools-4.49.0 kiwisolver-1.4.5 matplotlib-3.8.3 pillow-10.2.0 pyparsing-3.1.1\n\nFigure(1400x700)\n None\nassistant (to user_proxy):\n\nThe script has successfully executed, and the chart displaying the stock price change YTD for META and TESLA has been plotted and saved as `stock_price_ytd.png`.\n\nYou should now have the file `stock_price_ytd.png` in your current directory, which contains the chart of the YTD stock price changes for both companies.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\n"})}),"\n",(0,a.jsx)(n.p,{children:"Let\u2019s display the generated figure."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'try:\n    image = Image(filename="coding/stock_price_ytd.png")\n    display(image)\nexcept FileNotFoundError:\n    print("Image not found. Please check the file name and modify if necessary.")\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:t(1602).Z+"",width:"1400",height:"700"})}),"\n",(0,a.jsx)(n.h2,{id:"use-a-different-code-execution-environment",children:"Use a Different Code Execution Environment"}),"\n",(0,a.jsx)(n.p,{children:"The code execution happened in a separate process, so the plot is not\ndirectly displayed in the notebook. Is it possible to change the code\nexecution environment into IPython?"}),"\n",(0,a.jsxs)(n.p,{children:["Yes! In the following we demonstrate how to extend the ",(0,a.jsx)(n.code,{children:"UserProxyAgent"}),"\nto use a different code execution environment."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class IPythonUserProxyAgent(autogen.UserProxyAgent):\n    def __init__(self, name: str, **kwargs):\n        super().__init__(name, **kwargs)\n        self._ipython = get_ipython()\n\n    def generate_init_message(self, *args, **kwargs) -> Union[str, Dict]:\n        return (\n            super().generate_init_message(*args, **kwargs)\n            + """\nIf you suggest code, the code will be executed in IPython."""\n        )\n\n    def run_code(self, code, **kwargs):\n        result = self._ipython.run_cell("%%capture --no-display cap\\n" + code)\n        log = self._ipython.ev("cap.stdout")\n        log += self._ipython.ev("cap.stderr")\n        if result.result is not None:\n            log += str(result.result)\n        exitcode = 0 if result.success else 1\n        if result.error_before_exec is not None:\n            log += f"\\n{result.error_before_exec}"\n            exitcode = 1\n        if result.error_in_exec is not None:\n            log += f"\\n{result.error_in_exec}"\n            exitcode = 1\n        return exitcode, log, None\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The implementation overrides three functions in ",(0,a.jsx)(n.code,{children:"UserProxyAgent"}),": *\nconstructor. We get the ipython instance as the code execution\nenvironment. * ",(0,a.jsx)(n.code,{children:"generate_init_message"}),". We generate a modified initial\nmessage to send to the assistant agent, by adding the info that the\nexecution will be performed in IPython. * ",(0,a.jsx)(n.code,{children:"run_code"}),". We execute the\ncode with the ipython instance."]}),"\n",(0,a.jsxs)(n.p,{children:["With the new ",(0,a.jsx)(n.code,{children:"IPythonUserProxyAgent"}),", we are able to run the code within\nthe current notebook environment and display the plot directly."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'ipy_user = IPythonUserProxyAgent(\n    "ipython_user_proxy",\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=10,\n    is_termination_msg=lambda x: x.get("content", "").rstrip().endswith("TERMINATE")\n    or x.get("content", "").rstrip().endswith(\'"TERMINATE".\'),\n    code_execution_config={\n        "use_docker": False,  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n    },\n)\n# the assistant receives a message from the user, which contains the task description\nipy_user.initiate_chat(\n    assistant,\n    message="""Plot a chart of META and TESLA stock price gain YTD""",\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"ipython_user_proxy (to assistant):\n\nPlot a chart of META and TESLA stock price gain YTD\nIf you suggest code, the code will be executed in IPython.\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\nrecipitent sending assistant Plot a chart of META and TESLA stock price gain YTD\nIf you suggest code, the code will be executed in IPython. None\nassistant (to ipython_user_proxy):\n\nTo plot a chart of META (Facebook's parent company, Meta Platforms, Inc.) and TESLA (Tesla, Inc.) stock price gain year-to-date (YTD), we can use Python with libraries such as `pandas` for data manipulation and `matplotlib` or `plotly` for plotting. We will also use `yfinance` to fetch historical stock data.\n\nHere's the plan:\n1. Install the `yfinance` library if it's not already installed.\n2. Fetch the YTD stock price data for META and TESLA.\n3. Calculate the YTD gain for each stock.\n4. Plot the YTD gain on a chart.\n\nFirst, let's install `yfinance` and import the necessary libraries. Execute the following code:\n\n```python\n# Install yfinance if not already installed\n!pip install yfinance\n\nimport yfinance as yf\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Check if today's date is required or the last trading day\ntoday = datetime.today().strftime('%Y-%m-%d')\n\n# Fetch YTD stock data for META and TESLA\nmeta_data = yf.download('META', start='2023-01-01', end=today)\ntesla_data = yf.download('TSLA', start='2023-01-01', end=today)\n\n# Calculate the YTD gain for each stock\nmeta_ytd_gain = (meta_data['Close'] - meta_data['Close'].iloc[0]) / meta_data['Close'].iloc[0] * 100\ntesla_ytd_gain = (tesla_data['Close'] - tesla_data['Close'].iloc[0]) / tesla_data['Close'].iloc[0] * 100\n\n# Plot the YTD gain on a chart\nplt.figure(figsize=(14, 7))\nplt.plot(meta_ytd_gain.index, meta_ytd_gain, label='META YTD Gain %')\nplt.plot(tesla_ytd_gain.index, tesla_ytd_gain, label='TESLA YTD Gain %')\nplt.title('META vs TESLA Stock Price Gain YTD')\nplt.xlabel('Date')\nplt.ylabel('Gain %')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\nThis code will install `yfinance`, fetch the YTD stock data for META and TESLA, calculate the YTD gain, and plot it on a chart. Please execute the code in your IPython environment.\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nrecipitent sending ipython_user_proxy To plot a chart of META (Facebook's parent company, Meta Platforms, Inc.) and TESLA (Tesla, Inc.) stock price gain year-to-date (YTD), we can use Python with libraries such as `pandas` for data manipulation and `matplotlib` or `plotly` for plotting. We will also use `yfinance` to fetch historical stock data.\n\nHere's the plan:\n1. Install the `yfinance` library if it's not already installed.\n2. Fetch the YTD stock price data for META and TESLA.\n3. Calculate the YTD gain for each stock.\n4. Plot the YTD gain on a chart.\n\nFirst, let's install `yfinance` and import the necessary libraries. Execute the following code:\n\n```python\n# Install yfinance if not already installed\n!pip install yfinance\n\nimport yfinance as yf\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Check if today's date is required or the last trading day\ntoday = datetime.today().strftime('%Y-%m-%d')\n\n# Fetch YTD stock data for META and TESLA\nmeta_data = yf.download('META', start='2023-01-01', end=today)\ntesla_data = yf.download('TSLA', start='2023-01-01', end=today)\n\n# Calculate the YTD gain for each stock\nmeta_ytd_gain = (meta_data['Close'] - meta_data['Close'].iloc[0]) / meta_data['Close'].iloc[0] * 100\ntesla_ytd_gain = (tesla_data['Close'] - tesla_data['Close'].iloc[0]) / tesla_data['Close'].iloc[0] * 100\n\n# Plot the YTD gain on a chart\nplt.figure(figsize=(14, 7))\nplt.plot(meta_ytd_gain.index, meta_ytd_gain, label='META YTD Gain %')\nplt.plot(tesla_ytd_gain.index, tesla_ytd_gain, label='TESLA YTD Gain %')\nplt.title('META vs TESLA Stock Price Gain YTD')\nplt.xlabel('Date')\nplt.ylabel('Gain %')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\nThis code will install `yfinance`, fetch the YTD stock data for META and TESLA, calculate the YTD gain, and plot it on a chart. Please execute the code in your IPython environment. None\nipython_user_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nRequirement already satisfied: yfinance in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (0.2.36)\nRequirement already satisfied: pandas>=1.3.0 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.2.0)\nRequirement already satisfied: numpy>=1.16.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.26.4)\nRequirement already satisfied: requests>=2.31 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.31.0)\nRequirement already satisfied: multitasking>=0.0.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (0.0.11)\nRequirement already satisfied: lxml>=4.9.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (5.1.0)\nRequirement already satisfied: appdirs>=1.4.4 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.4.4)\nRequirement already satisfied: pytz>=2022.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2024.1)\nRequirement already satisfied: frozendict>=2.3.4 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.4.0)\nRequirement already satisfied: peewee>=3.16.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (3.17.1)\nRequirement already satisfied: beautifulsoup4>=4.11.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (4.12.3)\nRequirement already satisfied: html5lib>=1.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.1)\nRequirement already satisfied: soupsieve>1.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\nRequirement already satisfied: six>=1.9 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\nRequirement already satisfied: webencodings in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2.8.2)\nRequirement already satisfied: tzdata>=2022.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2024.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (2024.2.2)\n/Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages/yfinance/utils.py:775: FutureWarning: The 'unit' keyword in TimedeltaIndex construction is deprecated and will be removed in a future version. Use pd.to_timedelta instead.\n  df.index += _pd.TimedeltaIndex(dst_error_hours, 'h')\n[*********************100%%**********************]  1 of 1 completed\n/Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages/yfinance/utils.py:775: FutureWarning: The 'unit' keyword in TimedeltaIndex construction is deprecated and will be removed in a future version. Use pd.to_timedelta instead.\n  df.index += _pd.TimedeltaIndex(dst_error_hours, 'h')\n[*********************100%%**********************]  1 of 1 completed\n\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\nrecipitent sending assistant exitcode: 0 (execution succeeded)\nCode output: \nRequirement already satisfied: yfinance in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (0.2.36)\nRequirement already satisfied: pandas>=1.3.0 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.2.0)\nRequirement already satisfied: numpy>=1.16.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.26.4)\nRequirement already satisfied: requests>=2.31 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.31.0)\nRequirement already satisfied: multitasking>=0.0.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (0.0.11)\nRequirement already satisfied: lxml>=4.9.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (5.1.0)\nRequirement already satisfied: appdirs>=1.4.4 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.4.4)\nRequirement already satisfied: pytz>=2022.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2024.1)\nRequirement already satisfied: frozendict>=2.3.4 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.4.0)\nRequirement already satisfied: peewee>=3.16.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (3.17.1)\nRequirement already satisfied: beautifulsoup4>=4.11.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (4.12.3)\nRequirement already satisfied: html5lib>=1.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.1)\nRequirement already satisfied: soupsieve>1.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\nRequirement already satisfied: six>=1.9 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\nRequirement already satisfied: webencodings in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2.8.2)\nRequirement already satisfied: tzdata>=2022.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2024.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (2024.2.2)\n/Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages/yfinance/utils.py:775: FutureWarning: The 'unit' keyword in TimedeltaIndex construction is deprecated and will be removed in a future version. Use pd.to_timedelta instead.\n  df.index += _pd.TimedeltaIndex(dst_error_hours, 'h')\n[*********************100%%**********************]  1 of 1 completed\n/Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages/yfinance/utils.py:775: FutureWarning: The 'unit' keyword in TimedeltaIndex construction is deprecated and will be removed in a future version. Use pd.to_timedelta instead.\n  df.index += _pd.TimedeltaIndex(dst_error_hours, 'h')\n[*********************100%%**********************]  1 of 1 completed\n None\nassistant (to ipython_user_proxy):\n\nThe code has executed successfully, and the `yfinance` library has been used to fetch the YTD stock data for META and TESLA. The YTD gain for each stock has been calculated, and a chart should have been plotted to visualize the stock price gains.\n\nSince the code has been executed without any errors and the chart should have been displayed in your IPython environment, this completes the task.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\nself.reply_at_receive[sender]self.reply_at_receive[sender] True\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:t(7958).Z+"",width:"1176",height:"624"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"ChatResult(chat_history=[{'content': 'Plot a chart of META and TESLA stock price gain YTD\\nIf you suggest code, the code will be executed in IPython.', 'role': 'assistant'}, {'content': \"To plot a chart of META (Facebook's parent company, Meta Platforms, Inc.) and TESLA (Tesla, Inc.) stock price gain year-to-date (YTD), we can use Python with libraries such as `pandas` for data manipulation and `matplotlib` or `plotly` for plotting. We will also use `yfinance` to fetch historical stock data.\\n\\nHere's the plan:\\n1. Install the `yfinance` library if it's not already installed.\\n2. Fetch the YTD stock price data for META and TESLA.\\n3. Calculate the YTD gain for each stock.\\n4. Plot the YTD gain on a chart.\\n\\nFirst, let's install `yfinance` and import the necessary libraries. Execute the following code:\\n\\n```python\\n# Install yfinance if not already installed\\n!pip install yfinance\\n\\nimport yfinance as yf\\nimport pandas as pd\\nimport matplotlib.pyplot as plt\\nfrom datetime import datetime\\n\\n# Check if today's date is required or the last trading day\\ntoday = datetime.today().strftime('%Y-%m-%d')\\n\\n# Fetch YTD stock data for META and TESLA\\nmeta_data = yf.download('META', start='2023-01-01', end=today)\\ntesla_data = yf.download('TSLA', start='2023-01-01', end=today)\\n\\n# Calculate the YTD gain for each stock\\nmeta_ytd_gain = (meta_data['Close'] - meta_data['Close'].iloc[0]) / meta_data['Close'].iloc[0] * 100\\ntesla_ytd_gain = (tesla_data['Close'] - tesla_data['Close'].iloc[0]) / tesla_data['Close'].iloc[0] * 100\\n\\n# Plot the YTD gain on a chart\\nplt.figure(figsize=(14, 7))\\nplt.plot(meta_ytd_gain.index, meta_ytd_gain, label='META YTD Gain %')\\nplt.plot(tesla_ytd_gain.index, tesla_ytd_gain, label='TESLA YTD Gain %')\\nplt.title('META vs TESLA Stock Price Gain YTD')\\nplt.xlabel('Date')\\nplt.ylabel('Gain %')\\nplt.legend()\\nplt.grid(True)\\nplt.show()\\n```\\n\\nThis code will install `yfinance`, fetch the YTD stock data for META and TESLA, calculate the YTD gain, and plot it on a chart. Please execute the code in your IPython environment.\", 'role': 'user'}, {'content': \"exitcode: 0 (execution succeeded)\\nCode output: \\nRequirement already satisfied: yfinance in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (0.2.36)\\r\\nRequirement already satisfied: pandas>=1.3.0 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.2.0)\\r\\nRequirement already satisfied: numpy>=1.16.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.26.4)\\r\\nRequirement already satisfied: requests>=2.31 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.31.0)\\r\\nRequirement already satisfied: multitasking>=0.0.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (0.0.11)\\r\\nRequirement already satisfied: lxml>=4.9.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (5.1.0)\\r\\nRequirement already satisfied: appdirs>=1.4.4 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.4.4)\\r\\nRequirement already satisfied: pytz>=2022.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2024.1)\\r\\nRequirement already satisfied: frozendict>=2.3.4 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (2.4.0)\\r\\nRequirement already satisfied: peewee>=3.16.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (3.17.1)\\r\\nRequirement already satisfied: beautifulsoup4>=4.11.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (4.12.3)\\r\\nRequirement already satisfied: html5lib>=1.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from yfinance) (1.1)\\r\\nRequirement already satisfied: soupsieve>1.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\\r\\nRequirement already satisfied: six>=1.9 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\\r\\nRequirement already satisfied: webencodings in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\\r\\nRequirement already satisfied: python-dateutil>=2.8.2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2.8.2)\\r\\nRequirement already satisfied: tzdata>=2022.7 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2024.1)\\r\\nRequirement already satisfied: charset-normalizer<4,>=2 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.3.2)\\r\\nRequirement already satisfied: idna<4,>=2.5 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.6)\\r\\nRequirement already satisfied: urllib3<3,>=1.21.1 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (1.26.18)\\r\\nRequirement already satisfied: certifi>=2017.4.17 in /Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages (from requests>=2.31->yfinance) (2024.2.2)\\r\\n/Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages/yfinance/utils.py:775: FutureWarning: The 'unit' keyword in TimedeltaIndex construction is deprecated and will be removed in a future version. Use pd.to_timedelta instead.\\n  df.index += _pd.TimedeltaIndex(dst_error_hours, 'h')\\n\\r[*********************100%%**********************]  1 of 1 completed\\n/Users/qingyunwu/miniconda3/envs/ag/lib/python3.10/site-packages/yfinance/utils.py:775: FutureWarning: The 'unit' keyword in TimedeltaIndex construction is deprecated and will be removed in a future version. Use pd.to_timedelta instead.\\n  df.index += _pd.TimedeltaIndex(dst_error_hours, 'h')\\n\\r[*********************100%%**********************]  1 of 1 completed\\n\", 'role': 'assistant'}, {'content': 'The code has executed successfully, and the `yfinance` library has been used to fetch the YTD stock data for META and TESLA. The YTD gain for each stock has been calculated, and a chart should have been plotted to visualize the stock price gains.\\n\\nSince the code has been executed without any errors and the chart should have been displayed in your IPython environment, this completes the task.\\n\\nTERMINATE', 'role': 'user'}], summary='The code has executed successfully, and the `yfinance` library has been used to fetch the YTD stock data for META and TESLA. The YTD gain for each stock has been calculated, and a chart should have been plotted to visualize the stock price gains.\\n\\nSince the code has been executed without any errors and the chart should have been displayed in your IPython environment, this completes the task.\\n\\n', cost=({'total_cost': 0.6870599999999999, 'gpt-4': {'cost': 0.6870599999999999, 'prompt_tokens': 18324, 'completion_tokens': 2289, 'total_tokens': 20613}}, {'total_cost': 0.6154499999999999, 'gpt-4': {'cost': 0.6154499999999999, 'prompt_tokens': 17333, 'completion_tokens': 1591, 'total_tokens': 18924}}), human_input=[])\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},971:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>d,toc:()=>l});var a=t(5893),o=t(1151);const i={tags:["code generation","function call","async"],description:"Learn how to implement both synchronous and asynchronous function calls using AssistantAgent and UserProxyAgent in AutoGen, with examples of their application in individual and group chat settings for task execution with language models.\n",source_notebook:"/notebook/agentchat_function_call_async.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_function_call_async.ipynb",title:"Task Solving with Provided Tools as Functions (Asynchronous Function Calls)"},s="Task Solving with Provided Tools as Functions (Asynchronous Function Calls)",r={id:"notebooks/agentchat_function_call_async",title:"Task Solving with Provided Tools as Functions (Asynchronous Function Calls)",description:"Learn how to implement both synchronous and asynchronous function calls using AssistantAgent and UserProxyAgent in AutoGen, with examples of their application in individual and group chat settings for task execution with language models.\n",source:"@site/docs/notebooks/agentchat_function_call_async.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_function_call_async",permalink:"/autogen/docs/notebooks/agentchat_function_call_async",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_function_call_async.ipynb",tags:[{label:"code generation",permalink:"/autogen/docs/tags/code-generation"},{label:"function call",permalink:"/autogen/docs/tags/function-call"},{label:"async",permalink:"/autogen/docs/tags/async"}],version:"current",frontMatter:{tags:["code generation","function call","async"],description:"Learn how to implement both synchronous and asynchronous function calls using AssistantAgent and UserProxyAgent in AutoGen, with examples of their application in individual and group chat settings for task execution with language models.\n",source_notebook:"/notebook/agentchat_function_call_async.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_function_call_async.ipynb",title:"Task Solving with Provided Tools as Functions (Asynchronous Function Calls)"},sidebar:"notebooksSidebar",previous:{title:"Task Solving with Code Generation, Execution and Debugging",permalink:"/autogen/docs/notebooks/agentchat_auto_feedback_from_code_execution"},next:{title:"Group Chat",permalink:"/autogen/docs/notebooks/agentchat_groupchat"}},c={},l=[{value:"Making Async and Sync Function Calls",id:"making-async-and-sync-function-calls",level:2}],d=['\x3c!--\ntags: ["code generation", "function call", "async"]\ndescription: |\n    Learn how to implement both synchronous and asynchronous function calls using AssistantAgent and UserProxyAgent in AutoGen, with examples of their application in individual and group chat settings for task execution with language models.\n--\x3e'];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[0]}}),"\n",(0,a.jsx)(n.h1,{id:"task-solving-with-provided-tools-as-functions-asynchronous-function-calls",children:"Task Solving with Provided Tools as Functions (Asynchronous Function Calls)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_function_call_async.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_function_call_async.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["AutoGen offers conversable agents powered by LLM, tool, or human, which\ncan be used to perform tasks collectively via automated chat. This\nframework allows tool use and human participation through multi-agent\nconversation. Please find documentation about this feature\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/Use-Cases/agent_chat",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["In this notebook, we demonstrate how to use ",(0,a.jsx)(n.code,{children:"AssistantAgent"})," and\n",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," to make function calls with the new feature of OpenAI\nmodels (in model version 0613). A specified prompt and function configs\nmust be passed to ",(0,a.jsx)(n.code,{children:"AssistantAgent"})," to initialize the agent. The\ncorresponding functions must be passed to ",(0,a.jsx)(n.code,{children:"UserProxyAgent"}),", which will\nexecute any function calls made by ",(0,a.jsx)(n.code,{children:"AssistantAgent"}),". Besides this\nrequirement of matching descriptions with functions, we recommend\nchecking the system message in the ",(0,a.jsx)(n.code,{children:"AssistantAgent"})," to ensure the\ninstructions align with the function call descriptions."]}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsxs)(n.p,{children:["Install ",(0,a.jsx)(n.code,{children:"pyautogen"}),":"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import time\n\nfrom typing_extensions import Annotated\n\nimport autogen\nfrom autogen.cache import Cache\n\nconfig_list = autogen.config_list_from_json(env_or_file="OAI_CONFIG_LIST")\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about configuring LLMs for agents ",(0,a.jsx)(n.a,{href:"/docs/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"making-async-and-sync-function-calls",children:"Making Async and Sync Function Calls"}),"\n",(0,a.jsxs)(n.p,{children:["In this example, we demonstrate function call execution with\n",(0,a.jsx)(n.code,{children:"AssistantAgent"})," and ",(0,a.jsx)(n.code,{children:"UserProxyAgent"}),". With the default system prompt of\n",(0,a.jsx)(n.code,{children:"AssistantAgent"}),", we allow the LLM assistant to perform tasks with code,\nand the ",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," would extract code blocks from the LLM response\nand execute them. With the new \u201cfunction_call\u201d feature, we define\nfunctions and specify the description of the function in the OpenAI\nconfig for the ",(0,a.jsx)(n.code,{children:"AssistantAgent"}),". Then we register the functions in\n",(0,a.jsx)(n.code,{children:"UserProxyAgent"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'llm_config = {\n    "config_list": config_list,\n}\n\ncoder = autogen.AssistantAgent(\n    name="chatbot",\n    system_message="For coding tasks, only use the functions you have been provided with. You have a stopwatch and a timer, these tools can and should be used in parallel. Reply TERMINATE when the task is done.",\n    llm_config=llm_config,\n)\n\n# create a UserProxyAgent instance named "user_proxy"\nuser_proxy = autogen.UserProxyAgent(\n    name="user_proxy",\n    system_message="A proxy for the user for executing code.",\n    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=10,\n    code_execution_config={"work_dir": "coding"},\n)\n\n# define functions according to the function description\n\n# An example async function registered using register_for_llm and register_for_execution decorators\n\n\n@user_proxy.register_for_execution()\n@coder.register_for_llm(description="create a timer for N seconds")\nasync def timer(num_seconds: Annotated[str, "Number of seconds in the timer."]) -> str:\n    for i in range(int(num_seconds)):\n        time.sleep(1)\n        # should print to stdout\n    return "Timer is done!"\n\n\n# An example sync function registered using register_function\ndef stopwatch(num_seconds: Annotated[str, "Number of seconds in the stopwatch."]) -> str:\n    for i in range(int(num_seconds)):\n        time.sleep(1)\n    return "Stopwatch is done!"\n\n\nautogen.agentchat.register_function(\n    stopwatch,\n    caller=coder,\n    executor=user_proxy,\n    description="create a stopwatch for N seconds",\n)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Start the conversation. ",(0,a.jsx)(n.code,{children:"await"})," is used to pause and resume code\nexecution for async IO operations. Without ",(0,a.jsx)(n.code,{children:"await"}),", an async function\nreturns a coroutine object but doesn\u2019t execute the function. With\n",(0,a.jsx)(n.code,{children:"await"}),", the async function is executed and the current function is\npaused until the awaited function returns a result."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'with Cache.disk() as cache:\n    await user_proxy.a_initiate_chat(  # noqa: F704\n        coder,\n        message="Create a timer for 5 seconds and then a stopwatch for 5 seconds.",\n        cache=cache,\n    )\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'user_proxy (to chatbot):\n\nCreate a timer for 5 seconds and then a stopwatch for 5 seconds.\n\n--------------------------------------------------------------------------------\nchatbot (to user_proxy):\n\n***** Suggested tool Call (call_h6324df0CdGPDNjPO8GrnAQJ): timer *****\nArguments: \n{"num_seconds":"5"}\n**********************************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING ASYNC FUNCTION timer...\nuser_proxy (to chatbot):\n\nuser_proxy (to chatbot):\n\n***** Response from calling tool "call_h6324df0CdGPDNjPO8GrnAQJ" *****\nTimer is done!\n**********************************************************************\n\n--------------------------------------------------------------------------------\nchatbot (to user_proxy):\n\n***** Suggested tool Call (call_7SzbQxI8Nsl6dPQtScoSGPAu): stopwatch *****\nArguments: \n{"num_seconds":"5"}\n**************************************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING ASYNC FUNCTION stopwatch...\nuser_proxy (to chatbot):\n\nuser_proxy (to chatbot):\n\n***** Response from calling tool "call_7SzbQxI8Nsl6dPQtScoSGPAu" *****\nStopwatch is done!\n**********************************************************************\n\n--------------------------------------------------------------------------------\nchatbot (to user_proxy):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(n.h1,{id:"async-function-call-with-group-chat",children:"Async Function Call with Group Chat"}),"\n",(0,a.jsx)(n.p,{children:"Sync and async can be used in topologies beyond two agents. Below, we\nshow this feature for a group chat."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'markdownagent = autogen.AssistantAgent(\n    name="Markdown_agent",\n    system_message="Respond in markdown only",\n    llm_config=llm_config,\n)\n\n# Add a function for robust group chat termination\n\n\n@user_proxy.register_for_execution()\n@markdownagent.register_for_llm()\n@coder.register_for_llm(description="terminate the group chat")\ndef terminate_group_chat(message: Annotated[str, "Message to be sent to the group chat."]) -> str:\n    return f"[GROUPCHAT_TERMINATE] {message}"\n\n\ngroupchat = autogen.GroupChat(agents=[user_proxy, coder, markdownagent], messages=[], max_round=12)\n\nllm_config_manager = llm_config.copy()\nllm_config_manager.pop("functions", None)\n\nmanager = autogen.GroupChatManager(\n    groupchat=groupchat,\n    llm_config=llm_config_manager,\n    is_termination_msg=lambda x: "GROUPCHAT_TERMINATE" in x.get("content", ""),\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:"Finally, we initialize the chat that would use the functions defined\nabove:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'message = """\n1) Create a timer and a stopwatch for 5 seconds each in parallel.\n2) Pretty print the result as md.\n3) when 1 and 2 are done, terminate the group chat\n"""\n\nwith Cache.disk() as cache:\n    await user_proxy.a_initiate_chat(  # noqa: F704\n        manager,\n        message=message,\n        cache=cache,\n    )\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'user_proxy (to chat_manager):\n\n\n1) Create a timer and a stopwatch for 5 seconds each in parallel.\n2) Pretty print the result as md.\n3) when 1 and 2 are done, terminate the group chat\n\n\n--------------------------------------------------------------------------------\nchatbot (to chat_manager):\n\n***** Suggested tool Call (call_qlS3QkcY1NkfgpKtCoR6oGo7): timer *****\nArguments: \n{"num_seconds": "5"}\n**********************************************************************\n***** Suggested tool Call (call_TEHlvMgCp0S3RzBbVsVPXWeL): stopwatch *****\nArguments: \n{"num_seconds": "5"}\n**************************************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING ASYNC FUNCTION timer...\n\n>>>>>>>> EXECUTING ASYNC FUNCTION stopwatch...\nuser_proxy (to chat_manager):\n\nuser_proxy (to chat_manager):\n\n***** Response from calling tool "call_qlS3QkcY1NkfgpKtCoR6oGo7" *****\nTimer is done!\n**********************************************************************\n\n--------------------------------------------------------------------------------\nuser_proxy (to chat_manager):\n\n***** Response from calling tool "call_TEHlvMgCp0S3RzBbVsVPXWeL" *****\nStopwatch is done!\n**********************************************************************\n\n--------------------------------------------------------------------------------\nMarkdown_agent (to chat_manager):\n\n***** Suggested tool Call (call_JuQwvj4FigfvGyBeTMglY2ee): terminate_group_chat *****\nArguments: \n{"message":"Both timer and stopwatch have completed their countdowns. The group chat is now being terminated."}\n*************************************************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING ASYNC FUNCTION terminate_group_chat...\nuser_proxy (to chat_manager):\n\nuser_proxy (to chat_manager):\n\n***** Response from calling tool "call_JuQwvj4FigfvGyBeTMglY2ee" *****\n[GROUPCHAT_TERMINATE] Both timer and stopwatch have completed their countdowns. The group chat is now being terminated.\n**********************************************************************\n\n--------------------------------------------------------------------------------\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5108:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>d,toc:()=>l});var a=t(5893),o=t(1151);const i={tags:["orchestration","group chat"],description:"Explore the utilization of large language models in automated group chat scenarios, where agents perform tasks collectively, demonstrating how they can be configured, interact with each other, and retrieve specific information from external resources.\n",source_notebook:"/notebook/agentchat_groupchat.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat.ipynb",title:"Group Chat"},s="Group Chat",r={id:"notebooks/agentchat_groupchat",title:"Group Chat",description:"Explore the utilization of large language models in automated group chat scenarios, where agents perform tasks collectively, demonstrating how they can be configured, interact with each other, and retrieve specific information from external resources.\n",source:"@site/docs/notebooks/agentchat_groupchat.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_groupchat",permalink:"/autogen/docs/notebooks/agentchat_groupchat",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat.ipynb",tags:[{label:"orchestration",permalink:"/autogen/docs/tags/orchestration"},{label:"group chat",permalink:"/autogen/docs/tags/group-chat"}],version:"current",frontMatter:{tags:["orchestration","group chat"],description:"Explore the utilization of large language models in automated group chat scenarios, where agents perform tasks collectively, demonstrating how they can be configured, interact with each other, and retrieve specific information from external resources.\n",source_notebook:"/notebook/agentchat_groupchat.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat.ipynb",title:"Group Chat"},sidebar:"notebooksSidebar",previous:{title:"Task Solving with Provided Tools as Functions (Asynchronous Function Calls)",permalink:"/autogen/docs/notebooks/agentchat_function_call_async"},next:{title:"Group Chat with Retrieval Augmented Generation",permalink:"/autogen/docs/notebooks/agentchat_groupchat_RAG"}},c={},l=[{value:"Set your API Endpoint",id:"set-your-api-endpoint",level:2},{value:"Construct Agents",id:"construct-agents",level:2},{value:"Start Chat",id:"start-chat",level:2}],d=['\x3c!--\ntags: ["orchestration", "group chat"]\ndescription: |\n    Explore the utilization of large language models in automated group chat scenarios, where agents perform tasks collectively, demonstrating how they can be configured, interact with each other, and retrieve specific information from external resources.\n--\x3e'];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[0]}}),"\n",(0,a.jsx)(n.h1,{id:"group-chat",children:"Group Chat"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_groupchat.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_groupchat.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["AutoGen offers conversable agents powered by LLM, tool or human, which\ncan be used to perform tasks collectively via automated chat. This\nframework allows tool use and human participation through multi-agent\nconversation. Please find documentation about this feature\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/Use-Cases/agent_chat",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["This notebook is modified based on\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/FLAML/blob/4ea686af5c3e8ff24d9076a7a626c8b28ab5b1d7/notebook/autogen_multiagent_roleplay_chat.ipynb",children:"https://github.com/microsoft/FLAML/blob/4ea686af5c3e8ff24d9076a7a626c8b28ab5b1d7/notebook/autogen_multiagent_roleplay_chat.ipynb"})]}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsxs)(n.p,{children:["Install ",(0,a.jsx)(n.code,{children:"pyautogen"}),":"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,a.jsx)(n.h2,{id:"set-your-api-endpoint",children:"Set your API Endpoint"}),"\n",(0,a.jsxs)(n.p,{children:["The\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/reference/oai/openai_utils#config_list_from_json",children:(0,a.jsx)(n.code,{children:"config_list_from_json"})}),"\nfunction loads a list of configurations from an environment variable or\na json file."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import autogen\n\nconfig_list = autogen.config_list_from_json(\n    "OAI_CONFIG_LIST",\n    filter_dict={\n        "model": ["gpt-4", "gpt-4-0314", "gpt4", "gpt-4-32k", "gpt-4-32k-0314", "gpt-4-32k-v0314"],\n    },\n)\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about configuring LLMs for agents ",(0,a.jsx)(n.a,{href:"/docs/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"construct-agents",children:"Construct Agents"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'llm_config = {"config_list": config_list, "cache_seed": 42}\nuser_proxy = autogen.UserProxyAgent(\n    name="User_proxy",\n    system_message="A human admin.",\n    code_execution_config={\n        "last_n_messages": 2,\n        "work_dir": "groupchat",\n        "use_docker": False,\n    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n    human_input_mode="TERMINATE",\n)\ncoder = autogen.AssistantAgent(\n    name="Coder",\n    llm_config=llm_config,\n)\npm = autogen.AssistantAgent(\n    name="Product_manager",\n    system_message="Creative in software product ideas.",\n    llm_config=llm_config,\n)\ngroupchat = autogen.GroupChat(agents=[user_proxy, coder, pm], messages=[], max_round=12)\nmanager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"start-chat",children:"Start Chat"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'user_proxy.initiate_chat(\n    manager, message="Find a latest paper about gpt-4 on arxiv and find its potential applications in software."\n)\n# type exit to terminate the chat\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'User_proxy (to chat_manager):\n\nFind a latest paper about gpt-4 on arxiv and find its potential applications in software.\n\n--------------------------------------------------------------------------------\nCoder (to chat_manager):\n\nTo find the latest paper about GPT-4 on arxiv, I\'ll provide you with a Python code that fetches the most recent papers from the arxiv API and filters the results to get the most relevant paper related to GPT-4. After fetching the paper, I\'ll extract the information for potential applications in software. Please execute the following Python code:\n\n```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\n\ndef fetch_arxiv_papers(query):\n    base_url = "http://export.arxiv.org/api/query?"\n    search_query = "all:" + query\n    response = requests.get(base_url, params={"search_query": search_query, "sortBy": "submittedDate", "sortOrder": "descending"})\n    return BeautifulSoup(response.content, "xml")\n\ndef find_gpt4_paper():\n    papers = fetch_arxiv_papers("gpt-4")\n    for entry in papers.find_all("entry"):\n        title = entry.title.text.strip()\n        summary = entry.summary.text.strip()\n        if "gpt-4" in title.lower() or "gpt-4" in summary.lower():\n            return {"title": title, "summary": summary}\n\ngpt4_paper = find_gpt4_paper()\nif gpt4_paper:\n    print("Title:", gpt4_paper["title"])\n    print("Summary:", gpt4_paper["summary"])\nelse:\n    print("No recent GPT-4 papers found.")\n```\n\nOnce we have the paper details, I\'ll analyze the summary to identify potential applications in software development.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser_proxy (to chat_manager):\n\nexitcode: 0 (execution succeeded)\nCode output: \nTitle: FIMO: A Challenge Formal Dataset for Automated Theorem Proving\nSummary: We present FIMO, an innovative dataset comprising formal mathematical problem\nstatements sourced from the International Mathematical Olympiad (IMO)\nShortlisted Problems. Designed to facilitate advanced automated theorem proving\nat the IMO level, FIMO is currently tailored for the Lean formal language. It\ncomprises 149 formal problem statements, accompanied by both informal problem\ndescriptions and their corresponding LaTeX-based informal proofs. Through\ninitial experiments involving GPT-4, our findings underscore the existing\nlimitations in current methodologies, indicating a substantial journey ahead\nbefore achieving satisfactory IMO-level automated theorem proving outcomes.\n\n\n--------------------------------------------------------------------------------\nProduct_manager (to chat_manager):\n\nBased on the paper titled "FIMO: A Challenge Formal Dataset for Automated Theorem Proving" and its summary, the potential applications of GPT-4 in software development can be related to the field of automated theorem proving.\n\n1. **Automated theorem proving**: GPT-4 can be utilized in the development of automated theorem proving software that attempts to prove complex mathematical problems taken from International Mathematical Olympiad (IMO) or other challenging sources. By fine-tuning GPT-4 with a dataset like FIMO consisting of formal mathematical problems, the model can potentially better understand the problem statements and generate appropriate proofs.\n\n2. **Mathematical problem-solving assistants**: Software tools can be developed using GPT-4 to guide users in solving complex mathematical problems. The AI model can be integrated into educational platforms, online math tutoring services, or even standalone tools to help make solving problems easier and faster for students and professionals alike.\n\n3. **Formal language translation**: GPT-4 can potentially be integrated into software for translating between formal languages, assisting in the understanding and comparison of various formal systems. This would be especially useful in research communities employing different formal languages and wanting to share ideas and results.\n\n4. **Mathematical proof checking**: GPT-4 can be employed in proof-checking software to identify and correct inconsistencies. By improving the correctness of proofs, this application would ultimately help users save time and contribute to the overall quality of mathematical research.\n\nPlease note that this paper highlights the current limitations of GPT-4 in the context of IMO-level theorem proving. Nevertheless, these potential applications suggest directions for further research and software development as the model and related techniques continue to improve.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nUser_proxy (to chat_manager):\n\n\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nUser_proxy (to chat_manager):\n\n\n\n--------------------------------------------------------------------------------\nCoder (to chat_manager):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5551:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>d,toc:()=>l});var a=t(5893),o=t(1151);const i={tags:["group chat","orchestration","RAG"],description:"Implement and manage a multi-agent chat system using AutoGen, where AI assistants retrieve information, generate code, and interact collaboratively to solve complex tasks, especially in areas not covered by their training data.\n",source_notebook:"/notebook/agentchat_groupchat_RAG.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat_RAG.ipynb",title:"Group Chat with Retrieval Augmented Generation"},s="Group Chat with Retrieval Augmented Generation",r={id:"notebooks/agentchat_groupchat_RAG",title:"Group Chat with Retrieval Augmented Generation",description:"Implement and manage a multi-agent chat system using AutoGen, where AI assistants retrieve information, generate code, and interact collaboratively to solve complex tasks, especially in areas not covered by their training data.\n",source:"@site/docs/notebooks/agentchat_groupchat_RAG.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_groupchat_RAG",permalink:"/autogen/docs/notebooks/agentchat_groupchat_RAG",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat_RAG.ipynb",tags:[{label:"group chat",permalink:"/autogen/docs/tags/group-chat"},{label:"orchestration",permalink:"/autogen/docs/tags/orchestration"},{label:"RAG",permalink:"/autogen/docs/tags/rag"}],version:"current",frontMatter:{tags:["group chat","orchestration","RAG"],description:"Implement and manage a multi-agent chat system using AutoGen, where AI assistants retrieve information, generate code, and interact collaboratively to solve complex tasks, especially in areas not covered by their training data.\n",source_notebook:"/notebook/agentchat_groupchat_RAG.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat_RAG.ipynb",title:"Group Chat with Retrieval Augmented Generation"},sidebar:"notebooksSidebar",previous:{title:"Group Chat",permalink:"/autogen/docs/notebooks/agentchat_groupchat"},next:{title:"FSM - User can input speaker transition contraints. {#fsm---user-can-input-speaker-transition-contraints.}",permalink:"/autogen/docs/notebooks/agentchat_groupchat_finite_state_machine"}},c={},l=[{value:"Set your API Endpoint",id:"set-your-api-endpoint",level:2},{value:"Construct Agents",id:"construct-agents",level:2},{value:"Start Chat",id:"start-chat",level:2},{value:"UserProxyAgent doesn\u2019t get the correct code",id:"userproxyagent-doesnt-get-the-correct-code",level:3},{value:"RetrieveUserProxyAgent get the correct code",id:"retrieveuserproxyagent-get-the-correct-code",level:3},{value:"Call RetrieveUserProxyAgent while init chat with another user proxy agent",id:"call-retrieveuserproxyagent-while-init-chat-with-another-user-proxy-agent",level:3}],d=['\x3c!--\ntags: ["group chat", "orchestration", "RAG"]\ndescription: |\n    Implement and manage a multi-agent chat system using AutoGen, where AI assistants retrieve information, generate code, and interact collaboratively to solve complex tasks, especially in areas not covered by their training data.\n--\x3e'];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[0]}}),"\n",(0,a.jsx)(n.h1,{id:"group-chat-with-retrieval-augmented-generation",children:"Group Chat with Retrieval Augmented Generation"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_groupchat_RAG.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_groupchat_RAG.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["AutoGen supports conversable agents powered by LLMs, tools, or humans,\nperforming tasks collectively via automated chat. This framework allows\ntool use and human participation through multi-agent conversation.\nPlease find documentation about this feature\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/Use-Cases/agent_chat",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsx)(n.p,{children:"Some extra dependencies are needed for this notebook, which can be installed via pip:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen[retrievechat]\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,a.jsx)(n.h2,{id:"set-your-api-endpoint",children:"Set your API Endpoint"}),"\n",(0,a.jsxs)(n.p,{children:["The\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/reference/oai/openai_utils#config_list_from_json",children:(0,a.jsx)(n.code,{children:"config_list_from_json"})}),"\nfunction loads a list of configurations from an environment variable or\na json file."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typing_extensions import Annotated\nimport chromadb\n\nimport autogen\nfrom autogen import AssistantAgent\nfrom autogen.agentchat.contrib.retrieve_user_proxy_agent import RetrieveUserProxyAgent\n\nconfig_list = autogen.config_list_from_json("OAI_CONFIG_LIST")\n\nprint("LLM models: ", [config_list[i]["model"] for i in range(len(config_list))])\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"LLM models:  ['gpt-35-turbo', 'gpt-35-turbo-0613']\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about configuring LLMs for agents ",(0,a.jsx)(n.a,{href:"/docs/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"construct-agents",children:"Construct Agents"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'llm_config = {\n    "timeout": 60,\n    "temperature": 0,\n    "config_list": config_list,\n}\n\n\ndef termination_msg(x):\n    return isinstance(x, dict) and "TERMINATE" == str(x.get("content", ""))[-9:].upper()\n\n\nboss = autogen.UserProxyAgent(\n    name="Boss",\n    is_termination_msg=termination_msg,\n    human_input_mode="NEVER",\n    code_execution_config=False,  # we don\'t want to execute code in this case.\n    default_auto_reply="Reply `TERMINATE` if the task is done.",\n    description="The boss who ask questions and give tasks.",\n)\n\nboss_aid = RetrieveUserProxyAgent(\n    name="Boss_Assistant",\n    is_termination_msg=termination_msg,\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=3,\n    retrieve_config={\n        "task": "code",\n        "docs_path": "https://raw.githubusercontent.com/microsoft/FLAML/main/website/docs/Examples/Integrate%20-%20Spark.md",\n        "chunk_token_size": 1000,\n        "model": config_list[0]["model"],\n        "client": chromadb.PersistentClient(path="/tmp/chromadb"),\n        "collection_name": "groupchat",\n        "get_or_create": True,\n    },\n    code_execution_config=False,  # we don\'t want to execute code in this case.\n    description="Assistant who has extra content retrieval power for solving difficult problems.",\n)\n\ncoder = AssistantAgent(\n    name="Senior_Python_Engineer",\n    is_termination_msg=termination_msg,\n    system_message="You are a senior python engineer, you provide python code to answer questions. Reply `TERMINATE` in the end when everything is done.",\n    llm_config=llm_config,\n    description="Senior Python Engineer who can write code to solve problems and answer questions.",\n)\n\npm = autogen.AssistantAgent(\n    name="Product_Manager",\n    is_termination_msg=termination_msg,\n    system_message="You are a product manager. Reply `TERMINATE` in the end when everything is done.",\n    llm_config=llm_config,\n    description="Product Manager who can design and plan the project.",\n)\n\nreviewer = autogen.AssistantAgent(\n    name="Code_Reviewer",\n    is_termination_msg=termination_msg,\n    system_message="You are a code reviewer. Reply `TERMINATE` in the end when everything is done.",\n    llm_config=llm_config,\n    description="Code Reviewer who can review the code.",\n)\n\nPROBLEM = "How to use spark for parallel training in FLAML? Give me sample code."\n\n\ndef _reset_agents():\n    boss.reset()\n    boss_aid.reset()\n    coder.reset()\n    pm.reset()\n    reviewer.reset()\n\n\ndef rag_chat():\n    _reset_agents()\n    groupchat = autogen.GroupChat(\n        agents=[boss_aid, pm, coder, reviewer], messages=[], max_round=12, speaker_selection_method="round_robin"\n    )\n    manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)\n\n    # Start chatting with boss_aid as this is the user proxy agent.\n    boss_aid.initiate_chat(\n        manager,\n        problem=PROBLEM,\n        n_results=3,\n    )\n\n\ndef norag_chat():\n    _reset_agents()\n    groupchat = autogen.GroupChat(\n        agents=[boss, pm, coder, reviewer],\n        messages=[],\n        max_round=12,\n        speaker_selection_method="auto",\n        allow_repeat_speaker=False,\n    )\n    manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)\n\n    # Start chatting with the boss as this is the user proxy agent.\n    boss.initiate_chat(\n        manager,\n        message=PROBLEM,\n    )\n\n\ndef call_rag_chat():\n    _reset_agents()\n\n    # In this case, we will have multiple user proxy agents and we don\'t initiate the chat\n    # with RAG user proxy agent.\n    # In order to use RAG user proxy agent, we need to wrap RAG agents in a function and call\n    # it from other agents.\n    def retrieve_content(\n        message: Annotated[\n            str,\n            "Refined message which keeps the original meaning and can be used to retrieve content for code generation and question answering.",\n        ],\n        n_results: Annotated[int, "number of results"] = 3,\n    ) -> str:\n        boss_aid.n_results = n_results  # Set the number of results to be retrieved.\n        # Check if we need to update the context.\n        update_context_case1, update_context_case2 = boss_aid._check_update_context(message)\n        if (update_context_case1 or update_context_case2) and boss_aid.update_context:\n            boss_aid.problem = message if not hasattr(boss_aid, "problem") else boss_aid.problem\n            _, ret_msg = boss_aid._generate_retrieve_user_reply(message)\n        else:\n            ret_msg = boss_aid.generate_init_message(message, n_results=n_results)\n        return ret_msg if ret_msg else message\n\n    boss_aid.human_input_mode = "NEVER"  # Disable human input for boss_aid since it only retrieves content.\n\n    for caller in [pm, coder, reviewer]:\n        d_retrieve_content = caller.register_for_llm(\n            description="retrieve content for code generation and question answering.", api_style="function"\n        )(retrieve_content)\n\n    for executor in [boss, pm]:\n        executor.register_for_execution()(d_retrieve_content)\n\n    groupchat = autogen.GroupChat(\n        agents=[boss, pm, coder, reviewer],\n        messages=[],\n        max_round=12,\n        speaker_selection_method="round_robin",\n        allow_repeat_speaker=False,\n    )\n\n    manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)\n\n    # Start chatting with the boss as this is the user proxy agent.\n    boss.initiate_chat(\n        manager,\n        message=PROBLEM,\n    )\n'})}),"\n",(0,a.jsx)(n.h2,{id:"start-chat",children:"Start Chat"}),"\n",(0,a.jsx)(n.h3,{id:"userproxyagent-doesnt-get-the-correct-code",children:"UserProxyAgent doesn\u2019t get the correct code"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/microsoft/FLAML",children:"FLAML"})," was open sourced in 2020, so\nChatGPT is familiar with it. However, Spark-related APIs were added in\n2022, so they were not in ChatGPT\u2019s training data. As a result, we end\nup with invalid code."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"norag_chat()\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'Boss (to chat_manager):\n\nHow to use spark for parallel training in FLAML? Give me sample code.\n\n--------------------------------------------------------------------------------\nSenior_Python_Engineer (to chat_manager):\n\nTo use Spark for parallel training in FLAML, you need to set up a Spark cluster and configure FLAML to use Spark as the backend. Here\'s a sample code to demonstrate how to use Spark for parallel training in FLAML:\n\n```python\nfrom flaml import AutoML\nfrom pyspark.sql import SparkSession\n\n# Create a Spark session\nspark = SparkSession.builder \\\n    .appName("FLAML with Spark") \\\n    .getOrCreate()\n\n# Load your data into a Spark DataFrame\ndata = spark.read.format("csv").option("header", "true").load("your_data.csv")\n\n# Initialize FLAML with Spark backend\nautoml = AutoML()\nautoml.initialize(spark=spark)\n\n# Specify the search space and other settings\nsettings = {\n    "time_budget": 60,  # total time in seconds\n    "metric": \'accuracy\',\n    "task": \'classification\',\n    "log_file_name": \'flaml.log\',\n}\n\n# Train and tune the model using FLAML\nautoml.fit(data=data, **settings)\n\n# Get the best model and its hyperparameters\nbest_model = automl.best_model\nbest_config = automl.best_config\n\n# Print the best model and its hyperparameters\nprint("Best model:", best_model)\nprint("Best hyperparameters:", best_config)\n\n# Terminate the Spark session\nspark.stop()\n```\n\nMake sure to replace `"your_data.csv"` with the path to your actual data file. Adjust the `settings` dictionary according to your requirements.\n\nThis code initializes a Spark session, loads the data into a Spark DataFrame, and then uses FLAML\'s `AutoML` class to train and tune a model in parallel using Spark. Finally, it prints the best model and its hyperparameters.\n\nRemember to install FLAML and PySpark before running this code.\n\n--------------------------------------------------------------------------------\nTo use Spark for parallel training in FLAML, you need to set up a Spark cluster and configure FLAML to use Spark as the backend. Here\'s a sample code to demonstrate how to use Spark for parallel training in FLAML:\n\n```python\nfrom flaml import AutoML\nfrom pyspark.sql import SparkSession\n\n# Create a Spark session\nspark = SparkSession.builder \\\n    .appName("FLAML with Spark") \\\n    .getOrCreate()\n\n# Load your data into a Spark DataFrame\ndata = spark.read.format("csv").option("header", "true").load("your_data.csv")\n\n# Initialize FLAML with Spark backend\nautoml = AutoML()\nautoml.initialize(spark=spark)\n\n# Specify the search space and other settings\nsettings = {\n    "time_budget": 60,  # total time in seconds\n    "metric": \'accuracy\',\n    "task": \'classification\',\n    "log_file_name": \'flaml.log\',\n}\n\n# Train and tune the model using FLAML\nautoml.fit(data=data, **settings)\n\n# Get the best model and its hyperparameters\nbest_model = automl.best_model\nbest_config = automl.best_config\n\n# Print the best model and its hyperparameters\nprint("Best model:", best_model)\nprint("Best hyperparameters:", best_config)\n\n# Terminate the Spark session\nspark.stop()\n```\n\nMake sure to replace `"your_data.csv"` with the path to your actual data file. Adjust the `settings` dictionary according to your requirements.\n\nThis code initializes a Spark session, loads the data into a Spark DataFrame, and then uses FLAML\'s `AutoML` class to train and tune a model in parallel using Spark. Finally, it prints the best model and its hyperparameters.\n\nRemember to install FLAML and PySpark before running this code.\n\n--------------------------------------------------------------------------------\nCode_Reviewer (to chat_manager):\n\nLooks good to me! The code demonstrates how to use Spark for parallel training in FLAML. It initializes a Spark session, loads the data into a Spark DataFrame, and then uses FLAML\'s `AutoML` class to train and tune a model in parallel using Spark. Finally, it prints the best model and its hyperparameters. Just make sure to replace `"your_data.csv"` with the actual path to the data file and adjust the `settings` dictionary as needed. \n\nIf there are no further questions, I will terminate.\n\n--------------------------------------------------------------------------------\nProduct_Manager (to chat_manager):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(n.h3,{id:"retrieveuserproxyagent-get-the-correct-code",children:"RetrieveUserProxyAgent get the correct code"}),"\n",(0,a.jsx)(n.p,{children:"Since RetrieveUserProxyAgent can perform retrieval-augmented generation\nbased on the given documentation file, ChatGPT can generate the correct\ncode for us!"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"rag_chat()\n# type exit to terminate the chat\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'doc_ids:  [[\'doc_0\', \'doc_1\', \'doc_122\']]\nAdding doc_id doc_0 to context.\nAdding doc_id doc_1 to context.\nAdding doc_id doc_122 to context.\nBoss_Assistant (to chat_manager):\n\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: How to use spark for parallel training in FLAML? Give me sample code.\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n# Creating a dictionary\ndata = {"Square_Feet": [800, 1200, 1800, 1500, 850],\n      "Age_Years": [20, 15, 10, 7, 25],\n      "Price": [100000, 200000, 300000, 240000, 120000]}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n```python\nfrom pyspark.ml.feature import VectorAssembler\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n#### Model List\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performes parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n```python\nimport flaml\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True, # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n\n2684,4/26/2011,2,0,4,17,0,2,1,1,0.68,0.6364,0.61,0.3582,521\n2685,4/26/2011,2,0,4,18,0,2,1,1,0.68,0.6364,0.65,0.4478,528\n2686,4/26/2011,2,0,4,19,0,2,1,1,0.64,0.6061,0.73,0.4179,328\n2687,4/26/2011,2,0,4,20,0,2,1,1,0.64,0.6061,0.73,0.3582,234\n2688,4/26/2011,2,0,4,21,0,2,1,1,0.62,0.5909,0.78,0.2836,195\n2689,4/26/2011,2,0,4,22,0,2,1,2,0.6,0.5606,0.83,0.194,148\n2690,4/26/2011,2,0,4,23,0,2,1,2,0.6,0.5606,0.83,0.2239,78\n2691,4/27/2011,2,0,4,0,0,3,1,1,0.6,0.5606,0.83,0.2239,27\n2692,4/27/2011,2,0,4,1,0,3,1,1,0.6,0.5606,0.83,0.2537,17\n2693,4/27/2011,2,0,4,2,0,3,1,1,0.58,0.5455,0.88,0.2537,5\n2694,4/27/2011,2,0,4,3,0,3,1,2,0.58,0.5455,0.88,0.2836,7\n2695,4/27/2011,2,0,4,4,0,3,1,1,0.56,0.5303,0.94,0.2239,6\n2696,4/27/2011,2,0,4,5,0,3,1,2,0.56,0.5303,0.94,0.2537,17\n2697,4/27/2011,2,0,4,6,0,3,1,1,0.56,0.5303,0.94,0.2537,84\n2698,4/27/2011,2,0,4,7,0,3,1,2,0.58,0.5455,0.88,0.2836,246\n2699,4/27/2011,2,0,4,8,0,3,1,2,0.58,0.5455,0.88,0.3284,444\n2700,4/27/2011,2,0,4,9,0,3,1,2,0.6,0.5455,0.88,0.4179,181\n2701,4/27/2011,2,0,4,10,0,3,1,2,0.62,0.5758,0.83,0.2836,92\n2702,4/27/2011,2,0,4,11,0,3,1,2,0.64,0.5909,0.78,0.2836,156\n2703,4/27/2011,2,0,4,12,0,3,1,1,0.66,0.6061,0.78,0.3284,173\n2704,4/27/2011,2,0,4,13,0,3,1,1,0.64,0.5909,0.78,0.2985,150\n2705,4/27/2011,2,0,4,14,0,3,1,1,0.68,0.6364,0.74,0.2836,148\n\n\n\n--------------------------------------------------------------------------------\nProduct_Manager (to chat_manager):\n\nTo use Spark for parallel training in FLAML, you can follow these steps:\n\n1. Prepare your data in the required format using the `to_pandas_on_spark` function from the `flaml.automl.spark.utils` module. This function converts your data into a pandas-on-spark dataframe, which is required by Spark estimators. Here is an example code snippet:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Creating a dictionary\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000]\n}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\n2. Format your data appropriately for Spark ML models. Use the `VectorAssembler` from `pyspark.ml.feature` to merge all feature columns into a single vector column. Here is an example:\n\n```python\nfrom pyspark.ml.feature import VectorAssembler\n\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\n3. Use the Spark ML models in FLAML\'s AutoML. Include the models you want to try in the `estimator_list` argument to `flaml.AutoML()`. FLAML will start trying configurations for these models. Here is an example code snippet:\n\n```python\nimport flaml\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],\n    "task": "regression"\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings\n)\n```\n\n4. To enable parallel Spark jobs during parallel tuning, set the `use_spark` parameter to `True`. FLAML will dispatch your job to the distributed Spark backend using `joblib-spark`. Here is an example code snippet:\n\n```python\nimport flaml\n\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings\n)\n```\n\nPlease note that you should not set `use_spark` to `True` when applying AutoML and Tuning for Spark Data, as SparkML models will be used for Spark Data in AutoML and Tuning.\n\nLet me know if you need anything else.\n\n--------------------------------------------------------------------------------\nTo use Spark for parallel training in FLAML, you can follow these steps:\n\n1. Prepare your data in the required format using the `to_pandas_on_spark` function from the `flaml.automl.spark.utils` module. This function converts your data into a pandas-on-spark dataframe, which is required by Spark estimators. Here is an example code snippet:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Creating a dictionary\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000]\n}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\n2. Format your data appropriately for Spark ML models. Use the `VectorAssembler` from `pyspark.ml.feature` to merge all feature columns into a single vector column. Here is an example:\n\n```python\nfrom pyspark.ml.feature import VectorAssembler\n\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\n3. Use the Spark ML models in FLAML\'s AutoML. Include the models you want to try in the `estimator_list` argument to `flaml.AutoML()`. FLAML will start trying configurations for these models. Here is an example code snippet:\n\n```python\nimport flaml\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],\n    "task": "regression"\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings\n)\n```\n\n4. To enable parallel Spark jobs during parallel tuning, set the `use_spark` parameter to `True`. FLAML will dispatch your job to the distributed Spark backend using `joblib-spark`. Here is an example code snippet:\n\n```python\nimport flaml\n\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings\n)\n```\n\nPlease note that you should not set `use_spark` to `True` when applying AutoML and Tuning for Spark Data, as SparkML models will be used for Spark Data in AutoML and Tuning.\n\nLet me know if you need anything else.\n\n--------------------------------------------------------------------------------\nSenior_Python_Engineer (to chat_manager):\n\nHere is the sample code to use Spark for parallel training in FLAML:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\nfrom pyspark.ml.feature import VectorAssembler\nimport flaml\n\n# Step 1: Prepare your data in the required format\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000]\n}\n\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\npsdf = to_pandas_on_spark(dataframe)\n\n# Step 2: Format your data for Spark ML models\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n\n# Step 3: Use Spark ML models in FLAML\'s AutoML\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],\n    "task": "regression"\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings\n)\n\n# Step 4: Enable parallel Spark jobs during parallel tuning\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings\n)\n```\n\nLet me know if you need anything else.\n\n--------------------------------------------------------------------------------\nCode_Reviewer (to chat_manager):\n\nThe code you provided is correct and follows the guidelines for using Spark for parallel training in FLAML. It includes the necessary steps to prepare the data, format it for Spark ML models, and use Spark ML models in FLAML\'s AutoML. It also demonstrates how to enable parallel Spark jobs during parallel tuning.\n\nGreat job! You can now terminate the conversation.\n\n--------------------------------------------------------------------------------\nBoss_Assistant (to chat_manager):\n\n\n\n--------------------------------------------------------------------------------\nProduct_Manager (to chat_manager):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(n.h3,{id:"call-retrieveuserproxyagent-while-init-chat-with-another-user-proxy-agent",children:"Call RetrieveUserProxyAgent while init chat with another user proxy agent"}),"\n",(0,a.jsx)(n.p,{children:"Sometimes, there might be a need to use RetrieveUserProxyAgent in group\nchat without initializing the chat with it. In such scenarios, it\nbecomes essential to create a function that wraps the RAG agents and\nallows them to be called from other agents."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"call_rag_chat()\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'Boss (to chat_manager):\n\nHow to use spark for parallel training in FLAML? Give me sample code.\n\n--------------------------------------------------------------------------------\nHow to use spark for parallel training in FLAML? Give me sample code.\n\n--------------------------------------------------------------------------------\nProduct_Manager (to chat_manager):\n\n***** Suggested function Call: retrieve_content *****\nArguments: \n{\n  "message": "How to use spark for parallel training in FLAML? Give me sample code."\n}\n*****************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING FUNCTION retrieve_content...\ndoc_ids:  [[\'doc_0\', \'doc_1\', \'doc_122\']]\nAdding doc_id doc_0 to context.\nAdding doc_id doc_1 to context.\nAdding doc_id doc_122 to context.\nBoss (to chat_manager):\n\n***** Response from calling function "retrieve_content" *****\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: How to use spark for parallel training in FLAML? Give me sample code.\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n# Creating a dictionary\ndata = {"Square_Feet": [800, 1200, 1800, 1500, 850],\n      "Age_Years": [20, 15, 10, 7, 25],\n      "Price": [100000, 200000, 300000, 240000, 120000]}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n```python\nfrom pyspark.ml.feature import VectorAssembler\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n#### Model List\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performes parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n```python\nimport flaml\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True, # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n\n2684,4/26/2011,2,0,4,17,0,2,1,1,0.68,0.6364,0.61,0.3582,521\n2685,4/26/2011,2,0,4,18,0,2,1,1,0.68,0.6364,0.65,0.4478,528\n2686,4/26/2011,2,0,4,19,0,2,1,1,0.64,0.6061,0.73,0.4179,328\n2687,4/26/2011,2,0,4,20,0,2,1,1,0.64,0.6061,0.73,0.3582,234\n2688,4/26/2011,2,0,4,21,0,2,1,1,0.62,0.5909,0.78,0.2836,195\n2689,4/26/2011,2,0,4,22,0,2,1,2,0.6,0.5606,0.83,0.194,148\n2690,4/26/2011,2,0,4,23,0,2,1,2,0.6,0.5606,0.83,0.2239,78\n2691,4/27/2011,2,0,4,0,0,3,1,1,0.6,0.5606,0.83,0.2239,27\n2692,4/27/2011,2,0,4,1,0,3,1,1,0.6,0.5606,0.83,0.2537,17\n2693,4/27/2011,2,0,4,2,0,3,1,1,0.58,0.5455,0.88,0.2537,5\n2694,4/27/2011,2,0,4,3,0,3,1,2,0.58,0.5455,0.88,0.2836,7\n2695,4/27/2011,2,0,4,4,0,3,1,1,0.56,0.5303,0.94,0.2239,6\n2696,4/27/2011,2,0,4,5,0,3,1,2,0.56,0.5303,0.94,0.2537,17\n2697,4/27/2011,2,0,4,6,0,3,1,1,0.56,0.5303,0.94,0.2537,84\n2698,4/27/2011,2,0,4,7,0,3,1,2,0.58,0.5455,0.88,0.2836,246\n2699,4/27/2011,2,0,4,8,0,3,1,2,0.58,0.5455,0.88,0.3284,444\n2700,4/27/2011,2,0,4,9,0,3,1,2,0.6,0.5455,0.88,0.4179,181\n2701,4/27/2011,2,0,4,10,0,3,1,2,0.62,0.5758,0.83,0.2836,92\n2702,4/27/2011,2,0,4,11,0,3,1,2,0.64,0.5909,0.78,0.2836,156\n2703,4/27/2011,2,0,4,12,0,3,1,1,0.66,0.6061,0.78,0.3284,173\n2704,4/27/2011,2,0,4,13,0,3,1,1,0.64,0.5909,0.78,0.2985,150\n2705,4/27/2011,2,0,4,14,0,3,1,1,0.68,0.6364,0.74,0.2836,148\n\n\n*************************************************************\n\n--------------------------------------------------------------------------------\nProduct_Manager (to chat_manager):\n\nTo use Spark for parallel training in FLAML, you can follow these steps:\n\n1. Prepare your data in the required format using Spark data. You can use the `to_pandas_on_spark` function from the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark dataframe.\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Creating a dictionary\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000]\n}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\n2. Use the Spark ML estimators provided by FLAML. You can include the models you want to try in the `estimator_list` argument of the `flaml.AutoML` class. FLAML will start trying configurations for these models.\n\n```python\nimport flaml\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # Optional: specify the Spark estimator\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n3. Enable parallel Spark jobs by setting the `use_spark` parameter to `True` in the `fit` method. This will dispatch the job to the distributed Spark backend using `joblib-spark`.\n\n```python\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    use_spark=True,\n)\n```\n\nNote: Make sure you have Spark installed and configured properly before running the code.\n\nPlease let me know if you need any further assistance.\n\n--------------------------------------------------------------------------------\nSenior_Python_Engineer (to chat_manager):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},775:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>d,toc:()=>l});var a=t(5893),o=t(1151);const i={tags:["orchestration"],description:"Explore the demonstration of the Finite State Machine implementation, which allows the user to input speaker transition contraints.\n",source_notebook:"/notebook/agentchat_groupchat_finite_state_machine.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat_finite_state_machine.ipynb",title:"FSM - User can input speaker transition contraints. {#fsm---user-can-input-speaker-transition-contraints.}"},s="FSM - User can input speaker transition contraints. {#fsm---user-can-input-speaker-transition-contraints.}",r={id:"notebooks/agentchat_groupchat_finite_state_machine",title:"FSM - User can input speaker transition contraints. {#fsm---user-can-input-speaker-transition-contraints.}",description:"Explore the demonstration of the Finite State Machine implementation, which allows the user to input speaker transition contraints.\n",source:"@site/docs/notebooks/agentchat_groupchat_finite_state_machine.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_groupchat_finite_state_machine",permalink:"/autogen/docs/notebooks/agentchat_groupchat_finite_state_machine",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat_finite_state_machine.ipynb",tags:[{label:"orchestration",permalink:"/autogen/docs/tags/orchestration"}],version:"current",frontMatter:{tags:["orchestration"],description:"Explore the demonstration of the Finite State Machine implementation, which allows the user to input speaker transition contraints.\n",source_notebook:"/notebook/agentchat_groupchat_finite_state_machine.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat_finite_state_machine.ipynb",title:"FSM - User can input speaker transition contraints. {#fsm---user-can-input-speaker-transition-contraints.}"},sidebar:"notebooksSidebar",previous:{title:"Group Chat with Retrieval Augmented Generation",permalink:"/autogen/docs/notebooks/agentchat_groupchat_RAG"},next:{title:"Runtime Logging with AutoGen",permalink:"/autogen/docs/notebooks/agentchat_logging"}},c={},l=[{value:"Motivation",id:"motivation",level:2},{value:"Possibly interesting transition paths",id:"possibly-interesting-transition-paths",level:3},{value:"Demonstration",id:"demonstration",level:2},{value:"Team Operations",id:"team-operations",level:3}],d=['\x3c!--\ntags: ["orchestration"]\ndescription: |\n    Explore the demonstration of the Finite State Machine implementation, which allows the user to input speaker transition contraints.\n--\x3e'];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[0]}}),"\n",(0,a.jsx)(n.h1,{id:"fsm---user-can-input-speaker-transition-contraints.",children:"FSM - User can input speaker transition contraints."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_groupchat_finite_state_machine.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_groupchat_finite_state_machine.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["AutoGen offers conversable agents powered by LLM, tool, or human, which\ncan be used to perform tasks collectively via automated chat. This\nframework allows tool use and human participation through multi-agent\nconversation. Please find documentation about this feature\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/Use-Cases/agent_chat",children:"here"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"This notebook is about using graphs to define the transition paths\namongst speakers."}),"\n",(0,a.jsx)(n.p,{children:"Benefits - This contribution fills the gap between the current modes of\nGroupChat Class (auto, manual, round_robin) and an expressive directed\ngraph. See Motivation for more detailed discussion."}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsxs)(n.p,{children:["Install ",(0,a.jsx)(n.code,{children:"pyautogen"}),":"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"%%capture --no-stderr\n%pip install pyautogen[graph]>=0.2.11\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n[notice] A new release of pip is available: 23.0.1 -> 24.0\n[notice] To update, run: pip install --upgrade pip\nNote: you may need to restart the kernel to use updated packages.\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import random  # noqa E402\n\nimport matplotlib.pyplot as plt  # noqa E402\nimport networkx as nx  # noqa E402\n\nimport autogen  # noqa E402\nfrom autogen.agentchat.conversable_agent import ConversableAgent  # noqa E402\nfrom autogen.agentchat.assistant_agent import AssistantAgent  # noqa E402\nfrom autogen.agentchat.groupchat import GroupChat  # noqa E402\nfrom autogen.graph_utils import visualize_speaker_transitions_dict  # noqa E402\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"print(autogen.__version__)\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"0.2.14\n"})}),"\n",(0,a.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,a.jsx)(n.p,{children:"The current GroupChat class allows transition to any agent (without or\nwithout the decision of LLM), some use case might demand for more\ncontrol over transition. A graph is a possible way to control the\ntransition paths, where each node represents an agent and each directed\nedge represent possible transition path. Let\u2019s illustrate the current\ntransition paths for a GroupChat with five agents."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'config_list_gpt4 = {\n    "timeout": 600,\n    "cache_seed": 44,  # change the seed for different trials\n    "config_list": autogen.config_list_from_json(\n        "OAI_CONFIG_LIST",\n        filter_dict={"model": ["gpt-4", "gpt-4-0613", "gpt-4-32k", "gpt-4-32k-0613", "gpt-4-1106-preview"]},\n    ),\n    "temperature": 0,\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'agents = [ConversableAgent(name=f"Agent{i}", llm_config=False) for i in range(5)]\nallowed_speaker_transitions_dict = {agent: [other_agent for other_agent in agents] for agent in agents}\n\nvisualize_speaker_transitions_dict(allowed_speaker_transitions_dict, agents)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:t(2410).Z+"",width:"660",height:"499"})}),"\n",(0,a.jsx)(n.h3,{id:"possibly-interesting-transition-paths",children:"Possibly interesting transition paths"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Hub and Spoke"}),"\n",(0,a.jsx)(n.li,{children:"Sequential Team Operations"}),"\n",(0,a.jsx)(n.li,{children:"Think aloud and debate"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'agents = [ConversableAgent(name=f"Agent{i}", llm_config=False) for i in range(5)]\nallowed_speaker_transitions_dict = {\n    agents[0]: [agents[1], agents[2], agents[3], agents[4]],\n    agents[1]: [agents[0]],\n    agents[2]: [agents[0]],\n    agents[3]: [agents[0]],\n    agents[4]: [agents[0]],\n}\n\nvisualize_speaker_transitions_dict(allowed_speaker_transitions_dict, agents)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:t(9167).Z+"",width:"660",height:"499"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Sequential Team Operations\n# Create an empty directed graph\n\nspeaker_transitions_dict = {}\nteams = ["A", "B", "C"]\nteam_size = 5\n\n\ndef get_agent_of_name(agents, name) -> ConversableAgent:\n    for agent in agents:\n        if agent.name == name:\n            return agent\n\n\n# Create a list of 15 agents 3 teams x 5 agents\nagents = [ConversableAgent(name=f"{team}{i}", llm_config=False) for team in teams for i in range(team_size)]\n\n# Loop through each team and add members and their connections\nfor team in teams:\n    for i in range(team_size):\n        member = f"{team}{i}"\n        # Connect each member to other members of the same team\n        speaker_transitions_dict[get_agent_of_name(agents, member)] = [\n            get_agent_of_name(agents, name=f"{team}{j}") for j in range(team_size) if j != i\n        ]\n\n# Team leaders connection\nprint(get_agent_of_name(agents, name="B0"))\nspeaker_transitions_dict[get_agent_of_name(agents, "A0")].append(get_agent_of_name(agents, name="B0"))\nspeaker_transitions_dict[get_agent_of_name(agents, "B0")].append(get_agent_of_name(agents, name="C0"))\n\nvisualize_speaker_transitions_dict(speaker_transitions_dict, agents)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"<autogen.agentchat.conversable_agent.ConversableAgent object at 0x7fd45a19da80>\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:t(4030).Z+"",width:"660",height:"499"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'agents = [ConversableAgent(name=f"Agent{i}", llm_config=False) for i in range(2)]\nallowed_speaker_transitions_dict = {\n    agents[0]: [agents[0], agents[1]],\n    agents[1]: [agents[0], agents[1]],\n}\n\nvisualize_speaker_transitions_dict(allowed_speaker_transitions_dict, agents)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:t(9653).Z+"",width:"660",height:"499"})}),"\n",(0,a.jsx)(n.h2,{id:"demonstration",children:"Demonstration"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"GroupChat"})," now takes in two optional arguments. -\nallowed_or_disallowed_speaker_transitions: The keys are source agents,\nand the values are agents that the key agent can/can\u2019t transit to,\ndepending on speaker_transitions_type. Default is None, which means all\nagents can transit to all other agents. - speaker_transitions_type:\nwhether the speaker_transitions_type is a dictionary containing lists of\nallowed agents or disallowed agents. \u201callowed\u201d means the\n",(0,a.jsx)(n.code,{children:"allowed_or_disallowed_speaker_transitions"})," is a dictionary containing\nlists of allowed agents."]}),"\n",(0,a.jsx)(n.h3,{id:"team-operations",children:"Team Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Create an empty directed graph\nagents = []\nspeaker_transitions_dict = {}\nsecret_values = {}\n\n# Outer loop for prefixes \'A\', \'B\', \'C\'\nfor prefix in ["A", "B", "C"]:\n    # Add 3 nodes with each prefix to the graph using a for loop\n    for i in range(3):\n        node_id = f"{prefix}{i}"\n        secret_value = random.randint(1, 5)  # Generate a random secret value\n        secret_values[node_id] = secret_value\n\n        # Create an AssistantAgent for each node (assuming AssistantAgent is a defined class)\n        agents.append(\n            AssistantAgent(\n                name=node_id,\n                system_message=f"""Your name is {node_id}.\n                                          Do not respond as the speaker named in the NEXT tag if your name is not in the NEXT tag. Instead, suggest a relevant team leader to handle the mis-tag, with the NEXT: tag.\n\n                                          You have {secret_value} chocolates.\n\n                                          The list of players are [A0, A1, A2, B0, B1, B2, C0, C1, C2].\n\n                                            Your first character of your name is your team, and your second character denotes that you are a team leader if it is 0.\n                                            CONSTRAINTS: Team members can only talk within the team, whilst team leader can talk to team leaders of other teams but not team members of other teams.\n\n                                            You can use NEXT: to suggest the next speaker. You have to respect the CONSTRAINTS, and can only suggest one player from the list of players, i.e., do not suggest A3 because A3 is not from the list of players.\n                                            Team leaders must make sure that they know the sum of the individual chocolate count of all three players in their own team, i.e., A0 is responsible for team A only.\n\n                                          Keep track of the player\'s tally using a JSON format so that others can check the total tally. Use\n                                          A0:?, A1:?, A2:?,\n                                          B0:?, B1:?, B2:?,\n                                          C0:?, C1:?, C2:?\n\n                                          If you are the team leader, you should aggregate your team\'s total chocolate count to cooperate.\n                                          Once the team leader know their team\'s tally, they can suggest another team leader for them to find their team tally, because we need all three team tallys to succeed.\n                                          Use NEXT: to suggest the next speaker, e.g., NEXT: A0.\n\n                                          Once we have the total tally from all nine players, sum up all three teams\' tally, then terminate the discussion using TERMINATE.\n\n                                          """,\n                llm_config=config_list_gpt4,\n            )\n        )\n        speaker_transitions_dict[agents[-1]] = []\n\n    # Add edges between nodes with the same prefix using a nested for loop\n    for source_node in range(3):\n        source_id = f"{prefix}{source_node}"\n        for target_node in range(3):\n            target_id = f"{prefix}{target_node}"\n            if source_node != target_node:  # To avoid self-loops\n                speaker_transitions_dict[get_agent_of_name(agents, source_id)].append(\n                    get_agent_of_name(agents, name=target_id)\n                )\n\n\n# Adding edges between teams\nspeaker_transitions_dict[get_agent_of_name(agents, "A0")].append(get_agent_of_name(agents, name="B0"))\nspeaker_transitions_dict[get_agent_of_name(agents, "A0")].append(get_agent_of_name(agents, name="C0"))\nspeaker_transitions_dict[get_agent_of_name(agents, "B0")].append(get_agent_of_name(agents, name="A0"))\nspeaker_transitions_dict[get_agent_of_name(agents, "B0")].append(get_agent_of_name(agents, name="C0"))\nspeaker_transitions_dict[get_agent_of_name(agents, "C0")].append(get_agent_of_name(agents, name="A0"))\nspeaker_transitions_dict[get_agent_of_name(agents, "C0")].append(get_agent_of_name(agents, name="B0"))\n\n\n# Visualization only\ngraph = nx.DiGraph()\n\n# Add nodes\ngraph.add_nodes_from([agent.name for agent in agents])\n\n# Add edges\nfor key, value in speaker_transitions_dict.items():\n    for agent in value:\n        graph.add_edge(key.name, agent.name)\n\n# Visualize\n# Draw the graph with secret values annotated\nplt.figure(figsize=(12, 10))\npos = nx.spring_layout(graph)  # positions for all nodes\n\n# Draw nodes with their colors\nnx.draw(graph, pos, with_labels=True, font_weight="bold")\n\n# Annotate secret values\nfor node, (x, y) in pos.items():\n    secret_value = secret_values[node]\n    plt.text(x, y + 0.1, s=f"Secret: {secret_value}", horizontalalignment="center")\n\nplt.show()\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:t(5332).Z+"",width:"1220",height:"1019"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Termination message detection\n\n\ndef is_termination_msg(content) -> bool:\n    have_content = content.get("content", None) is not None\n    if have_content and "TERMINATE" in content["content"]:\n        return True\n    return False\n\n\n# Terminates the conversation when TERMINATE is detected.\nuser_proxy = autogen.UserProxyAgent(\n    name="User_proxy",\n    system_message="Terminator admin.",\n    code_execution_config=False,\n    is_termination_msg=is_termination_msg,\n    human_input_mode="NEVER",\n)\n\nagents.append(user_proxy)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'group_chat = GroupChat(\n    agents=agents,\n    messages=[],\n    max_round=20,\n    allowed_or_disallowed_speaker_transitions=speaker_transitions_dict,\n    speaker_transitions_type="allowed",\n)\n\n\n# Create the manager\nmanager = autogen.GroupChatManager(\n    groupchat=group_chat,\n    llm_config=config_list_gpt4,\n    code_execution_config=False,\n    is_termination_msg=is_termination_msg,\n)\n\n\n# Initiates the chat with Alice\nagents[0].initiate_chat(\n    manager,\n    message="""\n                        There are 9 players in this game, split equally into Teams A, B, C. Therefore each team has 3 players, including the team leader.\n                        The task is to find out the sum of chocolate count from all nine players. I will now start with my team.\n                        NEXT: A1""",\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"WARNING:root:Warning: There are isolated agent nodes, there are not incoming nor outgoing edges. Isolated agents: ['User_proxy']\nWARNING:root:Warning: The set of agents in allowed_speaker_transitions do not match agents. Offending agents: ['User_proxy']\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"A0 (to chat_manager):\n\n\n                        There are 9 players in this game, split equally into Teams A, B, C. Therefore each team has 3 players, including the team leader.\n                        The task is to find out the sum of chocolate count from all nine players. I will now start with my team.\n                        NEXT: A1\n\n--------------------------------------------------------------------------------\nA1 (to chat_manager):\n\nAs A1, I have 2 chocolates. \n\nA0:?, A1:2, A2:?, \nB0:?, B1:?, B2:?, \nC0:?, C1:?, C2:?\n\nNEXT: A2\n\n--------------------------------------------------------------------------------\nA2 (to chat_manager):\n\nAs A2, I have 2 chocolates.\n\nA0:?, A1:2, A2:2, \nB0:?, B1:?, B2:?, \nC0:?, C1:?, C2:?\n\nNEXT: A0\n\n--------------------------------------------------------------------------------\nA0 (to chat_manager):\n\nAs A0, I have 1 chocolate. So, the total chocolate count for team A is 5.\n\nA0:1, A1:2, A2:2, \nB0:?, B1:?, B2:?, \nC0:?, C1:?, C2:?\n\nNow, I suggest the next team leader to find out their team's tally.\nNEXT: B0\n\n--------------------------------------------------------------------------------\nB0 (to chat_manager):\n\nAs B0, I have 3 chocolates. Now, I will ask my team members about their count.\n\nB0:3, B1:?, B2:?, \nA0:1, A1:2, A2:2, \nC0:?, C1:?, C2:?\n\nNEXT: B1\n\n--------------------------------------------------------------------------------\nB1 (to chat_manager):\n\nAs B1, I have 1 chocolate.\n\nB0:3, B1:1, B2:?, \nA0:1, A1:2, A2:2, \nC0:?, C1:?, C2:?\n\nNEXT: B2\n\n--------------------------------------------------------------------------------\nB2 (to chat_manager):\n\nAs B2, I have 2 chocolates. So, the total chocolate count for team B is 6.\n\nB0:3, B1:1, B2:2, \nA0:1, A1:2, A2:2, \nC0:?, C1:?, C2:?\n\nNow, I suggest the next team leader to find out their team's tally.\nNEXT: C0\n\n--------------------------------------------------------------------------------\nB0 (to chat_manager):\n\nAs C0, I have 4 chocolates. Now, I will ask my team members about their count.\n\nC0:4, C1:?, C2:?, \nB0:3, B1:1, B2:2, \nA0:1, A1:2, A2:2, \n\nNEXT: C1\n\n--------------------------------------------------------------------------------\nC0 (to chat_manager):\n\nAs C1, I have 2 chocolates.\n\nC0:4, C1:2, C2:?, \nB0:3, B1:1, B2:2, \nA0:1, A1:2, A2:2, \n\nNEXT: C2\n\n--------------------------------------------------------------------------------\nC2 (to chat_manager):\n\nAs C2, I have 1 chocolate. So, the total chocolate count for team C is 7.\n\nC0:4, C1:2, C2:1, \nB0:3, B1:1, B2:2, \nA0:1, A1:2, A2:2, \n\nNow, we have the total tally from all nine players. The sum of all three teams' tally is 18. \n\nTERMINATE.\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"ChatResult(chat_history=[{'content': '\\n                        There are 9 players in this game, split equally into Teams A, B, C. Therefore each team has 3 players, including the team leader.\\n                        The task is to find out the sum of chocolate count from all nine players. I will now start with my team.\\n                        NEXT: A1', 'role': 'assistant'}, {'content': 'As A1, I have 2 chocolates. \\n\\nA0:?, A1:2, A2:?, \\nB0:?, B1:?, B2:?, \\nC0:?, C1:?, C2:?\\n\\nNEXT: A2', 'name': 'A1', 'role': 'user'}, {'content': 'As A2, I have 2 chocolates.\\n\\nA0:?, A1:2, A2:2, \\nB0:?, B1:?, B2:?, \\nC0:?, C1:?, C2:?\\n\\nNEXT: A0', 'name': 'A2', 'role': 'user'}, {'content': \"As A0, I have 1 chocolate. So, the total chocolate count for team A is 5.\\n\\nA0:1, A1:2, A2:2, \\nB0:?, B1:?, B2:?, \\nC0:?, C1:?, C2:?\\n\\nNow, I suggest the next team leader to find out their team's tally.\\nNEXT: B0\", 'role': 'assistant'}, {'content': 'As B0, I have 3 chocolates. Now, I will ask my team members about their count.\\n\\nB0:3, B1:?, B2:?, \\nA0:1, A1:2, A2:2, \\nC0:?, C1:?, C2:?\\n\\nNEXT: B1', 'name': 'B0', 'role': 'user'}, {'content': 'As B1, I have 1 chocolate.\\n\\nB0:3, B1:1, B2:?, \\nA0:1, A1:2, A2:2, \\nC0:?, C1:?, C2:?\\n\\nNEXT: B2', 'name': 'B1', 'role': 'user'}, {'content': \"As B2, I have 2 chocolates. So, the total chocolate count for team B is 6.\\n\\nB0:3, B1:1, B2:2, \\nA0:1, A1:2, A2:2, \\nC0:?, C1:?, C2:?\\n\\nNow, I suggest the next team leader to find out their team's tally.\\nNEXT: C0\", 'name': 'B2', 'role': 'user'}, {'content': 'As C0, I have 4 chocolates. Now, I will ask my team members about their count.\\n\\nC0:4, C1:?, C2:?, \\nB0:3, B1:1, B2:2, \\nA0:1, A1:2, A2:2, \\n\\nNEXT: C1', 'name': 'B0', 'role': 'user'}, {'content': 'As C1, I have 2 chocolates.\\n\\nC0:4, C1:2, C2:?, \\nB0:3, B1:1, B2:2, \\nA0:1, A1:2, A2:2, \\n\\nNEXT: C2', 'name': 'C0', 'role': 'user'}, {'content': \"As C2, I have 1 chocolate. So, the total chocolate count for team C is 7.\\n\\nC0:4, C1:2, C2:1, \\nB0:3, B1:1, B2:2, \\nA0:1, A1:2, A2:2, \\n\\nNow, we have the total tally from all nine players. The sum of all three teams' tally is 18. \\n\\nTERMINATE.\", 'name': 'C2', 'role': 'user'}], summary=\"As C2, I have 1 chocolate. So, the total chocolate count for team C is 7.\\n\\nC0:4, C1:2, C2:1, \\nB0:3, B1:1, B2:2, \\nA0:1, A1:2, A2:2, \\n\\nNow, we have the total tally from all nine players. The sum of all three teams' tally is 18. \\n\\n.\", cost=({'total_cost': 0.48207, 'gpt-4-0613': {'cost': 0.48207, 'prompt_tokens': 15865, 'completion_tokens': 102, 'total_tokens': 15967}}, {'total_cost': 0.48207, 'gpt-4-0613': {'cost': 0.48207, 'prompt_tokens': 15865, 'completion_tokens': 102, 'total_tokens': 15967}}), human_input=[])\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},1401:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>d,toc:()=>l});var a=t(5893),o=t(1151);const i={tags:["logging","debugging"],description:"Provide capabilities of runtime logging for debugging and performance analysis.\n",source_notebook:"/notebook/agentchat_logging.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_logging.ipynb",title:"Runtime Logging with AutoGen"},s="Runtime Logging with AutoGen",r={id:"notebooks/agentchat_logging",title:"Runtime Logging with AutoGen",description:"Provide capabilities of runtime logging for debugging and performance analysis.\n",source:"@site/docs/notebooks/agentchat_logging.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_logging",permalink:"/autogen/docs/notebooks/agentchat_logging",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_logging.ipynb",tags:[{label:"logging",permalink:"/autogen/docs/tags/logging"},{label:"debugging",permalink:"/autogen/docs/tags/debugging"}],version:"current",frontMatter:{tags:["logging","debugging"],description:"Provide capabilities of runtime logging for debugging and performance analysis.\n",source_notebook:"/notebook/agentchat_logging.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_logging.ipynb",title:"Runtime Logging with AutoGen"},sidebar:"notebooksSidebar",previous:{title:"FSM - User can input speaker transition contraints. {#fsm---user-can-input-speaker-transition-contraints.}",permalink:"/autogen/docs/notebooks/agentchat_groupchat_finite_state_machine"},next:{title:"Solving Multiple Tasks in a Sequence of Async Chats",permalink:"/autogen/docs/notebooks/agentchat_multi_task_async_chats"}},c={},l=[{value:"Getting Data from the SQLite Database",id:"getting-data-from-the-sqlite-database",level:2},{value:"Computing Cost",id:"computing-cost",level:2}],d=['\x3c!--\ntags: ["logging", "debugging"]\ndescription: |\n    Provide capabilities of runtime logging for debugging and performance analysis.\n--\x3e',"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n","\n</div>"];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[0]}}),"\n",(0,a.jsx)(n.h1,{id:"runtime-logging-with-autogen",children:"Runtime Logging with AutoGen"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_logging.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_logging.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsx)(n.p,{children:"AutoGen offers utilities to log data for debugging and performance\nanalysis. This notebook demonstrates how to use them."}),"\n",(0,a.jsxs)(n.p,{children:["In general, users can initiate logging by calling\n",(0,a.jsx)(n.code,{children:"autogen.runtime_logging.start()"})," and stop logging by calling\n",(0,a.jsx)(n.code,{children:"autogen.runtime_logging.stop()"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import json\nimport autogen\nfrom autogen import AssistantAgent, UserProxyAgent\nimport pandas as pd\n\n# Setup API key. Add your own API key to config file or environment variable\nllm_config = {\n    "config_list": autogen.config_list_from_json(\n        env_or_file="OAI_CONFIG_LIST",\n    ),\n    "temperature": 0.9,\n}\n\n# Start logging\nlogging_session_id = autogen.runtime_logging.start(config={"dbname": "logs.db"})\nprint("Logging session ID: " + str(logging_session_id))\n\n# Create an agent workflow and run it\nassistant = AssistantAgent(name="assistant", llm_config=llm_config)\nuser_proxy = UserProxyAgent(\n    name="user_proxy",\n    code_execution_config=False,\n    human_input_mode="NEVER",\n    is_termination_msg=lambda msg: "TERMINATE" in msg["content"],\n)\n\nuser_proxy.initiate_chat(\n    assistant, message="What is the height of the Eiffel Tower? Only respond with the answer and terminate"\n)\nautogen.runtime_logging.stop()\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Logging session ID: 6e08f3e0-392b-434e-8b69-4ab36c4fcf99\nuser_proxy (to assistant):\n\nWhat is the height of the Eiffel Tower? Only respond with the answer and terminate\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nThe height of the Eiffel Tower is approximately 330 meters.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.h2,{id:"getting-data-from-the-sqlite-database",children:"Getting Data from the SQLite Database"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"logs.db"})," should be generated, by default it\u2019s using SQLite database.\nYou can view the data with GUI tool like ",(0,a.jsx)(n.code,{children:"sqlitebrowser"}),", using SQLite\ncommand line shell or using python script:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def get_log(dbname="logs.db", table="chat_completions"):\n    import sqlite3\n\n    con = sqlite3.connect(dbname)\n    query = f"SELECT * from {table}"\n    cursor = con.execute(query)\n    rows = cursor.fetchall()\n    column_names = [description[0] for description in cursor.description]\n    data = [dict(zip(column_names, row)) for row in rows]\n    con.close()\n    return data\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def str_to_dict(s):\n    return json.loads(s)\n\n\nlog_data = get_log()\nlog_data_df = pd.DataFrame(log_data)\n\nlog_data_df["total_tokens"] = log_data_df.apply(\n    lambda row: str_to_dict(row["response"])["usage"]["total_tokens"], axis=1\n)\n\nlog_data_df["request"] = log_data_df.apply(lambda row: str_to_dict(row["request"])["messages"][0]["content"], axis=1)\n\nlog_data_df["response"] = log_data_df.apply(\n    lambda row: str_to_dict(row["response"])["choices"][0]["message"]["content"], axis=1\n)\n\nlog_data_df\n'})}),"\n",(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[1]}}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{}),(0,a.jsx)(n.th,{children:"id"}),(0,a.jsx)(n.th,{children:"invocation_id"}),(0,a.jsx)(n.th,{children:"client_id"}),(0,a.jsx)(n.th,{children:"wrapper_id"}),(0,a.jsx)(n.th,{children:"session_id"}),(0,a.jsx)(n.th,{children:"request"}),(0,a.jsx)(n.th,{children:"response"}),(0,a.jsx)(n.th,{children:"is_cached"}),(0,a.jsx)(n.th,{children:"cost"}),(0,a.jsx)(n.th,{children:"start_time"}),(0,a.jsx)(n.th,{children:"end_time"}),(0,a.jsx)(n.th,{children:"total_tokens"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"0"}),(0,a.jsx)(n.td,{children:"1"}),(0,a.jsx)(n.td,{children:"e8bb00d7-6da5-4407-a949-e19b55d53da8"}),(0,a.jsx)(n.td,{children:"139819167322784"}),(0,a.jsx)(n.td,{children:"139823225568704"}),(0,a.jsx)(n.td,{children:"8821a150-8c78-4d05-a858-8a64f1d18648"}),(0,a.jsx)(n.td,{children:"You are a helpful AI assistant.\\nSolve tasks u..."}),(0,a.jsx)(n.td,{children:"The height of the Eiffel Tower is approximatel..."}),(0,a.jsx)(n.td,{children:"1"}),(0,a.jsx)(n.td,{children:"0.01572"}),(0,a.jsx)(n.td,{children:"2024-02-13 15:06:22.082896"}),(0,a.jsx)(n.td,{children:"2024-02-13 15:06:22.083169"}),(0,a.jsx)(n.td,{children:"507"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"1"}),(0,a.jsx)(n.td,{children:"2"}),(0,a.jsx)(n.td,{children:"c8522790-0067-484b-bb37-d39ae80db98b"}),(0,a.jsx)(n.td,{children:"139823225568656"}),(0,a.jsx)(n.td,{children:"139823225563040"}),(0,a.jsx)(n.td,{children:"fb0ef547-a2ac-428b-8c20-a5e63263b8e1"}),(0,a.jsx)(n.td,{children:"You are a helpful AI assistant.\\nSolve tasks u..."}),(0,a.jsx)(n.td,{children:"The height of the Eiffel Tower is approximatel..."}),(0,a.jsx)(n.td,{children:"1"}),(0,a.jsx)(n.td,{children:"0.01572"}),(0,a.jsx)(n.td,{children:"2024-02-13 15:06:23.498758"}),(0,a.jsx)(n.td,{children:"2024-02-13 15:06:23.499045"}),(0,a.jsx)(n.td,{children:"507"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"2"}),(0,a.jsx)(n.td,{children:"3"}),(0,a.jsx)(n.td,{children:"91c3f6c0-c6f7-4306-89cd-f304c9556de4"}),(0,a.jsx)(n.td,{children:"139823225449024"}),(0,a.jsx)(n.td,{children:"139819166072448"}),(0,a.jsx)(n.td,{children:"6e08f3e0-392b-434e-8b69-4ab36c4fcf99"}),(0,a.jsx)(n.td,{children:"You are a helpful AI assistant.\\nSolve tasks u..."}),(0,a.jsx)(n.td,{children:"The height of the Eiffel Tower is approximatel..."}),(0,a.jsx)(n.td,{children:"1"}),(0,a.jsx)(n.td,{children:"0.01572"}),(0,a.jsx)(n.td,{children:"2024-02-13 15:06:24.688990"}),(0,a.jsx)(n.td,{children:"2024-02-13 15:06:24.689238"}),(0,a.jsx)(n.td,{children:"507"})]})]})]}),"\n",(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[2]}}),"\n",(0,a.jsx)(n.h2,{id:"computing-cost",children:"Computing Cost"}),"\n",(0,a.jsx)(n.p,{children:"One use case of logging data is to compute the cost of a session."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Sum totoal tokens for all sessions\ntotal_tokens = log_data_df["total_tokens"].sum()\n\n# Sum total cost for all sessions\ntotal_cost = log_data_df["cost"].sum()\n\n# Total tokens for specific session\nsession_tokens = log_data_df[log_data_df["session_id"] == logging_session_id]["total_tokens"].sum()\nsession_cost = log_data_df[log_data_df["session_id"] == logging_session_id]["cost"].sum()\n\nprint("Total tokens for all sessions: " + str(total_tokens) + ", total cost: " + str(round(total_cost, 4)))\nprint(\n    "Total tokens for session "\n    + str(logging_session_id)\n    + ": "\n    + str(session_tokens)\n    + ", cost: "\n    + str(round(session_cost, 4))\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Total tokens for all sessions: 1521, total cost: 0.0472\nTotal tokens for session 6e08f3e0-392b-434e-8b69-4ab36c4fcf99: 507, cost: 0.0157\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},3914:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>d,toc:()=>l});var a=t(5893),o=t(1151);const i={tags:["sequential chat"],description:"Use conversational agents to solve a set of tasks with a sequence of async chats.\n",source_notebook:"/notebook/agentchat_multi_task_async_chats.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_multi_task_async_chats.ipynb",title:"Solving Multiple Tasks in a Sequence of Async Chats"},s="Solving Multiple Tasks in a Sequence of Async Chats",r={id:"notebooks/agentchat_multi_task_async_chats",title:"Solving Multiple Tasks in a Sequence of Async Chats",description:"Use conversational agents to solve a set of tasks with a sequence of async chats.\n",source:"@site/docs/notebooks/agentchat_multi_task_async_chats.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_multi_task_async_chats",permalink:"/autogen/docs/notebooks/agentchat_multi_task_async_chats",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_multi_task_async_chats.ipynb",tags:[{label:"sequential chat",permalink:"/autogen/docs/tags/sequential-chat"}],version:"current",frontMatter:{tags:["sequential chat"],description:"Use conversational agents to solve a set of tasks with a sequence of async chats.\n",source_notebook:"/notebook/agentchat_multi_task_async_chats.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_multi_task_async_chats.ipynb",title:"Solving Multiple Tasks in a Sequence of Async Chats"},sidebar:"notebooksSidebar",previous:{title:"Runtime Logging with AutoGen",permalink:"/autogen/docs/notebooks/agentchat_logging"},next:{title:"Solving Multiple Tasks in a Sequence of Chats",permalink:"/autogen/docs/notebooks/agentchat_multi_task_chats"}},c={},l=[{value:"Example Tasks",id:"example-tasks",level:3},{value:"Scenario 1: Solve the tasks with a series of chats",id:"scenario-1-solve-the-tasks-with-a-series-of-chats",level:3},{value:"Check chat results",id:"check-chat-results",level:4},{value:"Scenario 2: With human inputs revising tasks in the middle",id:"scenario-2-with-human-inputs-revising-tasks-in-the-middle",level:3},{value:"Check chat results",id:"check-chat-results-1",level:4},{value:"Scenario 3: Solve the tasks with a series of chats involving group chat",id:"scenario-3-solve-the-tasks-with-a-series-of-chats-involving-group-chat",level:3}],d=['\x3c!--\ntags: ["sequential chat"]\ndescription: |\n    Use conversational agents to solve a set of tasks with a sequence of async chats.\n--\x3e'];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[0]}}),"\n",(0,a.jsx)(n.h1,{id:"solving-multiple-tasks-in-a-sequence-of-async-chats",children:"Solving Multiple Tasks in a Sequence of Async Chats"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_multi_task_async_chats.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_multi_task_async_chats.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["This notebook showcases how to use the new chat interface of\nconversational agents in AutoGen: a_initiate_chats, to conduct a series\nof tasks. Similar to \u201cnotebook/agentchat_microsoft_fabric.ipynb\u201d, this\nnew interface allows one to pass multiple tasks and their corresponding\ndedicated agents and execute concurrently. Depending on the prerequisite\ntask(s), the tasks will be solved concurrently, with the summaries from\nprerequisite task(s) provided to subsequent tasks as context, if the\n",(0,a.jsx)(n.code,{children:"summary_method"})," argument is specified."]}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsxs)(n.p,{children:["Install ",(0,a.jsx)(n.code,{children:"pyautogen"}),":"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"../../docs/installation/",children:"installation\nguide"}),"."]})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import autogen\n\nconfig_list = autogen.config_list_from_json(env_or_file="OAI_CONFIG_LIST")\nllm_config = {"config_list": config_list}\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about the various ways to configure LLM endpoints\n",(0,a.jsx)(n.a,{href:"../../docs/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"example-tasks",children:"Example Tasks"}),"\n",(0,a.jsx)(n.p,{children:"Below are four example tasks, with each task being a string of text\ndescribing the request. The completion of later tasks requires or\nbenefits from the results of prerequisite tasks."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'financial_tasks = [\n    """What are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?""",\n    """Investigate possible reasons of the stock performance.""",\n    """Plot a graph comparing the stock prices over the past month.""",\n]\n\nwriting_tasks = ["""Develop an engaging blog post using any information provided."""]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"scenario-1-solve-the-tasks-with-a-series-of-chats",children:"Scenario 1: Solve the tasks with a series of chats"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"initiate_chats"})," interface can take a list of dictionaries as\ninputs. Each dictionary preserves the following fields: - ",(0,a.jsx)(n.code,{children:"message"}),": is\na string of text (typically a message containing the task); -\n",(0,a.jsx)(n.code,{children:"recipient"}),": a conversable agent dedicated for the task; -\n",(0,a.jsx)(n.code,{children:"summary_method"}),": A string specifying the method to get a summary from\nthe chat. Currently supported choices include ",(0,a.jsx)(n.code,{children:"last_msg"}),", which takes\nthe last message from the chat history as the summary, and\n",(0,a.jsx)(n.code,{children:"reflection_with_llm"}),", which uses an LLM call to reflect on the chat\nhistory and summarize a takeaway; - ",(0,a.jsx)(n.code,{children:"summary_prompt"}),": A string\nspecifying how to instruct an LLM-backed agent (either the recipient or\nthe sender in the chat) to reflect on the chat history and derive a\nsummary. If not otherwise specified, a default prompt will be used when\n",(0,a.jsx)(n.code,{children:"summary_method"})," is ",(0,a.jsx)(n.code,{children:"reflection_with_llm"}),". \u201cSummarize the takeaway from\nthe conversation. Do not add any introductory phrases. If the intended\nrequest is NOT properly addressed, please point it out.\u201d - ",(0,a.jsx)(n.code,{children:"carryover"}),":\nA string or a list of string to specify additional context to be used in\nthe chat. With ",(0,a.jsx)(n.code,{children:"initiate_chats"}),", summary from previous chats will be\nadded as carryover. They will be appended after the carryover provided\nby the user."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'financial_assistant = autogen.AssistantAgent(\n    name="Financial_assistant",\n    llm_config=llm_config,\n)\nresearch_assistant = autogen.AssistantAgent(\n    name="Researcher",\n    llm_config=llm_config,\n)\nwriter = autogen.AssistantAgent(\n    name="writer",\n    llm_config=llm_config,\n    system_message="""\n        You are a professional writer, known for\n        your insightful and engaging articles.\n        You transform complex concepts into compelling narratives.\n        Reply "TERMINATE" in the end when everything is done.\n        """,\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'user = autogen.UserProxyAgent(\n    name="User",\n    human_input_mode="NEVER",\n    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "tasks",\n        "use_docker": False,\n    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n)\n\nchat_results = await user.a_initiate_chats(  # noqa: F704\n    [\n        {\n            "chat_id": 1,\n            "recipient": financial_assistant,\n            "message": financial_tasks[0],\n            "silent": False,\n            "summary_method": "reflection_with_llm",\n        },\n        {\n            "chat_id": 2,\n            "prerequisites": [1],\n            "recipient": research_assistant,\n            "message": financial_tasks[1],\n            "silent": True,\n            "summary_method": "reflection_with_llm",\n        },\n        {\n            "chat_id": 3,\n            "prerequisites": [1],\n            "recipient": financial_assistant,\n            "message": financial_tasks[2],\n            "silent": False,\n            "summary_method": "reflection_with_llm",\n        },\n        {"chat_id": 4, "prerequisites": [1, 2, 3], "recipient": writer, "message": writing_tasks[0]},\n    ]\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n********************************************************************************\nStart a new chat with the following message: \nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\nWith the following carryover: \n\n\n********************************************************************************\nUser (to Financial_assistant):\n\nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nTo fetch live stock data, we can make use of the \"yfinance\" library in Python, which allows us to download stock data from Yahoo Finance.\n\nInstall \"yfinance\" by executing the following Python code:\n\n```python\n!pip install yfinance\n```\n\nThen, get the current stock prices and compute the performance over the past month using the following code:\n\n```python\nimport yfinance as yf\nfrom datetime import datetime, timedelta\n\n# Define the ticker symbols\ntickers = ['NVDA', 'TSLA']\n\n# Get today's date\ntoday = datetime.today().strftime('%Y-%m-%d')\n\n# Get the date one month ago\none_month_ago = (datetime.today() - timedelta(days=30)).strftime('%Y-%m-%d')\n\n# Initialize a dictionary to store the data\ndata = {}\n\n# Loop through the ticker symbols\nfor ticker in tickers:\n    # Get the historical data for the past month\n    historical_data = yf.download(ticker, start=one_month_ago, end=today)\n\n    # Get the most recent data (today's data)\n    today_data = historical_data.tail(1)\n\n    # Get the earliest data (one month ago's data)\n    one_month_ago_data = historical_data.head(1)\n\n    # Calculate the percentage change over the past month\n    percentage_change = ((today_data['Close'].iloc[0] - one_month_ago_data['Close'].iloc[0]) / one_month_ago_data['Close'].iloc[0]) * 100\n\n    # Store the data in the dictionary\n    data[ticker] = {\n        'Current Stock Price': today_data['Close'].iloc[0],\n        'Performance Over Past Month (%)': percentage_change\n    }\n\n# Print the data\nfor ticker, d in data.items():\n    print(f\"{ticker}:\")\n    print(f\"\\tCurrent Stock Price: ${d['Current Stock Price']:.2f}\")\n    print(f\"\\tPerformance Over Past Month (%): {d['Performance Over Past Month (%)']:.2f}%\")\n```\n\nThis Python script retrieves the historical data for the past month for each ticker symbol, calculates the percentage change in stock price over the past month, and prints out the current stock price and the performance over the past month.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser (to Financial_assistant):\n\nexitcode: 1 (execution failed)\nCode output: \n  File \"\", line 1\n    !pip install yfinance\n    ^\nSyntaxError: invalid syntax\n\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nI apologize for the confusion. The \"!\" character is special syntax for Jupyter notebooks. If you are not using a Jupyter notebook for Python execution, the syntax will be invalid. Please replace \"!\" with the proper syntax to install a Python package. \n\nIf you're running the code directly in a Python environment, you might need to install yfinance using pip from your shell/command line. Here's the correct command:\n\n```sh\npip install yfinance\n```\n\nAfter you've installed the package, you can proceed with the Python code block provided previously to fetch the data.\n\nSorry for the misunderstanding, and thank you for pointing it out.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is sh)...\nUser (to Financial_assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: yfinance in /home/autogen/.local/lib/python3.11/site-packages (0.2.36)\nRequirement already satisfied: pandas>=1.3.0 in /home/autogen/.local/lib/python3.11/site-packages (from yfinance) (2.2.0)\nRequirement already satisfied: numpy>=1.16.5 in /usr/local/lib/python3.11/site-packages (from yfinance) (1.26.4)\nRequirement already satisfied: requests>=2.31 in /usr/local/lib/python3.11/site-packages (from yfinance) (2.31.0)\nRequirement already satisfied: multitasking>=0.0.7 in /home/autogen/.local/lib/python3.11/site-packages (from yfinance) (0.0.11)\nRequirement already satisfied: lxml>=4.9.1 in /home/autogen/.local/lib/python3.11/site-packages (from yfinance) (5.1.0)\nRequirement already satisfied: appdirs>=1.4.4 in /home/autogen/.local/lib/python3.11/site-packages (from yfinance) (1.4.4)\nRequirement already satisfied: pytz>=2022.5 in /home/autogen/.local/lib/python3.11/site-packages (from yfinance) (2024.1)\nRequirement already satisfied: frozendict>=2.3.4 in /home/autogen/.local/lib/python3.11/site-packages (from yfinance) (2.4.0)\nRequirement already satisfied: peewee>=3.16.2 in /home/autogen/.local/lib/python3.11/site-packages (from yfinance) (3.17.1)\nRequirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.11/site-packages (from yfinance) (4.12.3)\nRequirement already satisfied: html5lib>=1.1 in /home/autogen/.local/lib/python3.11/site-packages (from yfinance) (1.1)\nRequirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\nRequirement already satisfied: six>=1.9 in /usr/local/lib/python3.11/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\nRequirement already satisfied: webencodings in /usr/local/lib/python3.11/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/site-packages (from pandas>=1.3.0->yfinance) (2.8.2)\nRequirement already satisfied: tzdata>=2022.7 in /home/autogen/.local/lib/python3.11/site-packages (from pandas>=1.3.0->yfinance) (2024.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/site-packages (from requests>=2.31->yfinance) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/site-packages (from requests>=2.31->yfinance) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /home/autogen/.local/lib/python3.11/site-packages (from requests>=2.31->yfinance) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/site-packages (from requests>=2.31->yfinance) (2024.2.2)\n\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nGreat! Now that the yfinance package is properly installed, we can proceed to fetch the data.\n\nPlease execute the Python code as shown below:\n\n```python\nimport yfinance as yf\nfrom datetime import datetime, timedelta\n\n# Define the ticker symbols\ntickers = ['NVDA', 'TSLA']\n\n# Get today's date\ntoday = datetime.today().strftime('%Y-%m-%d')\n\n# Get the date one month ago\none_month_ago = (datetime.today() - timedelta(days=30)).strftime('%Y-%m-%d')\n\n# Initialize a dictionary to store the data\ndata = {}\n\n# Loop through the ticker symbols\nfor ticker in tickers:\n    # Get the historical data for the past month\n    historical_data = yf.download(ticker, start=one_month_ago, end=today)\n\n    # Get the most recent data (today's data)\n    today_data = historical_data.tail(1)\n\n    # Get the earliest data (one month ago's data)\n    one_month_ago_data = historical_data.head(1)\n\n    # Calculate the percentage change over the past month\n    percentage_change = ((today_data['Close'].iloc[0] - one_month_ago_data['Close'].iloc[0]) / one_month_ago_data['Close'].iloc[0]) * 100\n\n    # Store the data in the dictionary\n    data[ticker] = {\n        'Current Stock Price': today_data['Close'].iloc[0],\n        'Performance Over Past Month (%)': percentage_change\n    }\n\n# Print the data\nfor ticker, d in data.items():\n    print(f\"{ticker}:\")\n    print(f\"\\tCurrent Stock Price: ${d['Current Stock Price']:.2f}\")\n    print(f\"\\tPerformance Over Past Month (%): {d['Performance Over Past Month (%)']:.2f}%\")\n```\n\nThis script fetches the current stock prices for NVDA and TSLA and the performance over the past one month in terms of percentage change.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser (to Financial_assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nNVDA:\n    Current Stock Price: $726.13\n    Performance Over Past Month (%): 21.72%\nTSLA:\n    Current Stock Price: $199.95\n    Performance Over Past Month (%): -4.24%\n\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nGreat! Here are the results:\n\n- NVDA: \n  - Current Stock Price: $726.13\n  - Performance Over Past Month (%): 21.72%\n\n- TSLA:\n  - Current Stock Price: $199.95\n  - Performance Over Past Month (%): -4.24%\n\nOver the past month, the stock price of NVDA increased by 21.72%, while the stock price of TSLA decreased by 4.24%.\n   \nPlease note that stock prices are subject to market changes and the output values from when you ran this script.\n\nIf you have any other tasks or need further assistance, please feel free to ask. \n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n********************************************************************************\nStart a new chat with the following message: \nInvestigate possible reasons of the stock performance.\n\nWith the following carryover: \nThe NVDA current stock price is $726.13, and the percentage change over the past month is an increase of 21.72%. The TSLA current stock price is $199.95, with a decrease of 4.24% over the past month.\n\n********************************************************************************\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is Shell)...\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\n\n********************************************************************************\nStart a new chat with the following message: \nPlot a graph comparing the stock prices over the past month.\n\nWith the following carryover: \nThe NVDA current stock price is $726.13, and the percentage change over the past month is an increase of 21.72%. The TSLA current stock price is $199.95, with a decrease of 4.24% over the past month.\n\n********************************************************************************\nUser (to Financial_assistant):\n\nPlot a graph comparing the stock prices over the past month.\nContext: \nThe NVDA current stock price is $726.13, and the percentage change over the past month is an increase of 21.72%. The TSLA current stock price is $199.95, with a decrease of 4.24% over the past month.\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nTo complete this task, we need historical stock price data for NVDA and TSLA for the past month. However, as I cannot browse the web or fetch live data directly, let's simulate this by inferring the past month's data based on the provided information.\n\nWe have the current stock price and the percentage change for NVDA and TSLA over the past month. We can calculate the stock price one month ago by reversing the percentage change calculation. \n\nLet's also assume for the sake of this task that the stock prices changed linearly over the past month. In reality, stock prices fluctuate daily, so the graph would be more complex, but we can't recreate those fluctuations with just two data points. \n\nWe can use the `matplotlib` library in Python to plot this data. Please execute the following Python code:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Current prices and percentage changes\nNVDA_current_price = 726.13\nNVDA_change_pct = 21.72\nTSLA_current_price = 199.95\nTSLA_change_pct = -4.24\n\n# Calculate prices one month ago\nNVDA_price_month_ago = NVDA_current_price / (1 + NVDA_change_pct/100)\nTSLA_price_month_ago = TSLA_current_price / (1 - TSLA_change_pct/100)\n\n# Create arrays for plotting\ndates = np.array(['One month ago', 'Today'])\nNVDA_prices = np.array([NVDA_price_month_ago, NVDA_current_price])\nTSLA_prices = np.array([TSLA_price_month_ago, TSLA_current_price])\n\n# Plotting\nplt.plot(dates, NVDA_prices, label='NVDA')\nplt.plot(dates, TSLA_prices, label='TSLA')\nplt.legend()\nplt.ylabel('Stock price')\nplt.title('Stock prices over the past month')\nplt.show()\n```\n\nThis script plots the \"past\" and current stock prices for NVDA and TSLA. It creates a line graph with the date on the x-axis and the stock price on the y-axis. It also adds a title to the graph and a legend indicating which line corresponds to which stock.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser (to Financial_assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nFigure(640x480)\n\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nGreat! The code ran successfully. The `Figure(640x480)` statement denotes the size of the displayed figure, but it's not the actual graph. \n\nIn a typical interactive Python environment, the `plt.show()` function directly displays the plot. Since the execution environment here may not support interactive display of the graph, you're not seeing the graph as an output. \n\nYou'd usually see a line chart with two lines, one for NVDA and one for TSLA, indicating their price change from one month ago to today.\n\nSorry for the inconvenience caused by the visualization constraints of the current interaction mode. You can try running the exact same code in an interactive Python environment like Jupyter Notebook or Google Colab, and you would be able to see the graph.\n\nI hope you found my assistance helpful in understanding the logic and code to plot the stock prices of NVDA and TSLA. If you have any further questions or tasks, feel free to ask. \n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n********************************************************************************\nStart a new chat with the following message: \nDevelop an engaging blog post using any information provided.\n\nWith the following carryover: \nThe NVDA current stock price is $726.13, and the percentage change over the past month is an increase of 21.72%. The TSLA current stock price is $199.95, with a decrease of 4.24% over the past month.\nThere's been a recent increase in NVDA's stock performance and a decrease in TSLA's. The AI provided a script that fetches news headlines about these stocks to understand their performance. Based on the fetched headlines, some factors driving NVDA's stock increase could include imminent earnings reports and a debate about the company's value. The decrease in TSLA stock price could potentially be linked to uncertainties or confusions about its valuation. However, these interpretations are based only on a limited number of news headlines, and other recent events not covered by these headlines could also be influencing the stocks' performance.\nThe assistant provided a detailed way to create a mock graph comparing the stock prices of NVDA and TSLA over the past month, given the current prices and percentage changes. However, due to the assistant's inability to browse the web or fetch live data, and the current platform's inability to display plots, the final graph couldn't be shown. The assistant suggested running the provided Python code in an interactive Python environment like Jupyter Notebook or Google Colab to visualize the graph properly.\n\n********************************************************************************\nUser (to writer):\n\nDevelop an engaging blog post using any information provided.\nContext: \nThe NVDA current stock price is $726.13, and the percentage change over the past month is an increase of 21.72%. The TSLA current stock price is $199.95, with a decrease of 4.24% over the past month.\nThere's been a recent increase in NVDA's stock performance and a decrease in TSLA's. The AI provided a script that fetches news headlines about these stocks to understand their performance. Based on the fetched headlines, some factors driving NVDA's stock increase could include imminent earnings reports and a debate about the company's value. The decrease in TSLA stock price could potentially be linked to uncertainties or confusions about its valuation. However, these interpretations are based only on a limited number of news headlines, and other recent events not covered by these headlines could also be influencing the stocks' performance.\nThe assistant provided a detailed way to create a mock graph comparing the stock prices of NVDA and TSLA over the past month, given the current prices and percentage changes. However, due to the assistant's inability to browse the web or fetch live data, and the current platform's inability to display plots, the final graph couldn't be shown. The assistant suggested running the provided Python code in an interactive Python environment like Jupyter Notebook or Google Colab to visualize the graph properly.\n\n--------------------------------------------------------------------------------\nwriter (to User):\n\nTitle: Navigating the Highs and Lows: A Tale of Two Stocks- NVDA and TSLA\n\nIf you've been tracking the stock market recently, you might have noticed some significant activity involving two household names. These tech juggernauts- NVIDIA Corp (NVDA) and Tesla Inc (TSLA), have experienced significantly contrasting fortunes over the past month. \n\nAs of now, the NVDA stock price stands at a lofty $726.13, soaring an astonishing 21.72% in the past month. TSLA, however, has had a bumpier ride, with the current price of $199.95 reflecting a 4.24% decrease during the same period. \n\nWhat's driving the surging ascent of NVDA and the faltering trajectory of TSLA, you might ask? Well, sometimes the answers can be found in the daily news cycle.\n\nAccording to news headlines fetched by our AI assistant, NVDA's recent skyrocket can potentially be linked to events like imminent earnings reports and a burgeoning debate around the company's value. These factors have managed to cast a positive light on the company. Investors may perceive them as indicators of a prospective growth, triggering increased stock purchases. \n\nYet, every coin has two sides. For TSLA, recent news may have spread more confusion and uncertainty than confidence. Headlines pointing to ambiguities about the company's valuation have clouded its fiscal outlook, leading to a softening of the stock price. \n\nBefore attaching too much weight to these possibilities, it's essential to highlight that news headlines offers just a fraction of the full picture. The market's pulse is influenced by a plethora of factors, with many taking place behind headlines. Hence, while headlines undeniably play a role in influencing stock performance, they should be only part of any comprehensive market analysis.\n\nTo provide a deeper understanding of these stock trajectories, our AI helper put forth a detailed method to mock up a comparative graph of NVDA and TSLA prices over the past month. However, our current environment lacks the capability for web browsing or live data fetching, so the visualization isn\u2019t available in this post. For those keen to see the graphical view, we recommend inputting the provided Python code into an interactive Python environment like Jupyter Notebook or Google Colab.\n\nWhether you're an experienced trader or a budding market enthusiast, understanding the forces moving major stocks like NVDA and TSLA can give you valuable insight into the tech industry's overall health and future direction. So, keep those news alerts on, keep questioning, and keep connecting the dots.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.h4,{id:"check-chat-results",children:"Check chat results"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"initiate_chat"})," method returns a ",(0,a.jsx)(n.code,{children:"ChatResult"})," object, which is a\ndataclass object storing information about the chat. Currently, it\nincludes the following attributes:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"chat_history"}),": a list of chat history."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"summary"}),": a string of chat summary. A summary is only available if\na summary_method is provided when initiating the chat."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"cost"}),": a tuple of (total_cost, total_actual_cost), where total_cost\nis a dictionary of cost information, and total_actual_cost is a\ndictionary of information on the actual incurred cost with cache."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"human_input"}),": a list of strings of human inputs solicited during\nthe chat. (Note that since we are setting ",(0,a.jsx)(n.code,{children:"human_input_mode"})," to\n",(0,a.jsx)(n.code,{children:"NEVER"})," in this notebook, this list is always empty.)"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'for i, chat_res in chat_results.items():\n    print(f"*****{i}th chat*******:")\n    print(chat_res.summary)\n    print("Human input in the middle:", chat_res.human_input)\n    print("Conversation cost: ", chat_res.cost)\n    print("\\n\\n")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"*****1th chat*******:\nThe NVDA current stock price is $726.13, and the percentage change over the past month is an increase of 21.72%. The TSLA current stock price is $199.95, with a decrease of 4.24% over the past month.\nHuman input in the middle: []\nConversation cost:  ({'total_cost': 0.9493499999999998, 'gpt-4-0613': {'cost': 0.9493499999999998, 'prompt_tokens': 22291, 'completion_tokens': 4677, 'total_tokens': 26968}}, {'total_cost': 0.26868, 'gpt-4-0613': {'cost': 0.26868, 'prompt_tokens': 5408, 'completion_tokens': 1774, 'total_tokens': 7182}})\n\n\n\n*****2th chat*******:\nThere's been a recent increase in NVDA's stock performance and a decrease in TSLA's. The AI provided a script that fetches news headlines about these stocks to understand their performance. Based on the fetched headlines, some factors driving NVDA's stock increase could include imminent earnings reports and a debate about the company's value. The decrease in TSLA stock price could potentially be linked to uncertainties or confusions about its valuation. However, these interpretations are based only on a limited number of news headlines, and other recent events not covered by these headlines could also be influencing the stocks' performance.\nHuman input in the middle: []\nConversation cost:  ({'total_cost': 0.58845, 'gpt-4-0613': {'cost': 0.58845, 'prompt_tokens': 12177, 'completion_tokens': 3719, 'total_tokens': 15896}}, {'total_cost': 0.36668999999999996, 'gpt-4-0613': {'cost': 0.36668999999999996, 'prompt_tokens': 8801, 'completion_tokens': 1711, 'total_tokens': 10512}})\n\n\n\n*****3th chat*******:\nThe assistant provided a detailed way to create a mock graph comparing the stock prices of NVDA and TSLA over the past month, given the current prices and percentage changes. However, due to the assistant's inability to browse the web or fetch live data, and the current platform's inability to display plots, the final graph couldn't be shown. The assistant suggested running the provided Python code in an interactive Python environment like Jupyter Notebook or Google Colab to visualize the graph properly.\nHuman input in the middle: []\nConversation cost:  ({'total_cost': 1.0658699999999997, 'gpt-4-0613': {'cost': 1.0658699999999997, 'prompt_tokens': 24657, 'completion_tokens': 5436, 'total_tokens': 30093}}, {'total_cost': 0.26868, 'gpt-4-0613': {'cost': 0.26868, 'prompt_tokens': 5408, 'completion_tokens': 1774, 'total_tokens': 7182}})\n\n\n\n*****4th chat*******:\nTitle: Navigating the Highs and Lows: A Tale of Two Stocks- NVDA and TSLA\n\nIf you've been tracking the stock market recently, you might have noticed some significant activity involving two household names. These tech juggernauts- NVIDIA Corp (NVDA) and Tesla Inc (TSLA), have experienced significantly contrasting fortunes over the past month. \n\nAs of now, the NVDA stock price stands at a lofty $726.13, soaring an astonishing 21.72% in the past month. TSLA, however, has had a bumpier ride, with the current price of $199.95 reflecting a 4.24% decrease during the same period. \n\nWhat's driving the surging ascent of NVDA and the faltering trajectory of TSLA, you might ask? Well, sometimes the answers can be found in the daily news cycle.\n\nAccording to news headlines fetched by our AI assistant, NVDA's recent skyrocket can potentially be linked to events like imminent earnings reports and a burgeoning debate around the company's value. These factors have managed to cast a positive light on the company. Investors may perceive them as indicators of a prospective growth, triggering increased stock purchases. \n\nYet, every coin has two sides. For TSLA, recent news may have spread more confusion and uncertainty than confidence. Headlines pointing to ambiguities about the company's valuation have clouded its fiscal outlook, leading to a softening of the stock price. \n\nBefore attaching too much weight to these possibilities, it's essential to highlight that news headlines offers just a fraction of the full picture. The market's pulse is influenced by a plethora of factors, with many taking place behind headlines. Hence, while headlines undeniably play a role in influencing stock performance, they should be only part of any comprehensive market analysis.\n\nTo provide a deeper understanding of these stock trajectories, our AI helper put forth a detailed method to mock up a comparative graph of NVDA and TSLA prices over the past month. However, our current environment lacks the capability for web browsing or live data fetching, so the visualization isn\u2019t available in this post. For those keen to see the graphical view, we recommend inputting the provided Python code into an interactive Python environment like Jupyter Notebook or Google Colab.\n\nWhether you're an experienced trader or a budding market enthusiast, understanding the forces moving major stocks like NVDA and TSLA can give you valuable insight into the tech industry's overall health and future direction. So, keep those news alerts on, keep questioning, and keep connecting the dots.\n\n\nHuman input in the middle: []\nConversation cost:  ({'total_cost': 0.13599, 'gpt-4-0613': {'cost': 0.13599, 'prompt_tokens': 1043, 'completion_tokens': 1745, 'total_tokens': 2788}}, {'total_cost': 0.13599, 'gpt-4-0613': {'cost': 0.13599, 'prompt_tokens': 1043, 'completion_tokens': 1745, 'total_tokens': 2788}})\n\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"scenario-2-with-human-inputs-revising-tasks-in-the-middle",children:"Scenario 2: With human inputs revising tasks in the middle"}),"\n",(0,a.jsxs)(n.p,{children:["Since AutoGen agents support soliciting human inputs during a chat if\n",(0,a.jsx)(n.code,{children:"human_input_mode"})," is specificed properly, the actual task might be\nrevised in the middle of a chat."]}),"\n",(0,a.jsx)(n.p,{children:"The example below showcases that even if a task is revised in the middle\n(for the first task, the human user requests to get Microsoft\u2019s stock\nprice information as well, in addition to NVDA and TSLA), the\n`reflection_with_llm`` summary method can still capture it, as it\nreflects on the whole conversation instead of just the original request."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'user = autogen.UserProxyAgent(\n    name="User",\n    human_input_mode="ALWAYS",  # ask human for input at each step\n    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "tasks",\n        "use_docker": False,\n    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n)\n\nchat_results = await user.a_initiate_chats(  # noqa: F704\n    [\n        {\n            "chat_id": 1,\n            "recipient": financial_assistant,\n            "message": financial_tasks[0],\n            "silent": False,\n            "summary_method": "reflection_with_llm",\n        },\n        {\n            "chat_id": 2,\n            "prerequisites": [1],\n            "recipient": research_assistant,\n            "message": financial_tasks[1],\n            "silent": True,\n            "summary_method": "reflection_with_llm",\n        },\n        {\n            "chat_id": 3,\n            "prerequisites": [1],\n            "recipient": financial_assistant,\n            "message": financial_tasks[2],\n            "silent": False,\n            "summary_method": "reflection_with_llm",\n        },\n        {"chat_id": 4, "prerequisites": [1, 2, 3], "recipient": writer, "message": writing_tasks[0]},\n    ]\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n********************************************************************************\nStart a new chat with the following message: \nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\nWith the following carryover: \n\n\n********************************************************************************\nUser (to Financial_assistant):\n\nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nTo fetch live stock data, we can make use of the \"yfinance\" library in Python, which allows us to download stock data from Yahoo Finance.\n\nInstall \"yfinance\" by executing the following Python code:\n\n```python\n!pip install yfinance\n```\n\nThen, get the current stock prices and compute the performance over the past month using the following code:\n\n```python\nimport yfinance as yf\nfrom datetime import datetime, timedelta\n\n# Define the ticker symbols\ntickers = ['NVDA', 'TSLA']\n\n# Get today's date\ntoday = datetime.today().strftime('%Y-%m-%d')\n\n# Get the date one month ago\none_month_ago = (datetime.today() - timedelta(days=30)).strftime('%Y-%m-%d')\n\n# Initialize a dictionary to store the data\ndata = {}\n\n# Loop through the ticker symbols\nfor ticker in tickers:\n    # Get the historical data for the past month\n    historical_data = yf.download(ticker, start=one_month_ago, end=today)\n\n    # Get the most recent data (today's data)\n    today_data = historical_data.tail(1)\n\n    # Get the earliest data (one month ago's data)\n    one_month_ago_data = historical_data.head(1)\n\n    # Calculate the percentage change over the past month\n    percentage_change = ((today_data['Close'].iloc[0] - one_month_ago_data['Close'].iloc[0]) / one_month_ago_data['Close'].iloc[0]) * 100\n\n    # Store the data in the dictionary\n    data[ticker] = {\n        'Current Stock Price': today_data['Close'].iloc[0],\n        'Performance Over Past Month (%)': percentage_change\n    }\n\n# Print the data\nfor ticker, d in data.items():\n    print(f\"{ticker}:\")\n    print(f\"\\tCurrent Stock Price: ${d['Current Stock Price']:.2f}\")\n    print(f\"\\tPerformance Over Past Month (%): {d['Performance Over Past Month (%)']:.2f}%\")\n```\n\nThis Python script retrieves the historical data for the past month for each ticker symbol, calculates the percentage change in stock price over the past month, and prints out the current stock price and the performance over the past month.\n\n--------------------------------------------------------------------------------\nUser (to Financial_assistant):\n\nPls add Microsoft information as well.\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nSure, let's add Microsoft (MSFT) to the list of tickers. Here's the updated Python code:\n\n```python\nimport yfinance as yf\nfrom datetime import datetime, timedelta\n\n# Define the ticker symbols\ntickers = ['NVDA', 'TSLA', 'MSFT']\n\n# Get today's date\ntoday = datetime.today().strftime('%Y-%m-%d')\n\n# Get the date one month ago\none_month_ago = (datetime.today() - timedelta(days=30)).strftime('%Y-%m-%d')\n\n# Initialize a dictionary to store the data\ndata = {}\n\n# Loop through the ticker symbols\nfor ticker in tickers:\n    # Get the historical data for the past month\n    historical_data = yf.download(ticker, start=one_month_ago, end=today)\n\n    # Get the most recent data (today's data)\n    today_data = historical_data.tail(1)\n\n    # Get the earliest data (one month ago's data)\n    one_month_ago_data = historical_data.head(1)\n\n    # Calculate the percentage change over the past month\n    percentage_change = ((today_data['Close'].iloc[0] - one_month_ago_data['Close'].iloc[0]) / one_month_ago_data['Close'].iloc[0]) * 100\n\n    # Store the data in the dictionary\n    data[ticker] = {\n        'Current Stock Price': today_data['Close'].iloc[0],\n        'Performance Over Past Month (%)': percentage_change\n    }\n\n# Print the data\nfor ticker, d in data.items():\n    print(f\"{ticker}:\")\n    print(f\"\\tCurrent Stock Price: ${d['Current Stock Price']:.2f}\")\n    print(f\"\\tPerformance Over Past Month (%): {d['Performance Over Past Month (%)']:.2f}%\")\n```\n\nThis is essentially the same script as before, but now it also fetches and processes stock data for Microsoft.\n\n--------------------------------------------------------------------------------\n\n********************************************************************************\nStart a new chat with the following message: \nInvestigate possible reasons of the stock performance.\n\nWith the following carryover: \nThe assistant provided a Python code to fetch the current stock prices and compute performance over the past month in terms of percentage change for the given stock ticker symbols, NVDA (NVIDIA Corp), TSLA (Tesla Inc), and MSFT (Microsoft Corp). This was done using the yfinance library which fetches the data from Yahoo Finance.\n\n********************************************************************************\n\n********************************************************************************\nStart a new chat with the following message: \nPlot a graph comparing the stock prices over the past month.\n\nWith the following carryover: \nThe assistant provided a Python code to fetch the current stock prices and compute performance over the past month in terms of percentage change for the given stock ticker symbols, NVDA (NVIDIA Corp), TSLA (Tesla Inc), and MSFT (Microsoft Corp). This was done using the yfinance library which fetches the data from Yahoo Finance.\n\n********************************************************************************\nUser (to Financial_assistant):\n\nPlot a graph comparing the stock prices over the past month.\nContext: \nThe assistant provided a Python code to fetch the current stock prices and compute performance over the past month in terms of percentage change for the given stock ticker symbols, NVDA (NVIDIA Corp), TSLA (Tesla Inc), and MSFT (Microsoft Corp). This was done using the yfinance library which fetches the data from Yahoo Finance.\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nGreat, I will create a Python script to download historical data for these stocks and plot a comparison graph using libraries such as pandas, yfinance and matplotlib for data handling, financial data fetching and plotting, respectively.\n\n```python\n# filename: stock_price_comparison.py\n\nimport yfinance as yf\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\n# define the ticker symbol\nticker_list = ['NVDA', 'TSLA', 'MSFT']\n\n# create empty dataframe\nstock_data = pd.DataFrame()\n\n# Fetch the data\nfor ticker in ticker_list: \n    stock = yf.Ticker(ticker)\n    temp = stock.history(period='1mo')\n    temp.reset_index(level=0, inplace=True)\n    temp['Ticker'] = ticker\n    stock_data = stock_data.append(temp)\n\n# Save each stock's closing price and date to a separate .csv\nfor ticker in ticker_list:\n    temp = stock_data[stock_data['Ticker'] == ticker]\n    temp[['Date', 'Close']].to_csv(f'{ticker}_closing_price.csv', index=False)\n\n# plot each stock's closing price in one graph\nplt.figure(figsize=(14, 6))\nfor ticker in ticker_list:\n    temp = stock_data[stock_data['Ticker'] == ticker]\n    plt.plot(temp['Date'], temp['Close'], label=ticker)\nplt.xlabel('Date')\nplt.ylabel('Close Price')\nplt.title('Stock Price over Past Month')\nplt.legend()\nplt.grid()\nplt.savefig('stock_price_comparison.png')\n\nprint(\"Stock price comparison graph saved as 'stock_price_comparison.png'.\")\n\n```\nThis script will fetch the stock prices for the past month of the specified companies, then it plots these on the same graph to compare. The graph is saved as a PNG image named \"stock_price_comparison.png\". Each stock's closing price and date data are also saved to a separate .csv file (e.g., \"NVDA_closing_price.csv\"). Please run this script and check the generated graph and files.\n\n--------------------------------------------------------------------------------\n\n********************************************************************************\nStart a new chat with the following message: \nDevelop an engaging blog post using any information provided.\n\nWith the following carryover: \nThe assistant provided a Python code to fetch the current stock prices and compute performance over the past month in terms of percentage change for the given stock ticker symbols, NVDA (NVIDIA Corp), TSLA (Tesla Inc), and MSFT (Microsoft Corp). This was done using the yfinance library which fetches the data from Yahoo Finance.\nThe performance of a company's stock price could be influenced by various factors, including earnings reports, company announcements, market trends, economic indicators, and investor sentiment. To find out why a specific stock performed as it did, look out for any news, announcements, earnings report, or significant events that have occurred in the past month for that stock. Also, check the overall market trends and economic indicators during this period, and try to understand the investor sentiment towards the company. To fetch and analyze news related to a company, use the NewsAPI and Python requests library.\nThe assistant provided a Python code to fetch and compare the stock prices of NVIDIA Corp (NVDA), Tesla Inc (TSLA), and Microsoft Corp (MSFT) from the past month. The code uses the yfinance library to download historical data, pandas to manage the data, and matplotlib to plot the graph. It fetches the stock prices and plots them on a graph with date on the x-axis and closing price on the y-axis. The script saves the graph as a PNG image and the closing price and date of each stock in separate .csv files.\n\n\n********************************************************************************\nUser (to writer):\n\nDevelop an engaging blog post using any information provided.\nContext: \nThe assistant provided a Python code to fetch the current stock prices and compute performance over the past month in terms of percentage change for the given stock ticker symbols, NVDA (NVIDIA Corp), TSLA (Tesla Inc), and MSFT (Microsoft Corp). This was done using the yfinance library which fetches the data from Yahoo Finance.\nThe performance of a company's stock price could be influenced by various factors, including earnings reports, company announcements, market trends, economic indicators, and investor sentiment. To find out why a specific stock performed as it did, look out for any news, announcements, earnings report, or significant events that have occurred in the past month for that stock. Also, check the overall market trends and economic indicators during this period, and try to understand the investor sentiment towards the company. To fetch and analyze news related to a company, use the NewsAPI and Python requests library.\nThe assistant provided a Python code to fetch and compare the stock prices of NVIDIA Corp (NVDA), Tesla Inc (TSLA), and Microsoft Corp (MSFT) from the past month. The code uses the yfinance library to download historical data, pandas to manage the data, and matplotlib to plot the graph. It fetches the stock prices and plots them on a graph with date on the x-axis and closing price on the y-axis. The script saves the graph as a PNG image and the closing price and date of each stock in separate .csv files.\n\n\n--------------------------------------------------------------------------------\nwriter (to User):\n\n# Scripting the Stock Market: A Deeper Look into NVIDIA, Tesla, and Microsoft\n\nImagine being able to chart the highs and lows of your favorite stocks just by running a bit of code. Whether you're a seasoned investor or a curious newbie, understanding stock trends of top-performing companies like NVIDIA Corp (NVDA), Tesla Inc (TSLA), and Microsoft Corp (MSFT) can offer invaluable insights into the fast-paced world of finance. \n\nTraditionally, this type of analysis would require countless hours spent poring over dense financial documents, analyzing figures, and making educated guesses. Yet, with Python, the prospect of quickly reviewing stock performances isn't just possible\u2014it's incredibly accessible and surprisingly engaging.\n\n## Harnessing Python and Yahoo Finance Data\n\nIn the world where data reigns supreme, the clever use of Python code makes it a cinch to fetch current stock prices and calculate performance over a given period. The yfinance library proves invaluable here. It fetches data from Yahoo Finance, sparing you the hassle of data collection. \n\nWith just a Python script, you can instruct your computer to fetch and analyze the last month's performance for NVDA, TSLA, and MSFT in terms of percentage. This simplifies the process of understanding what\u2019s been happening with these dynamite stocks recently. \n\n## Unravel the Mystery Behind Stock Performance\n\nOf course, knowing a stock's performance is just the first step. Why does a particular stock perform the way it does? There\u2019s not always an easy answer, as stock performance can hinge on various factors. These mandators include company announcements, earnings reports, investor sentiment, market trends, and economic indicators.\n\nFor those of you hungry to know why NVDA, TSLA, or MSFT experienced a particular spike or dip, consider looking into any significant events, news, or announcements over the past month relating to that stock. Was there a breakthrough product announced? Perhaps a promising earnings report? Or maybe a broader market trend affected technology companies as a whole?\n\n## Dive Deeper with the NewsAPI\n\nOne way to stay afloat in the torrent of stock-related news is by using the NewsAPI in conjunction with the Python requests library. This combination assists in fetching and analyzing news related to the companies of your interest, keeping you abreast of events that might directly affect stock performance.\n\n## Visualize the Stock Prices with matplotlib\n\nVisualization is an absolute game-changer when it comes to understanding data, and yes, stock prices are no different whatsoever. Once you've fetched the stock prices using yfinance, you can use the Python libraries, pandas for data management and matplotlib for plotting. These tools allow you to graph the stocks' closing prices over the given period, providing a clear, visual summary of their performance. \n\nTo make the analysis even more concrete, the Python code stores the closing dates and prices of each stock in separate .csv files. This way, you always have a concrete log of the data breaking down the stock performances over time.\n\nAnd there you have it! Using Python, even the novice investors among us can dive headfirst into the sea of stock market analysis. As you get comfortable retrieving and analyzing stock data, you'll find the information you glean from this process invaluable, whether you're making personal investments or just following market trends out of interest.\n\nWelcome to the new era of stock analysis! Happy data crunching!\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"/workspaces/autogen/autogen/agentchat/chat.py:46: UserWarning: Repetitive recipients detected: The chat history will be cleared by default if a recipient appears more than once. To retain the chat history, please set 'clear_history=False' in the configuration of the repeating agent.\n  warnings.warn(\n"})}),"\n",(0,a.jsx)(n.h4,{id:"check-chat-results-1",children:"Check chat results"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'for i, chat_res in chat_results.items():\n    print(f"*****{i}th chat*******:")\n    print(chat_res.summary)\n    print("Human input in the middle:", chat_res.human_input)\n    print("Conversation cost: ", chat_res.cost)\n    print("\\n\\n")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"*****1th chat*******:\nThe assistant provided a Python code to fetch the current stock prices and compute performance over the past month in terms of percentage change for the given stock ticker symbols, NVDA (NVIDIA Corp), TSLA (Tesla Inc), and MSFT (Microsoft Corp). This was done using the yfinance library which fetches the data from Yahoo Finance.\nHuman input in the middle: ['Pls add Microsoft information as well.', 'exit']\nConversation cost:  ({'total_cost': 0.56541, 'gpt-4-0613': {'cost': 0.56541, 'prompt_tokens': 13003, 'completion_tokens': 2922, 'total_tokens': 15925}}, {'total_cost': 0.20337, 'gpt-4-0613': {'cost': 0.20337, 'prompt_tokens': 4311, 'completion_tokens': 1234, 'total_tokens': 5545}})\n\n\n\n*****2th chat*******:\nThe performance of a company's stock price could be influenced by various factors, including earnings reports, company announcements, market trends, economic indicators, and investor sentiment. To find out why a specific stock performed as it did, look out for any news, announcements, earnings report, or significant events that have occurred in the past month for that stock. Also, check the overall market trends and economic indicators during this period, and try to understand the investor sentiment towards the company. To fetch and analyze news related to a company, use the NewsAPI and Python requests library.\nHuman input in the middle: ['exit']\nConversation cost:  ({'total_cost': 0.34029, 'gpt-4-0613': {'cost': 0.34029, 'prompt_tokens': 6785, 'completion_tokens': 2279, 'total_tokens': 9064}}, {'total_cost': 0.22940999999999998, 'gpt-4-0613': {'cost': 0.22940999999999998, 'prompt_tokens': 5097, 'completion_tokens': 1275, 'total_tokens': 6372}})\n\n\n\n*****3th chat*******:\nThe assistant provided a Python code to fetch and compare the stock prices of NVIDIA Corp (NVDA), Tesla Inc (TSLA), and Microsoft Corp (MSFT) from the past month. The code uses the yfinance library to download historical data, pandas to manage the data, and matplotlib to plot the graph. It fetches the stock prices and plots them on a graph with date on the x-axis and closing price on the y-axis. The script saves the graph as a PNG image and the closing price and date of each stock in separate .csv files.\n\nHuman input in the middle: ['exit']\nConversation cost:  ({'total_cost': 0.63072, 'gpt-4-0613': {'cost': 0.63072, 'prompt_tokens': 14100, 'completion_tokens': 3462, 'total_tokens': 17562}}, {'total_cost': 0.26868, 'gpt-4-0613': {'cost': 0.26868, 'prompt_tokens': 5408, 'completion_tokens': 1774, 'total_tokens': 7182}})\n\n\n\n*****4th chat*******:\n# Scripting the Stock Market: A Deeper Look into NVIDIA, Tesla, and Microsoft\n\nImagine being able to chart the highs and lows of your favorite stocks just by running a bit of code. Whether you're a seasoned investor or a curious newbie, understanding stock trends of top-performing companies like NVIDIA Corp (NVDA), Tesla Inc (TSLA), and Microsoft Corp (MSFT) can offer invaluable insights into the fast-paced world of finance. \n\nTraditionally, this type of analysis would require countless hours spent poring over dense financial documents, analyzing figures, and making educated guesses. Yet, with Python, the prospect of quickly reviewing stock performances isn't just possible\u2014it's incredibly accessible and surprisingly engaging.\n\n## Harnessing Python and Yahoo Finance Data\n\nIn the world where data reigns supreme, the clever use of Python code makes it a cinch to fetch current stock prices and calculate performance over a given period. The yfinance library proves invaluable here. It fetches data from Yahoo Finance, sparing you the hassle of data collection. \n\nWith just a Python script, you can instruct your computer to fetch and analyze the last month's performance for NVDA, TSLA, and MSFT in terms of percentage. This simplifies the process of understanding what\u2019s been happening with these dynamite stocks recently. \n\n## Unravel the Mystery Behind Stock Performance\n\nOf course, knowing a stock's performance is just the first step. Why does a particular stock perform the way it does? There\u2019s not always an easy answer, as stock performance can hinge on various factors. These mandators include company announcements, earnings reports, investor sentiment, market trends, and economic indicators.\n\nFor those of you hungry to know why NVDA, TSLA, or MSFT experienced a particular spike or dip, consider looking into any significant events, news, or announcements over the past month relating to that stock. Was there a breakthrough product announced? Perhaps a promising earnings report? Or maybe a broader market trend affected technology companies as a whole?\n\n## Dive Deeper with the NewsAPI\n\nOne way to stay afloat in the torrent of stock-related news is by using the NewsAPI in conjunction with the Python requests library. This combination assists in fetching and analyzing news related to the companies of your interest, keeping you abreast of events that might directly affect stock performance.\n\n## Visualize the Stock Prices with matplotlib\n\nVisualization is an absolute game-changer when it comes to understanding data, and yes, stock prices are no different whatsoever. Once you've fetched the stock prices using yfinance, you can use the Python libraries, pandas for data management and matplotlib for plotting. These tools allow you to graph the stocks' closing prices over the given period, providing a clear, visual summary of their performance. \n\nTo make the analysis even more concrete, the Python code stores the closing dates and prices of each stock in separate .csv files. This way, you always have a concrete log of the data breaking down the stock performances over time.\n\nAnd there you have it! Using Python, even the novice investors among us can dive headfirst into the sea of stock market analysis. As you get comfortable retrieving and analyzing stock data, you'll find the information you glean from this process invaluable, whether you're making personal investments or just following market trends out of interest.\n\nWelcome to the new era of stock analysis! Happy data crunching!\n\n\nHuman input in the middle: ['exit']\nConversation cost:  ({'total_cost': 0.09408, 'gpt-4-0613': {'cost': 0.09408, 'prompt_tokens': 702, 'completion_tokens': 1217, 'total_tokens': 1919}}, {'total_cost': 0.09408, 'gpt-4-0613': {'cost': 0.09408, 'prompt_tokens': 702, 'completion_tokens': 1217, 'total_tokens': 1919}})\n\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"scenario-3-solve-the-tasks-with-a-series-of-chats-involving-group-chat",children:"Scenario 3: Solve the tasks with a series of chats involving group chat"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'user_proxy = autogen.UserProxyAgent(\n    name="User_proxy",\n    system_message="A human admin.",\n    human_input_mode="NEVER",\n    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "groupchat",\n        "use_docker": False,\n    },\n)\n\nresearch_assistant = autogen.AssistantAgent(\n    name="Researcher",\n    llm_config={"config_list": config_list},\n    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),\n)\n\nwriter = autogen.AssistantAgent(\n    name="Writer",\n    llm_config={"config_list": config_list},\n    system_message="""\n    You are a professional writer, known for\n    your insightful and engaging articles.\n    You transform complex concepts into compelling narratives.\n    Reply "TERMINATE" in the end when everything is done.\n    """,\n)\n\ncritic = autogen.AssistantAgent(\n    name="Critic",\n    system_message="""Critic. Double check plan, claims, code from other agents and provide feedback. Check whether the plan includes adding verifiable info such as source URL.\n    Reply "TERMINATE" in the end when everything is done.\n    """,\n    llm_config={"config_list": config_list},\n)\n\ngroupchat_1 = autogen.GroupChat(agents=[user_proxy, research_assistant, critic], messages=[], max_round=50)\n\ngroupchat_2 = autogen.GroupChat(agents=[user_proxy, writer, critic], messages=[], max_round=50)\n\nmanager_1 = autogen.GroupChatManager(\n    groupchat=groupchat_1,\n    name="Research_manager",\n    llm_config={"config_list": config_list},\n    is_termination_msg=lambda x: x.get("content", "").find("TERMINATE") >= 0,\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "groupchat",\n        "use_docker": False,\n    },\n)\nmanager_2 = autogen.GroupChatManager(\n    groupchat=groupchat_2,\n    name="Writing_manager",\n    llm_config={"config_list": config_list},\n    is_termination_msg=lambda x: x.get("content", "").find("TERMINATE") >= 0,\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "groupchat",\n        "use_docker": False,\n    },\n)\n\nuser = autogen.UserProxyAgent(\n    name="User",\n    human_input_mode="NEVER",\n    is_termination_msg=lambda x: x.get("content", "").find("TERMINATE") >= 0,\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "tasks",\n        "use_docker": False,\n    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n)\nawait user.a_initiate_chats(  # noqa: F704\n    [\n        {"chat_id": 1, "recipient": research_assistant, "message": financial_tasks[0], "summary_method": "last_msg"},\n        {\n            "chat_id": 2,\n            "prerequisites": [1],\n            "recipient": manager_1,\n            "message": financial_tasks[1],\n            "summary_method": "reflection_with_llm",\n        },\n        {\n            "chat_id": 3,\n            "prerequisites": [1],\n            "recipient": manager_1,\n            "message": financial_tasks[2],\n            "summary_method": "reflection_with_llm",\n        },\n        {"chat_id": 4, "prerequisites": [1, 2, 3], "recipient": manager_2, "message": writing_tasks[0]},\n    ]\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n********************************************************************************\nStart a new chat with the following message: \nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\nWith the following carryover: \n\n\n********************************************************************************\nUser (to Researcher):\n\nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\n--------------------------------------------------------------------------------\nResearcher (to User):\n\nTo obtain the current stock prices of NVDA (Nvidia Corporation) and TSLA (Tesla, Inc.), as well as their performance over the past month in terms of percentage change, I will use Python code to fetch this information from a financial data API. For this task, we can use the Yahoo Finance API through the `yfinance` library, which allows us to collect stock information programmatically.\n\nHere is the plan:\n1. Use Python code to access the required stock data via the `yfinance` library.\n2. Fetch the current prices of NVDA and TSLA.\n3. Calculate the percentage change in their stock prices over the past month.\n\nFirst, you'll need to ensure that the `yfinance` library is installed. If it's not already installed, you can install it using pip. Execute the following Python code to perform the tasks:\n\n```python\n# filename: stock_info.py\n\nimport yfinance as yf\nfrom datetime import datetime, timedelta\n\n# Define the tickers for Nvidia and Tesla\ntickers = [\"NVDA\", \"TSLA\"]\n\n# Define the time period: end date is today, start date is one month ago\nend_date = datetime.today()\nstart_date = end_date - timedelta(days=30)\n\n# Function to fetch and display stock info\ndef fetch_and_display_info(ticker):\n    stock = yf.Ticker(ticker)\n    \n    # Fetch historical data for the past month\n    hist = stock.history(start=start_date, end=end_date)\n    \n    # Get the last closing price (most recent date)\n    last_close_price = hist['Close'].iloc[-1]\n    \n    # Calculate the percentage change over the past month\n    start_price = hist['Close'].iloc[0]  # First day's closing price in the hist data\n    percentage_change = ((last_close_price - start_price) / start_price) * 100\n    \n    print(f\"{ticker} Current Price: ${last_close_price:.2f}\")\n    print(f\"{ticker} Performance Over The Past Month: {percentage_change:.2f}%\\n\")\n\n# Fetch and display info for each ticker\nfor ticker in tickers:\n    fetch_and_display_info(ticker)\n```\n\nPlease save the above code in a file named `stock_info.py` and execute it. This script will output the current prices of NVDA and TSLA, along with the percentage changes in their stock prices over the past month.\n\nIf you encounter any issues or have any questions regarding the execution or results, please let me know!\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser (to Researcher):\n\nexitcode: 0 (execution succeeded)\nCode output: \nNVDA Current Price: $726.13\nNVDA Performance Over The Past Month: 21.72%\n\nTSLA Current Price: $199.95\nTSLA Performance Over The Past Month: -4.24%\n\n\n\n--------------------------------------------------------------------------------\nResearcher (to User):\n\nThe execution of the provided Python code successfully fetched the current stock prices and the performance over the past month for Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). Here are the results:\n\n- **Nvidia Corporation (NVDA):**\n  - Current Price: $726.13\n  - Performance Over The Past Month: +21.72%\n\n- **Tesla, Inc. (TSLA):**\n  - Current Price: $199.95\n  - Performance Over The Past Month: -4.24%\n\nThis data indicates that over the past month, NVDA's stock has seen a significant positive increase in its price, with a 21.72% rise, showcasing strong performance. On the other hand, TSLA's stock has experienced a slight decline, with a 4.24% decrease in its price.\n\nThese performance metrics can be useful for investors and traders to understand recent trends in these companies' stock values.\n\nIf you have any more questions or need further assistance, feel free to ask. Otherwise, we can conclude here.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n********************************************************************************\nStart a new chat with the following message: \nInvestigate possible reasons of the stock performance.\n\nWith the following carryover: \nThe execution of the provided Python code successfully fetched the current stock prices and the performance over the past month for Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). Here are the results:\n\n- **Nvidia Corporation (NVDA):**\n  - Current Price: $726.13\n  - Performance Over The Past Month: +21.72%\n\n- **Tesla, Inc. (TSLA):**\n  - Current Price: $199.95\n  - Performance Over The Past Month: -4.24%\n\nThis data indicates that over the past month, NVDA's stock has seen a significant positive increase in its price, with a 21.72% rise, showcasing strong performance. On the other hand, TSLA's stock has experienced a slight decline, with a 4.24% decrease in its price.\n\nThese performance metrics can be useful for investors and traders to understand recent trends in these companies' stock values.\n\nIf you have any more questions or need further assistance, feel free to ask. Otherwise, we can conclude here.\n\n\n\n********************************************************************************\nUser (to Research_manager):\n\nInvestigate possible reasons of the stock performance.\nContext: \nThe execution of the provided Python code successfully fetched the current stock prices and the performance over the past month for Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). Here are the results:\n\n- **Nvidia Corporation (NVDA):**\n  - Current Price: $726.13\n  - Performance Over The Past Month: +21.72%\n\n- **Tesla, Inc. (TSLA):**\n  - Current Price: $199.95\n  - Performance Over The Past Month: -4.24%\n\nThis data indicates that over the past month, NVDA's stock has seen a significant positive increase in its price, with a 21.72% rise, showcasing strong performance. On the other hand, TSLA's stock has experienced a slight decline, with a 4.24% decrease in its price.\n\nThese performance metrics can be useful for investors and traders to understand recent trends in these companies' stock values.\n\nIf you have any more questions or need further assistance, feel free to ask. Otherwise, we can conclude here.\n\n\n\n--------------------------------------------------------------------------------\nResearcher (to Research_manager):\n\nTo investigate the possible reasons behind the stock performance of Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA), we need to consider various factors that could influence their stock prices. Here's a step-by-step plan for our investigation:\n\n1. **Market News and Events:** We will look for any recent news, announcements, or events related to Nvidia and Tesla that could influence investor sentiment and stock performance. This includes financial reports, product launches, regulatory changes, or significant partnerships.\n\n2. **Industry Trends:** The performance of a company's stock is also influenced by broader industry trends. For Nvidia, this might include the demand for GPUs for gaming, data centers, and AI applications. For Tesla, factors might include electric vehicle (EV) market trends, competition, and regulatory changes affecting the automotive industry.\n\n3. **Economic Indicators:** General economic conditions, such as interest rates, inflation, and consumer spending, can impact stock performance. A growing economy might fuel investments in technology and innovation, benefiting companies like Nvidia and Tesla.\n\n4. **Technological Innovations:** Any groundbreaking technological advancements announced by either company could affect stock prices. For Nvidia, this might be related to advancements in AI, while for Tesla, innovations in battery technology or autonomous driving could be significant.\n\n5. **Company-specific Factors:** Factors such as changes in leadership, legal issues, or supply chain disruptions could also impact the stock prices of Nvidia and Tesla.\n\nI will now search the web for the most recent news and information related to Nvidia (NVDA) and Tesla (TSLA) that could shed light on their recent stock performance. This will include looking into financial news, industry-related updates, and any recent announcements made by the companies themselves.\n\n```python\n# filename: fetch_news.py\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef search_news(company):\n    # Searching for news on Google News\n    url = f'https://www.google.com/search?q={company}+stock+news&tbm=nws'\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # Looking for headlines\n    headlines = soup.find_all('div', {'class': 'BVG0Nb'})\n    links = soup.find_all('a', href=True)\n    news_items = []\n    for headline, link in zip(headlines, links):\n        news_items.append({'title': headline.text, 'link': link['href']})\n    return news_items[:5]  # Returning the first 5 news items\n\n# Searching for news related to Nvidia and Tesla\nnvidia_news = search_news('Nvidia Corporation NVDA')\ntesla_news = search_news('Tesla Inc TSLA')\n\n# Printing out the news items\nprint('Nvidia Corporation (NVDA) Recent News:')\nfor news in nvidia_news:\n    print(f\"- {news['title']} {news['link']}\")\n\nprint('\\nTesla, Inc. (TSLA) Recent News:')\nfor news in tesla_news:\n    print(f\"- {news['title']} {news['link']}\")\n```\n\nPlease execute the provided Python script to search for the latest news regarding Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). This will give us a starting point to understand the factors influencing their recent stock performance.\n\n--------------------------------------------------------------------------------\nCritic (to Research_manager):\n\nThe plan is logical and thorough, covering most essential factors that can affect the stock performance of Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). Here are a few feedback points and suggestions to ensure a comprehensive investigation:\n\n1. **Execution Note:** Considering that the provided Python script uses web scraping to fetch the latest news from Google search results, it's important to note that this method might encounter challenges due to the dynamic nature of web content and potential anti-scraping measures. Users should ensure they are compliant with Google's Terms of Service and consider using official APIs for reliable data retrieval when possible.\n\n2. **Financial Performance:** While the plan mentions looking into general market news and events, it's specifically crucial to analyze the companies' latest financial reports (quarterly/annually). Insights into revenue, profit margins, growth forecasts, and analyst ratings could provide a more concrete basis for understanding stock performance.\n\n3. **Comparison with Competitors:** Adding a comparative analysis of competitors within the same industries (e.g., AMD for Nvidia and Ford or Rivian for Tesla) could offer additional context. Performance might not only be due to internal factors but also how these companies are doing relative to their peers.\n\n4. **Sentiment Analysis:** Analyzing investor sentiment, perhaps by looking at social media or investor forums, could give an idea of how market perceptions are influencing stock prices beyond just factual news.\n\n5. **Technological Roadmaps:** For companies like Nvidia and Tesla, where innovation is key, looking into their technology roadmaps or any patents they might have filed recently could provide insights into their future potential and how it's being valued by the market.\n\n6. **Environmental, Social, and Governance (ESG) Factors:** With increasing attention on sustainable investing, ESG factors might also play a role in a company's stock performance. For Tesla, environmental factors might be particularly relevant.\n\n7. **Source Verification:** The plan mentions that the executed Python script will fetch the most recent news for analysis. It\u2019s important to cross-verify the information obtained from the news with reliable sources or directly from the company\u2019s announcements to ensure accuracy.\n\nFollowing these suggestions, adjusting the plan for data reliability, and incorporating a broader analysis spectrum will likely yield a more comprehensive understanding of the stock performance for Nvidia and Tesla.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n********************************************************************************\nStart a new chat with the following message: \nDevelop an engaging blog post using any information provided.\n\nWith the following carryover: \nThe execution of the provided Python code successfully fetched the current stock prices and the performance over the past month for Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). Here are the results:\n\n- **Nvidia Corporation (NVDA):**\n  - Current Price: $726.13\n  - Performance Over The Past Month: +21.72%\n\n- **Tesla, Inc. (TSLA):**\n  - Current Price: $199.95\n  - Performance Over The Past Month: -4.24%\n\nThis data indicates that over the past month, NVDA's stock has seen a significant positive increase in its price, with a 21.72% rise, showcasing strong performance. On the other hand, TSLA's stock has experienced a slight decline, with a 4.24% decrease in its price.\n\nThese performance metrics can be useful for investors and traders to understand recent trends in these companies' stock values.\n\nIf you have any more questions or need further assistance, feel free to ask. Otherwise, we can conclude here.\n\n\nTo investigate the stock performance of Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA), it's recommended to consider market news, industry trends, economic indicators, and company-specific factors including technological innovations. The plan includes executing a Python script to fetch the latest news. Feedback emphasizes ensuring compliance with Google's Terms of Service, analyzing financial reports, comparing competitors, sentiment analysis, investigating technological roadmaps, considering ESG factors, and verifying sources for accuracy. This comprehensive approach, adjusting for data reliability and a broader analysis spectrum, will aid in understanding the reasons behind the stock performance of Nvidia and Tesla.\n\n********************************************************************************\nUser (to Writing_manager):\n\nDevelop an engaging blog post using any information provided.\nContext: \nThe execution of the provided Python code successfully fetched the current stock prices and the performance over the past month for Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). Here are the results:\n\n- **Nvidia Corporation (NVDA):**\n  - Current Price: $726.13\n  - Performance Over The Past Month: +21.72%\n\n- **Tesla, Inc. (TSLA):**\n  - Current Price: $199.95\n  - Performance Over The Past Month: -4.24%\n\nThis data indicates that over the past month, NVDA's stock has seen a significant positive increase in its price, with a 21.72% rise, showcasing strong performance. On the other hand, TSLA's stock has experienced a slight decline, with a 4.24% decrease in its price.\n\nThese performance metrics can be useful for investors and traders to understand recent trends in these companies' stock values.\n\nIf you have any more questions or need further assistance, feel free to ask. Otherwise, we can conclude here.\n\n\nTo investigate the stock performance of Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA), it's recommended to consider market news, industry trends, economic indicators, and company-specific factors including technological innovations. The plan includes executing a Python script to fetch the latest news. Feedback emphasizes ensuring compliance with Google's Terms of Service, analyzing financial reports, comparing competitors, sentiment analysis, investigating technological roadmaps, considering ESG factors, and verifying sources for accuracy. This comprehensive approach, adjusting for data reliability and a broader analysis spectrum, will aid in understanding the reasons behind the stock performance of Nvidia and Tesla.\n\n--------------------------------------------------------------------------------\nWriter (to Writing_manager):\n\n# Tech Titans in Turmoil? Deciphering the Divergent Paths of Nvidia and Tesla\n\nIn the ever-dynamic world of technology stocks, recent market activities have drawn sharp attention to two behemoths: Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). With the execution of a specialized Python script, intriguing insights into their stock performances over the past month have emerged, revealing a fascinating divergence in their trajectory. Nvidia's stocks have surged, showcasing a robust growth of 21.72%, while Tesla has unexpectedly stumbled, recording a 4.24% decline in stock value. This unexpected dichotomy in the fortunes of two of Silicon Valley's most luminary companies offers a compelling case study into the undercurrents shaping the tech industry today.\n\n## The Surge of Nvidia: Riding the Wave of Innovation\n\nNvidia's impressive stock performance, ballooning by 21.72%, paints a picture of a company at the zenith of its powers. The secret to Nvidia's success could largely be attributed to its strategic positioning at the heart of burgeoning tech trends, including AI, machine learning, and gaming. Nvidia's GPUs are not only the \"engine\" behind gaming PCs but are also crucial for AI research and data centers, industries that have seen exponential growth in recent years.\n\nMoreover, Nvidia's forward-looking approach and continuous innovation have cemented its status as a cornerstone in the tech space. Recent developments in AI and deep learning technologies, where Nvidia is a recognized leader, have further bolstered investor confidence. Their strategic partnerships and expansion into new, high-growth markets have likely contributed to their positive financial outlook, evident in the substantial stock price increase.\n\n## Tesla's Unanticipated Detour: A Bump in the Road?\n\nOn the flip side, Tesla's slight retreat, with a 4.24% drop, poses intriguing questions about the underlying factors dampening investor enthusiasm. Tesla, under the visionary leadership of Elon Musk, has revolutionized the automotive industry, making electric vehicles (EVs) mainstream. Yet, even pioneers aren't immune to market forces and operational challenges.\n\nAnalysts might speculate that Tesla's decline could be attributed to a variety of factors, including production delays, competition heating up from legacy automakers venturing into the EV space, and perhaps geopolitical tensions affecting supply chains. Additionally, the broader market's sentiment, influenced by economic indicators and shifts in consumer behavior, may have played a role in Tesla's recent stock performance downturn.\n\n## Beyond the Numbers: A Closer Look at the Forces at Play\n\nTo truly comprehend the divergence in Nvidia's and Tesla's stock market performances, one must delve deeper beyond mere financial metrics. Exploring market news, industry trends, economic indicators, and company-specific dynamics offers richer context.\n\nFor Nvidia, its stride might be bolstered by advancements in technology and a robust product line catering to future needs. For Tesla, despite its recent dip, the long-term outlook remains positive, given its pioneering status and relentless pursuit of innovation.\n\nInherent in the analysis of stock performances is the necessity to consider technological roadmaps, environmental, social, and governance (ESG) factors, and competitive landscapes. These components, combined with meticulous sentiment analysis and a keen eye on financial reports, provide a multidimensional view of Nvidia's and Tesla's market positions.\n\n## Looking Ahead: Charting the Course\n\nAs investors and enthusiasts keenly watch these unfolding narratives, the contrasting fortunes of Nvidia and Tesla underscore the volatile and unpredictable nature of the tech stock market. The journey ahead for both companies promises to be lined with opportunities and obstacles, making their stories not just a study of stock prices but a reflection of the broader technological and economic landscapes they operate within.\n\nNavigating this ever-evolving terrain requires a nuanced understanding of market dynamics, a commitment to innovation, and an unwavering focus on long-term value creation. As Nvidia and Tesla chart their paths forward, they not only shape their destinies but also the future of technology itself. Therefore, keeping a close watch on these titans' next moves becomes not just an interest but a necessity for those vested in the future of tech.\n\nIn the interplay of market forces, innovation, and strategic visions, the contrasting trajectories of Nvidia and Tesla present a nuanced narrative, ripe for exploration and reflection. As we advance, their stories remind us of the transformative power of technology and the endless possibilities that lie within the volatile realm of the stock market.\n\nSo, whether you're an investor, a tech enthusiast, or simply a curious observer, the unfolding saga of Nvidia and Tesla offers a captivating glimpse into the future of technology and finance, woven together in the complex tapestry of the stock market's highs and lows.\n\n---\nI hope you found this exploration into the fortunes of Nvidia and Tesla insightful and thought-provoking. Stay tuned for more analyses that bring the world of technology and finance to life in compelling narratives.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"{1: ChatResult(chat_id=1, chat_history=[{'content': 'What are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?', 'role': 'assistant'}, {'content': 'To obtain the current stock prices of NVDA (Nvidia Corporation) and TSLA (Tesla, Inc.), as well as their performance over the past month in terms of percentage change, I will use Python code to fetch this information from a financial data API. For this task, we can use the Yahoo Finance API through the `yfinance` library, which allows us to collect stock information programmatically.\\n\\nHere is the plan:\\n1. Use Python code to access the required stock data via the `yfinance` library.\\n2. Fetch the current prices of NVDA and TSLA.\\n3. Calculate the percentage change in their stock prices over the past month.\\n\\nFirst, you\\'ll need to ensure that the `yfinance` library is installed. If it\\'s not already installed, you can install it using pip. Execute the following Python code to perform the tasks:\\n\\n```python\\n# filename: stock_info.py\\n\\nimport yfinance as yf\\nfrom datetime import datetime, timedelta\\n\\n# Define the tickers for Nvidia and Tesla\\ntickers = [\"NVDA\", \"TSLA\"]\\n\\n# Define the time period: end date is today, start date is one month ago\\nend_date = datetime.today()\\nstart_date = end_date - timedelta(days=30)\\n\\n# Function to fetch and display stock info\\ndef fetch_and_display_info(ticker):\\n    stock = yf.Ticker(ticker)\\n    \\n    # Fetch historical data for the past month\\n    hist = stock.history(start=start_date, end=end_date)\\n    \\n    # Get the last closing price (most recent date)\\n    last_close_price = hist[\\'Close\\'].iloc[-1]\\n    \\n    # Calculate the percentage change over the past month\\n    start_price = hist[\\'Close\\'].iloc[0]  # First day\\'s closing price in the hist data\\n    percentage_change = ((last_close_price - start_price) / start_price) * 100\\n    \\n    print(f\"{ticker} Current Price: ${last_close_price:.2f}\")\\n    print(f\"{ticker} Performance Over The Past Month: {percentage_change:.2f}%\\\\n\")\\n\\n# Fetch and display info for each ticker\\nfor ticker in tickers:\\n    fetch_and_display_info(ticker)\\n```\\n\\nPlease save the above code in a file named `stock_info.py` and execute it. This script will output the current prices of NVDA and TSLA, along with the percentage changes in their stock prices over the past month.\\n\\nIf you encounter any issues or have any questions regarding the execution or results, please let me know!', 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\nNVDA Current Price: $726.13\\nNVDA Performance Over The Past Month: 21.72%\\n\\nTSLA Current Price: $199.95\\nTSLA Performance Over The Past Month: -4.24%\\n\\n', 'role': 'assistant'}, {'content': \"The execution of the provided Python code successfully fetched the current stock prices and the performance over the past month for Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). Here are the results:\\n\\n- **Nvidia Corporation (NVDA):**\\n  - Current Price: $726.13\\n  - Performance Over The Past Month: +21.72%\\n\\n- **Tesla, Inc. (TSLA):**\\n  - Current Price: $199.95\\n  - Performance Over The Past Month: -4.24%\\n\\nThis data indicates that over the past month, NVDA's stock has seen a significant positive increase in its price, with a 21.72% rise, showcasing strong performance. On the other hand, TSLA's stock has experienced a slight decline, with a 4.24% decrease in its price.\\n\\nThese performance metrics can be useful for investors and traders to understand recent trends in these companies' stock values.\\n\\nIf you have any more questions or need further assistance, feel free to ask. Otherwise, we can conclude here.\\n\\nTERMINATE\", 'role': 'user'}], summary=\"The execution of the provided Python code successfully fetched the current stock prices and the performance over the past month for Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). Here are the results:\\n\\n- **Nvidia Corporation (NVDA):**\\n  - Current Price: $726.13\\n  - Performance Over The Past Month: +21.72%\\n\\n- **Tesla, Inc. (TSLA):**\\n  - Current Price: $199.95\\n  - Performance Over The Past Month: -4.24%\\n\\nThis data indicates that over the past month, NVDA's stock has seen a significant positive increase in its price, with a 21.72% rise, showcasing strong performance. On the other hand, TSLA's stock has experienced a slight decline, with a 4.24% decrease in its price.\\n\\nThese performance metrics can be useful for investors and traders to understand recent trends in these companies' stock values.\\n\\nIf you have any more questions or need further assistance, feel free to ask. Otherwise, we can conclude here.\\n\\n\", cost=({'total_cost': 0.038180000000000006, 'gpt-4-0125-preview': {'cost': 0.038180000000000006, 'prompt_tokens': 1592, 'completion_tokens': 742, 'total_tokens': 2334}}, {'total_cost': 0.038180000000000006, 'gpt-4-0125-preview': {'cost': 0.038180000000000006, 'prompt_tokens': 1592, 'completion_tokens': 742, 'total_tokens': 2334}}), human_input=[]),\n 2: ChatResult(chat_id=2, chat_history=[{'content': \"Investigate possible reasons of the stock performance.\\nContext: \\nThe execution of the provided Python code successfully fetched the current stock prices and the performance over the past month for Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). Here are the results:\\n\\n- **Nvidia Corporation (NVDA):**\\n  - Current Price: $726.13\\n  - Performance Over The Past Month: +21.72%\\n\\n- **Tesla, Inc. (TSLA):**\\n  - Current Price: $199.95\\n  - Performance Over The Past Month: -4.24%\\n\\nThis data indicates that over the past month, NVDA's stock has seen a significant positive increase in its price, with a 21.72% rise, showcasing strong performance. On the other hand, TSLA's stock has experienced a slight decline, with a 4.24% decrease in its price.\\n\\nThese performance metrics can be useful for investors and traders to understand recent trends in these companies' stock values.\\n\\nIf you have any more questions or need further assistance, feel free to ask. Otherwise, we can conclude here.\\n\\n\", 'role': 'assistant'}], summary=\"To investigate the stock performance of Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA), it's recommended to consider market news, industry trends, economic indicators, and company-specific factors including technological innovations. The plan includes executing a Python script to fetch the latest news. Feedback emphasizes ensuring compliance with Google's Terms of Service, analyzing financial reports, comparing competitors, sentiment analysis, investigating technological roadmaps, considering ESG factors, and verifying sources for accuracy. This comprehensive approach, adjusting for data reliability and a broader analysis spectrum, will aid in understanding the reasons behind the stock performance of Nvidia and Tesla.\", cost=({'total_cost': 0.03351, 'gpt-4-0125-preview': {'cost': 0.03351, 'prompt_tokens': 2970, 'completion_tokens': 127, 'total_tokens': 3097}}, {'total_cost': 0.03351, 'gpt-4-0125-preview': {'cost': 0.03351, 'prompt_tokens': 2970, 'completion_tokens': 127, 'total_tokens': 3097}}), human_input=[]),\n 3: ChatResult(chat_id=3, chat_history=[{'content': \"Develop an engaging blog post using any information provided.\\nContext: \\nThe execution of the provided Python code successfully fetched the current stock prices and the performance over the past month for Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). Here are the results:\\n\\n- **Nvidia Corporation (NVDA):**\\n  - Current Price: $726.13\\n  - Performance Over The Past Month: +21.72%\\n\\n- **Tesla, Inc. (TSLA):**\\n  - Current Price: $199.95\\n  - Performance Over The Past Month: -4.24%\\n\\nThis data indicates that over the past month, NVDA's stock has seen a significant positive increase in its price, with a 21.72% rise, showcasing strong performance. On the other hand, TSLA's stock has experienced a slight decline, with a 4.24% decrease in its price.\\n\\nThese performance metrics can be useful for investors and traders to understand recent trends in these companies' stock values.\\n\\nIf you have any more questions or need further assistance, feel free to ask. Otherwise, we can conclude here.\\n\\n\\nTo investigate the stock performance of Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA), it's recommended to consider market news, industry trends, economic indicators, and company-specific factors including technological innovations. The plan includes executing a Python script to fetch the latest news. Feedback emphasizes ensuring compliance with Google's Terms of Service, analyzing financial reports, comparing competitors, sentiment analysis, investigating technological roadmaps, considering ESG factors, and verifying sources for accuracy. This comprehensive approach, adjusting for data reliability and a broader analysis spectrum, will aid in understanding the reasons behind the stock performance of Nvidia and Tesla.\", 'role': 'assistant'}], summary=\"Develop an engaging blog post using any information provided.\\nContext: \\nThe execution of the provided Python code successfully fetched the current stock prices and the performance over the past month for Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA). Here are the results:\\n\\n- **Nvidia Corporation (NVDA):**\\n  - Current Price: $726.13\\n  - Performance Over The Past Month: +21.72%\\n\\n- **Tesla, Inc. (TSLA):**\\n  - Current Price: $199.95\\n  - Performance Over The Past Month: -4.24%\\n\\nThis data indicates that over the past month, NVDA's stock has seen a significant positive increase in its price, with a 21.72% rise, showcasing strong performance. On the other hand, TSLA's stock has experienced a slight decline, with a 4.24% decrease in its price.\\n\\nThese performance metrics can be useful for investors and traders to understand recent trends in these companies' stock values.\\n\\nIf you have any more questions or need further assistance, feel free to ask. Otherwise, we can conclude here.\\n\\n\\nTo investigate the stock performance of Nvidia Corporation (NVDA) and Tesla, Inc. (TSLA), it's recommended to consider market news, industry trends, economic indicators, and company-specific factors including technological innovations. The plan includes executing a Python script to fetch the latest news. Feedback emphasizes ensuring compliance with Google's Terms of Service, analyzing financial reports, comparing competitors, sentiment analysis, investigating technological roadmaps, considering ESG factors, and verifying sources for accuracy. This comprehensive approach, adjusting for data reliability and a broader analysis spectrum, will aid in understanding the reasons behind the stock performance of Nvidia and Tesla.\", cost=({'total_cost': 0.0058200000000000005, 'gpt-4-0125-preview': {'cost': 0.0058200000000000005, 'prompt_tokens': 579, 'completion_tokens': 1, 'total_tokens': 580}}, {'total_cost': 0.0058200000000000005, 'gpt-4-0125-preview': {'cost': 0.0058200000000000005, 'prompt_tokens': 579, 'completion_tokens': 1, 'total_tokens': 580}}), human_input=[])}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5437:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>d,toc:()=>l});var a=t(5893),o=t(1151);const i={tags:["sequential chat"],description:"Use conversational agents to solve a set of tasks with a sequence of chats.\n",source_notebook:"/notebook/agentchat_multi_task_chats.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_multi_task_chats.ipynb",title:"Solving Multiple Tasks in a Sequence of Chats"},s="Solving Multiple Tasks in a Sequence of Chats",r={id:"notebooks/agentchat_multi_task_chats",title:"Solving Multiple Tasks in a Sequence of Chats",description:"Use conversational agents to solve a set of tasks with a sequence of chats.\n",source:"@site/docs/notebooks/agentchat_multi_task_chats.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_multi_task_chats",permalink:"/autogen/docs/notebooks/agentchat_multi_task_chats",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_multi_task_chats.ipynb",tags:[{label:"sequential chat",permalink:"/autogen/docs/tags/sequential-chat"}],version:"current",frontMatter:{tags:["sequential chat"],description:"Use conversational agents to solve a set of tasks with a sequence of chats.\n",source_notebook:"/notebook/agentchat_multi_task_chats.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_multi_task_chats.ipynb",title:"Solving Multiple Tasks in a Sequence of Chats"},sidebar:"notebooksSidebar",previous:{title:"Solving Multiple Tasks in a Sequence of Async Chats",permalink:"/autogen/docs/notebooks/agentchat_multi_task_async_chats"},next:{title:"SocietyOfMindAgent",permalink:"/autogen/docs/notebooks/agentchat_society_of_mind"}},c={},l=[{value:"Example Tasks",id:"example-tasks",level:3},{value:"Scenario 1: Solve the tasks with a series of chats",id:"scenario-1-solve-the-tasks-with-a-series-of-chats",level:3},{value:"Check chat results",id:"check-chat-results",level:4},{value:"Scenario 2: With human inputs revising tasks in the middle",id:"scenario-2-with-human-inputs-revising-tasks-in-the-middle",level:3},{value:"Check chat results",id:"check-chat-results-1",level:4},{value:"Scenario 3: Solve the tasks with a series of chats involving group chat",id:"scenario-3-solve-the-tasks-with-a-series-of-chats-involving-group-chat",level:3}],d=['\x3c!--\ntags: ["sequential chat"]\ndescription: |\n    Use conversational agents to solve a set of tasks with a sequence of chats.\n--\x3e'];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[0]}}),"\n",(0,a.jsx)(n.h1,{id:"solving-multiple-tasks-in-a-sequence-of-chats",children:"Solving Multiple Tasks in a Sequence of Chats"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_multi_task_chats.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_multi_task_chats.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["This notebook showcases how to use the new chat interface of\nconversational agents in AutoGen: initiate_chats, to conduct a series of\ntasks. This new interface allows one to pass multiple tasks and their\ncorresponding dedicated agents. Once initiate_chats is invoked, the\ntasks will be solved sequentially, with the summaries from previous\ntasks provided to subsequent tasks as context, if the ",(0,a.jsx)(n.code,{children:"summary_method"}),"\nargument is specified."]}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsxs)(n.p,{children:["Install ",(0,a.jsx)(n.code,{children:"pyautogen"}),":"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"../../docs/installation/",children:"installation\nguide"}),"."]})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import autogen\n\nconfig_list = autogen.config_list_from_json(env_or_file="OAI_CONFIG_LIST")\nllm_config = {"config_list": config_list}\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about the various ways to configure LLM endpoints\n",(0,a.jsx)(n.a,{href:"../../docs/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"example-tasks",children:"Example Tasks"}),"\n",(0,a.jsx)(n.p,{children:"Below are three example tasks, with each task being a string of text\ndescribing the request. The completion of later tasks requires or\nbenefits from the results of previous tasks."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'financial_tasks = [\n    """What are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?""",\n    """Investigate possible reasons of the stock performance.""",\n]\n\nwriting_tasks = ["""Develop an engaging blog post using any information provided."""]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"scenario-1-solve-the-tasks-with-a-series-of-chats",children:"Scenario 1: Solve the tasks with a series of chats"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"initiate_chats"})," interface can take a list of dictionaries as\ninputs. Each dictionary preserves the following fields: - ",(0,a.jsx)(n.code,{children:"message"}),": is\na string of text (typically a message containing the task); -\n",(0,a.jsx)(n.code,{children:"recipient"}),": a conversable agent dedicated for the task; -\n",(0,a.jsx)(n.code,{children:"summary_method"}),": A string specifying the method to get a summary from\nthe chat. Currently supported choices include ",(0,a.jsx)(n.code,{children:"last_msg"}),", which takes\nthe last message from the chat history as the summary, and\n",(0,a.jsx)(n.code,{children:"reflection_with_llm"}),", which uses an LLM call to reflect on the chat\nhistory and summarize a takeaway; - ",(0,a.jsx)(n.code,{children:"summary_prompt"}),": A string\nspecifying how to instruct an LLM-backed agent (either the recipient or\nthe sender in the chat) to reflect on the chat history and derive a\nsummary. If not otherwise specified, a default prompt will be used when\n",(0,a.jsx)(n.code,{children:"summary_method"})," is ",(0,a.jsx)(n.code,{children:"reflection_with_llm"}),". \u201cSummarize the takeaway from\nthe conversation. Do not add any introductory phrases. If the intended\nrequest is NOT properly addressed, please point it out.\u201d - ",(0,a.jsx)(n.code,{children:"carryover"}),":\nA string or a list of string to specify additional context to be used in\nthe chat. With ",(0,a.jsx)(n.code,{children:"initiate_chats"}),", summary from previous chats will be\nadded as carryover. They will be appended after the carryover provided\nby the user."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'financial_assistant = autogen.AssistantAgent(\n    name="Financial_assistant",\n    llm_config=llm_config,\n)\nresearch_assistant = autogen.AssistantAgent(\n    name="Researcher",\n    llm_config=llm_config,\n)\nwriter = autogen.AssistantAgent(\n    name="writer",\n    llm_config=llm_config,\n    system_message="""\n        You are a professional writer, known for\n        your insightful and engaging articles.\n        You transform complex concepts into compelling narratives.\n        Reply "TERMINATE" in the end when everything is done.\n        """,\n)\n\nuser = autogen.UserProxyAgent(\n    name="User",\n    human_input_mode="NEVER",\n    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "tasks",\n        "use_docker": False,\n    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n)\n\nchat_results = user.initiate_chats(\n    [\n        {\n            "recipient": financial_assistant,\n            "message": financial_tasks[0],\n            "clear_history": True,\n            "silent": False,\n            "summary_method": "last_msg",\n        },\n        {\n            "recipient": research_assistant,\n            "message": financial_tasks[1],\n            "summary_method": "reflection_with_llm",\n        },\n        {\n            "recipient": writer,\n            "message": writing_tasks[0],\n            "carryover": "I want to include a figure or a table of data in the blogpost.",\n        },\n    ]\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n********************************************************************************\nStart a new chat with the following message: \nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\nWith the following carryover: \n\n\n********************************************************************************\nUser (to Financial_assistant):\n\nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nTo get the current stock prices of NVDA (NVIDIA Corporation) and TSLA (Tesla, Inc.), along with their performance over the past month in terms of percentage change, we can use a Python library like `yfinance`. This library allows downloading of historical market data from Yahoo Finance.\n\nLet's proceed in the following steps:\n\n1. I will provide you a Python script that utilizes the `yfinance` library to fetch the current stock prices and historical data for the past month for both NVDA and TSLA.\n2. The script will then calculate the percentage change in the stock prices over the past month.\n\nPlease make sure that you have `yfinance` installed in your Python environment before running the script. You can install it using `pip install yfinance`.\n\nHere is the Python code to execute:\n\n```python\n# filename: stock_info.py\nimport yfinance as yf\nfrom datetime import datetime, timedelta\n\n# Function to get current stock price\ndef get_stock_price(stock_ticker):\n    stock = yf.Ticker(stock_ticker)\n    todays_data = stock.history(period='1d')\n    return todays_data['Close'][0]\n\n# Function to calculate percentage change over the past month\ndef get_percentage_change(stock_ticker):\n    stock = yf.Ticker(stock_ticker)\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=30)\n    historical_data = stock.history(start=start_date, end=end_date)\n    price_end = historical_data['Close'][-1]\n    price_start = historical_data['Close'][0]\n    percent_change = ((price_end - price_start)/price_start) * 100\n    return percent_change\n\n# Getting the current price and performance for NVDA and TSLA\nnvda_price = get_stock_price('NVDA')\ntesla_price = get_stock_price('TSLA')\nnvda_change = get_percentage_change('NVDA')\ntesla_change = get_percentage_change('TSLA')\n\n# Output the results\nprint(f\"NVDA (NVIDIA Corporation) stock price: ${nvda_price:.2f}\")\nprint(f\"TESLA (Tesla, Inc.) stock price: ${tesla_price:.2f}\")\nprint(f\"NVDA percentage change over past month: {nvda_change:.2f}%\")\nprint(f\"TESLA percentage change over past month: {tesla_change:.2f}%\")\n```\n\nPlease run this script in your environment and share with me the output. I'll then verify the information.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser (to Financial_assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nNVDA (NVIDIA Corporation) stock price: $722.48\nTESLA (Tesla, Inc.) stock price: $188.13\nNVDA percentage change over past month: 28.14%\nTESLA percentage change over past month: -14.45%\n\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nThe script has executed successfully and provided the following results:\n\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\n- NVDA has experienced a percentage increase of 28.14% over the past month.\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\n\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\n\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n********************************************************************************\nStart a new chat with the following message: \nInvestigate possible reasons of the stock performance.\n\nWith the following carryover: \nThe script has executed successfully and provided the following results:\n\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\n- NVDA has experienced a percentage increase of 28.14% over the past month.\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\n\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\n\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\n\n\n\n********************************************************************************\nUser (to Researcher):\n\nInvestigate possible reasons of the stock performance.\nContext: \nThe script has executed successfully and provided the following results:\n\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\n- NVDA has experienced a percentage increase of 28.14% over the past month.\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\n\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\n\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\n\n\n\n--------------------------------------------------------------------------------\nResearcher (to User):\n\nTo investigate the possible reasons behind the differing stock performance of NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA), we would need to consider various factors including their recent earnings reports, any significant news events affecting the companies, industry trends, and broader market conditions that might influence the technology and automotive sectors specifically. \n\nHere is how I plan to carry out the task:\n\n1. Check the recent earnings reports of both companies to see if there are any indications of better- or worse-than-expected financial health.\n2. Look for any major news announcements from the companies, such as product launches, regulatory approvals or actions, partnerships, or other events that could affect investor perceptions.\n3. Analyze industry trends that might affect NVIDIA's GPU market and Tesla's electric vehicle market, respectively, such as supply chain disruptions or changes in consumer demand.\n4. Consider broader market conditions, such as economic indicators, interest rate changes, or shifts in investor sentiment that might have a sector-specific impact.\n\nWe can start by using a web search to gather this information. Let's begin by searching for recent news about NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA).\n\n```python\n# filename: fetch_stock_news.py\nimport webbrowser\n\n# URLs for news about NVDA and TSLA\nnvda_news_url = \"https://www.google.com/search?q=NVIDIA+Corporation+NVDA+stock+news\"\ntsla_news_url = \"https://www.google.com/search?q=Tesla+Inc+TSLA+stock+news\"\n\n# Open the URLs in web browsers\nwebbrowser.open(nvda_news_url)\nwebbrowser.open(tsla_news_url)\n\nprint(\"Browser tabs with news about NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA) should now be open.\")\n```\n\nThis script will use the webbrowser module to open tabs in the user's web browser to search for news about the respective companies. Once you have the news articles, we can analyze the content to understand the stock performance reasons.\n\nExecute this script to proceed with the task. If there is any additional information from recent news that might shed light on the stock performance, please provide it, and we can continue our investigation.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser (to Researcher):\n\nexitcode: 0 (execution succeeded)\nCode output: \nBrowser tabs with news about NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA) should now be open.\n\n\n--------------------------------------------------------------------------------\nResearcher (to User):\n\nGreat, please review the news articles about both NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA) that opened in your browser tabs. Here's what you should look for in the news:\n\n1. **Financial Reports**: Check for the most recent quarterly earnings reports, any comments about revenue growth or challenges, and guidance for future quarters.\n2. **Product Announcements**: See if there have been any announcements regarding new technology, products, collaborations, or significant updates that could have influenced investor attitudes.\n3. **Regulatory News**: Determine if there have been any legislative changes or regulations reported that may impact the companies' operations.\n4. **Market Trends**: Look for information about the semiconductor market for NVDA and the electric vehicle market for TSLA, as these could be indicators of industry momentum affecting these stocks.\n5. **Executive Moves**: See if there have been any major changes in leadership within either company.\n6. **Broader Market Events**: Lastly, look for news about broad market trends or economic factors that might indirectly influence the stock performance of these companies.\n\nAfter reviewing the news, you should have a clearer idea of what has been driving the stock prices for NVDA and TSLA. If there are multiple factors influencing the stock performances, the recent news should provide insight into which ones are most significant.\n\nSince I am unable to browse the web, please summarize your findings based on the review of the news articles.\n\nIf the information is too much to process or you're seeking specific answers, please provide a summary of the key news points, and I can assist further in analyzing them.\n\n--------------------------------------------------------------------------------\nUser (to Researcher):\n\n\n\n--------------------------------------------------------------------------------\nResearcher (to User):\n\nIt appears there may have been a misunderstanding. In order to proceed with the investigation into the stock performance of NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA), I would need a summary or at least key points from the recent news articles that you've found in your web browser.\n\nSince I don't have the capability to browse the web or review external sources, I rely on information provided to me. If you've gathered relevant news, please share this information with me. If there are specific headlines, financial report details, announcements, or other pieces of information that you believe could be related to the stock performance, providing those would be the best way to proceed.\n\nOnce I have that information, I can help interpret the data and provide possible reasons for the stock performance based on your summary.\n\nAlternatively, if you did not find any relevant information in the news articles or need assistance with another task, please let me know how else I may assist you.\n\n--------------------------------------------------------------------------------\nUser (to Researcher):\n\n\n\n--------------------------------------------------------------------------------\nResearcher (to User):\n\nIt seems there is no new information provided to assess the stock performance of NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA). Without specific details, I can suggest possible general factors based on common reasons that typically influence stock performance:\n\n1. **Earnings Reports**: A company's stock often reacts to earnings reports. NVDA might have had stronger-than-expected earnings and outlook, while TSLA might have reported weaker results or provided disappointing guidance.\n   \n2. **Product and Service Developments**: Any new product launches or updates may have affected these stocks. For example, NVDA could be benefiting from new GPU technologies or partnerships in AI or data centers, while TSLA might be facing a slow rollout of new electric vehicle models.\n\n3. **Supply Chain and Manufacturing**: Given the global supply chain issues, NVDA could have successfully navigated the challenges, whereas TSLA might have struggled due to dependency on components like batteries.\n\n4. **Regulatory Environment**: Changes in regulations could impact these companies differently, especially given the industries they operate within. This could include things like semiconductor tariffs or EV subsidies and legislation.\n\n5. **Market Conditions**: Broader market conditions or shifts in investor sentiment toward the tech sector versus the auto sector could be at play. Rising interest rates or economic downturns can also affect investor behavior.\n\n6. **Strategic Announcements**: Any significant changes in company strategy, such as mergers, acquisitions, or shifts in business focus, might influence stock prices.\n\n7. **Leadership Changes**: Executive leadership changes can affect investor confidence and stock performance.\n\n8. **Global Events**: Macro events like geopolitical tensions, economic policies, or major global events can have wide-ranging effects on the stock market.\n\n9. **Investor Sentiment**: Sometimes the stock market moves based on sentiment, trends, and investor perceptions, which can sometimes be disconnected from a company's fundamental performance.\n\nWithout the latest news or specific information relating to NVDA and TSLA, this is as specific as the analysis can get. To get a more detailed understanding, you would need to look into the recent events specifically related to both companies.\n\nIf there is no further information or analysis needed at this time, that concludes the investigation. Please let me know if there is anything else I can assist with.\n\n--------------------------------------------------------------------------------\nUser (to Researcher):\n\n\n\n--------------------------------------------------------------------------------\nResearcher (to User):\n\nSince there doesn't seem to be any further information to process or additional requests for assistance, it looks like we've reached the conclusion of this task. If you need help in the future with similar inquiries or any other questions, feel free to reach out. \n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n********************************************************************************\nStart a new chat with the following message: \nDevelop an engaging blog post using any information provided.\n\nWith the following carryover: \nI want to include a figure or a table of data in the blogpost.\nThe script has executed successfully and provided the following results:\n\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\n- NVDA has experienced a percentage increase of 28.14% over the past month.\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\n\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\n\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\n\n\nTo investigate the stock performance of NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA), potential factors to consider include recent earnings reports, significant news events, industry trends, market conditions, and broader macroeconomic factors. Without specific external news or data, generalized potential reasons for NVDA's stock increase and TSLA's stock decrease were provided, including earnings performance, product and service developments, supply chain and manufacturing issues, regulatory environment changes, strategic company announcements, leadership changes, and global events. Further detailed analysis requires external news and data, which wasn't supplied during the conversation. The investigation concludes due to a lack of additional information.\n\n********************************************************************************\nUser (to writer):\n\nDevelop an engaging blog post using any information provided.\nContext: \nI want to include a figure or a table of data in the blogpost.\nThe script has executed successfully and provided the following results:\n\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\n- NVDA has experienced a percentage increase of 28.14% over the past month.\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\n\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\n\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\n\n\nTo investigate the stock performance of NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA), potential factors to consider include recent earnings reports, significant news events, industry trends, market conditions, and broader macroeconomic factors. Without specific external news or data, generalized potential reasons for NVDA's stock increase and TSLA's stock decrease were provided, including earnings performance, product and service developments, supply chain and manufacturing issues, regulatory environment changes, strategic company announcements, leadership changes, and global events. Further detailed analysis requires external news and data, which wasn't supplied during the conversation. The investigation concludes due to a lack of additional information.\n\n--------------------------------------------------------------------------------\nwriter (to User):\n\n**Roller Coaster Markets: The Ups and Downs of NVDA and TSLA Stocks**\n\nThe stock market is a melting pot of numbers, emotions, predictions, and ever-changing trends. Just when you think you have it figured out, it takes a sharp turn, leaving many investors bewildered in its wake. This turbulent affair is best exemplified by the recent performances of two high-profile tech titans: NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA). In the span of a month, we've witnessed a tale of two very different fortunes, with NVDA soaring and TSLA dropping. Let's dive into these twists and turns with the help of some compelling numbers.\n\n### A Tale of Two Stocks: NVIDIA vs. Tesla\n\nFirst, let's set the scene with the main actors: our current stock prices. As of now, NVIDIA stands at a commanding $722.48, while Tesla has taken a more modest position at $188.13. These figures are not just digits on a screen; they represent the bloodline of the companies in the financial markets. They're the instantly-updatable scorecards telling us how the companies are faring in the eyes of investors.\n\nBut the plot thickens when we look at the performance over the past month. NVIDIA has seen a stellar rise, its stock price ballooning by 28.14%. Conversely, Tesla's numbers tell a somber story, with its value deflating by -14.45%. What could be behind this diverging fate of two tech giants? Before we venture a guess, take a look at the data neatly laid out:\n\n| Company | Current Stock Price | 1-Month Performance |\n|---------|---------------------|---------------------|\n| NVDA    | $722.48             | +28.14%             |\n| TSLA    | $188.13             | -14.45%             |\n\n### Understanding the Tides of Tech Stocks\n\nNow, to peel back the layers of these statistics, we need to consider a variety of elements that can influence a stock's allure. For NVIDIA, this commanding uptick could be attributed to several factors. Earnings reports beating expectations, breakthroughs in AI and deep learning technologies, or a bullish semiconductor market overall might all play roles in lifting up the NVDA stock.\n\nTesla's journey down the stock price hill could be pinned to a wider range of possibilities\u2014perhaps disappointing earnings, production bottlenecks, or even the CEO's latest Twitter escapade could have investors hedging their bets. The automotive industry is also notoriously sensitive to economic shifts, supply chain issues, and regulatory news, all of which could impact TSLA's value.\n\n### Weighing the Market's Mood Swings\n\nAs smart as it would be to chalk up NVIDIA's rally and Tesla's slouch entirely to company-specific news, let's not discount broader market conditions and macroeconomic factors. Investor sentiment can be swayed by global events, interest rates, and shifts in technology trends. The market's current darling could quickly become tomorrow's underdog if the winds change direction.\n\n### A Chapter Yet to Finish\n\nAs much as these numbers paint a vivid picture of the present, it's crucial to remember that the markets are dynamic. What we see today could very well be upended by tomorrow's news, a sudden geopolitical shakeup, or even a tweet. For now, though, NVIDIA shareholders can bask in the green glow of their portfolio screens, while Tesla's faithful must buckle up and ride out the storm, hopeful for smoother roads ahead.\n\n### Final Thoughts\n\nAlways keep in mind, the stock market's story is a continuing saga, not a short tale. The graph that ascends today might dip tomorrow, and the sagging curve might soon find its uplift. Wise is the investor who looks beyond the immediate drama, focusing on the long-term narrative built on solid fundamentals, effective strategies, and a keen eye for the unpredictable ebb and flow of financial tides.\n\nStocks are inherently volatile, and while today's data gives us a snapshot, only time will tell the full story. What we can do is watch, analyze, and perhaps, if we're bold enough, place our bets on the outcome of the next chapter in the thrilling manuscript of the stock market.\n\nStay tuned, investors. The market's pen is never at rest.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.h4,{id:"check-chat-results",children:"Check chat results"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"initiate_chat"})," method returns a ",(0,a.jsx)(n.code,{children:"ChatResult"})," object, which is a\ndataclass object storing information about the chat. Currently, it\nincludes the following attributes:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"chat_history"}),": a list of chat history."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"summary"}),": a string of chat summary. A summary is only available if\na summary_method is provided when initiating the chat."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"cost"}),": a tuple of (total_cost, total_actual_cost), where total_cost\nis a dictionary of cost information, and total_actual_cost is a\ndictionary of information on the actual incurred cost with cache."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"human_input"}),": a list of strings of human inputs solicited during\nthe chat. (Note that since we are setting ",(0,a.jsx)(n.code,{children:"human_input_mode"})," to\n",(0,a.jsx)(n.code,{children:"NEVER"})," in this notebook, this list is always empty.)"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'for i, chat_res in enumerate(chat_results):\n    print(f"*****{i}th chat*******:")\n    print(chat_res.summary)\n    print("Human input in the middle:", chat_res.human_input)\n    print("Conversation cost: ", chat_res.cost)\n    print("\\n\\n")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"*****0th chat*******:\nThe script has executed successfully and provided the following results:\n\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\n- NVDA has experienced a percentage increase of 28.14% over the past month.\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\n\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\n\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\n\n\nHuman input in the middle: []\nConversation cost:  ({'total_cost': 0.08859, 'gpt-4': {'cost': 0.08859, 'prompt_tokens': 1597, 'completion_tokens': 678, 'total_tokens': 2275}}, {'total_cost': 0})\n\n\n\n*****1th chat*******:\nTo investigate the stock performance of NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA), potential factors to consider include recent earnings reports, significant news events, industry trends, market conditions, and broader macroeconomic factors. Without specific external news or data, generalized potential reasons for NVDA's stock increase and TSLA's stock decrease were provided, including earnings performance, product and service developments, supply chain and manufacturing issues, regulatory environment changes, strategic company announcements, leadership changes, and global events. Further detailed analysis requires external news and data, which wasn't supplied during the conversation. The investigation concludes due to a lack of additional information.\nHuman input in the middle: []\nConversation cost:  ({'total_cost': 0.36354, 'gpt-4': {'cost': 0.36354, 'prompt_tokens': 8864, 'completion_tokens': 1627, 'total_tokens': 10491}}, {'total_cost': 0})\n\n\n\n*****2th chat*******:\n**Roller Coaster Markets: The Ups and Downs of NVDA and TSLA Stocks**\n\nThe stock market is a melting pot of numbers, emotions, predictions, and ever-changing trends. Just when you think you have it figured out, it takes a sharp turn, leaving many investors bewildered in its wake. This turbulent affair is best exemplified by the recent performances of two high-profile tech titans: NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA). In the span of a month, we've witnessed a tale of two very different fortunes, with NVDA soaring and TSLA dropping. Let's dive into these twists and turns with the help of some compelling numbers.\n\n### A Tale of Two Stocks: NVIDIA vs. Tesla\n\nFirst, let's set the scene with the main actors: our current stock prices. As of now, NVIDIA stands at a commanding $722.48, while Tesla has taken a more modest position at $188.13. These figures are not just digits on a screen; they represent the bloodline of the companies in the financial markets. They're the instantly-updatable scorecards telling us how the companies are faring in the eyes of investors.\n\nBut the plot thickens when we look at the performance over the past month. NVIDIA has seen a stellar rise, its stock price ballooning by 28.14%. Conversely, Tesla's numbers tell a somber story, with its value deflating by -14.45%. What could be behind this diverging fate of two tech giants? Before we venture a guess, take a look at the data neatly laid out:\n\n| Company | Current Stock Price | 1-Month Performance |\n|---------|---------------------|---------------------|\n| NVDA    | $722.48             | +28.14%             |\n| TSLA    | $188.13             | -14.45%             |\n\n### Understanding the Tides of Tech Stocks\n\nNow, to peel back the layers of these statistics, we need to consider a variety of elements that can influence a stock's allure. For NVIDIA, this commanding uptick could be attributed to several factors. Earnings reports beating expectations, breakthroughs in AI and deep learning technologies, or a bullish semiconductor market overall might all play roles in lifting up the NVDA stock.\n\nTesla's journey down the stock price hill could be pinned to a wider range of possibilities\u2014perhaps disappointing earnings, production bottlenecks, or even the CEO's latest Twitter escapade could have investors hedging their bets. The automotive industry is also notoriously sensitive to economic shifts, supply chain issues, and regulatory news, all of which could impact TSLA's value.\n\n### Weighing the Market's Mood Swings\n\nAs smart as it would be to chalk up NVIDIA's rally and Tesla's slouch entirely to company-specific news, let's not discount broader market conditions and macroeconomic factors. Investor sentiment can be swayed by global events, interest rates, and shifts in technology trends. The market's current darling could quickly become tomorrow's underdog if the winds change direction.\n\n### A Chapter Yet to Finish\n\nAs much as these numbers paint a vivid picture of the present, it's crucial to remember that the markets are dynamic. What we see today could very well be upended by tomorrow's news, a sudden geopolitical shakeup, or even a tweet. For now, though, NVIDIA shareholders can bask in the green glow of their portfolio screens, while Tesla's faithful must buckle up and ride out the storm, hopeful for smoother roads ahead.\n\n### Final Thoughts\n\nAlways keep in mind, the stock market's story is a continuing saga, not a short tale. The graph that ascends today might dip tomorrow, and the sagging curve might soon find its uplift. Wise is the investor who looks beyond the immediate drama, focusing on the long-term narrative built on solid fundamentals, effective strategies, and a keen eye for the unpredictable ebb and flow of financial tides.\n\nStocks are inherently volatile, and while today's data gives us a snapshot, only time will tell the full story. What we can do is watch, analyze, and perhaps, if we're bold enough, place our bets on the outcome of the next chapter in the thrilling manuscript of the stock market.\n\nStay tuned, investors. The market's pen is never at rest.\n\n\nHuman input in the middle: []\nConversation cost:  ({'total_cost': 0.06447, 'gpt-4': {'cost': 0.06447, 'prompt_tokens': 371, 'completion_tokens': 889, 'total_tokens': 1260}}, {'total_cost': 0})\n\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"scenario-2-with-human-inputs-revising-tasks-in-the-middle",children:"Scenario 2: With human inputs revising tasks in the middle"}),"\n",(0,a.jsxs)(n.p,{children:["Since AutoGen agents support soliciting human inputs during a chat if\n",(0,a.jsx)(n.code,{children:"human_input_mode"})," is specificed properly, the actual task might be\nrevised in the middle of a chat."]}),"\n",(0,a.jsx)(n.p,{children:"The example below showcases that even if a task is revised in the middle\n(for the first task, the human user requests to get Microsoft\u2019s stock\nprice information as well, in addition to NVDA and TSLA), the\n`reflection_with_llm`` summary method can still capture it, as it\nreflects on the whole conversation instead of just the original request."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'user = autogen.UserProxyAgent(\n    name="User",\n    human_input_mode="ALWAYS",  # ask human for input at each step\n    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "tasks",\n        "use_docker": False,\n    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n)\n\nchat_results = user.initiate_chats(\n    [\n        {\n            "recipient": financial_assistant,\n            "message": financial_tasks[0],\n            "clear_history": True,\n            "silent": False,\n            "summary_method": "reflection_with_llm",\n        },\n        {\n            "recipient": research_assistant,\n            "message": financial_tasks[1],\n            "summary_method": "reflection_with_llm",\n        },\n        {\n            "recipient": writer,\n            "message": writing_tasks[0],\n        },\n    ]\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n********************************************************************************\nStart a new chat with the following message: \nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\nWith the following carryover: \n\n\n********************************************************************************\nUser (to Financial_assistant):\n\nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nTo get the current stock prices of NVDA (NVIDIA Corporation) and TSLA (Tesla, Inc.), along with their performance over the past month in terms of percentage change, we can use a Python library like `yfinance`. This library allows downloading of historical market data from Yahoo Finance.\n\nLet's proceed in the following steps:\n\n1. I will provide you a Python script that utilizes the `yfinance` library to fetch the current stock prices and historical data for the past month for both NVDA and TSLA.\n2. The script will then calculate the percentage change in the stock prices over the past month.\n\nPlease make sure that you have `yfinance` installed in your Python environment before running the script. You can install it using `pip install yfinance`.\n\nHere is the Python code to execute:\n\n```python\n# filename: stock_info.py\nimport yfinance as yf\nfrom datetime import datetime, timedelta\n\n# Function to get current stock price\ndef get_stock_price(stock_ticker):\n    stock = yf.Ticker(stock_ticker)\n    todays_data = stock.history(period='1d')\n    return todays_data['Close'][0]\n\n# Function to calculate percentage change over the past month\ndef get_percentage_change(stock_ticker):\n    stock = yf.Ticker(stock_ticker)\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=30)\n    historical_data = stock.history(start=start_date, end=end_date)\n    price_end = historical_data['Close'][-1]\n    price_start = historical_data['Close'][0]\n    percent_change = ((price_end - price_start)/price_start) * 100\n    return percent_change\n\n# Getting the current price and performance for NVDA and TSLA\nnvda_price = get_stock_price('NVDA')\ntesla_price = get_stock_price('TSLA')\nnvda_change = get_percentage_change('NVDA')\ntesla_change = get_percentage_change('TSLA')\n\n# Output the results\nprint(f\"NVDA (NVIDIA Corporation) stock price: ${nvda_price:.2f}\")\nprint(f\"TESLA (Tesla, Inc.) stock price: ${tesla_price:.2f}\")\nprint(f\"NVDA percentage change over past month: {nvda_change:.2f}%\")\nprint(f\"TESLA percentage change over past month: {tesla_change:.2f}%\")\n```\n\nPlease run this script in your environment and share with me the output. I'll then verify the information.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser (to Financial_assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nNVDA (NVIDIA Corporation) stock price: $722.48\nTESLA (Tesla, Inc.) stock price: $188.13\nNVDA percentage change over past month: 28.14%\nTESLA percentage change over past month: -14.45%\n\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nThe script has executed successfully and provided the following results:\n\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\n- NVDA has experienced a percentage increase of 28.14% over the past month.\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\n\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\n\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\nUser (to Financial_assistant):\n\nWhat about microsoft\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nTo obtain the current stock price and calculate the performance over the past month for Microsoft Corporation (MSFT), I will provide you with an updated Python script that includes MSFT in addition to the previously fetched data for NVDA and TSLA. You can run this script to obtain the necessary information.\n\nPlease execute the following Python code:\n\n```python\n# filename: microsoft_stock_info.py\nimport yfinance as yf\nfrom datetime import datetime, timedelta\n\n# Function to get current stock price and percentage change over the past month for a stock\ndef get_stock_info(stock_ticker):\n    stock = yf.Ticker(stock_ticker)\n    \n    # Get current stock price\n    todays_data = stock.history(period='1d')\n    current_price = todays_data['Close'][0]\n    \n    # Calculate percentage change over the past month\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=30)\n    historical_data = stock.history(start=start_date, end=end_date)\n    price_end = historical_data['Close'][-1]\n    price_start = historical_data['Close'][0]\n    percent_change = ((price_end - price_start)/price_start) * 100\n    \n    return current_price, percent_change\n\n# Getting the current price and performance for MSFT\nmsft_price, msft_change = get_stock_info('MSFT')\n\n# Output the results\nprint(f\"Microsoft (MSFT) stock price: ${msft_price:.2f}\")\nprint(f\"Microsoft (MSFT) percentage change over past month: {msft_change:.2f}%\")\n```\n\nPlease run the provided script in your Python environment and tell me the output. Once I have the results, I can further assist you with the information.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser (to Financial_assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nMicrosoft (MSFT) stock price: $415.26\nMicrosoft (MSFT) percentage change over past month: 6.40%\n\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User):\n\nThe script has executed successfully and provided the following results for Microsoft Corporation (MSFT):\n\n- The current stock price for Microsoft (MSFT) is $415.26.\n- Microsoft has experienced a percentage increase of 6.40% over the past month.\n\nThis information indicates that Microsoft's stock price has seen a moderate increase in value over the last month. \n\nKeep in mind that stock prices are volatile and can change frequently throughout trading hours.\n\nIf you need additional assistance or more financial insights, feel free to ask. Otherwise, this concludes our task.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n\n********************************************************************************\nStart a new chat with the following message: \nInvestigate possible reasons of the stock performance.\n\nWith the following carryover: \nThe current stock prices and recent performance over the past month for NVDA, TSLA, and MSFT are as follows:\n\nNVDA (NVIDIA Corporation):\n- Stock Price: $722.48\n- Performance: +28.14% over the past month\n\nTSLA (Tesla, Inc.):\n- Stock Price: $188.13\n- Performance: -14.45% over the past month\n\nMSFT (Microsoft Corporation):\n- Stock Price: $415.26\n- Performance: +6.40% over the past month\n\nThese results show that NVIDIA has experienced significant growth in its stock value, Microsoft has seen a moderate increase, and Tesla's stock has declined in the past month.\n\n********************************************************************************\nUser (to Researcher):\n\nInvestigate possible reasons of the stock performance.\nContext: \nThe current stock prices and recent performance over the past month for NVDA, TSLA, and MSFT are as follows:\n\nNVDA (NVIDIA Corporation):\n- Stock Price: $722.48\n- Performance: +28.14% over the past month\n\nTSLA (Tesla, Inc.):\n- Stock Price: $188.13\n- Performance: -14.45% over the past month\n\nMSFT (Microsoft Corporation):\n- Stock Price: $415.26\n- Performance: +6.40% over the past month\n\nThese results show that NVIDIA has experienced significant growth in its stock value, Microsoft has seen a moderate increase, and Tesla's stock has declined in the past month.\n\n--------------------------------------------------------------------------------\nResearcher (to User):\n\nTo investigate the possible reasons behind the stock performance of NVIDIA (NVDA), Tesla (TSLA), and Microsoft (MSFT), we'll consider several factors that typically affect stock prices:\n\n1. **Company earnings reports**: Strong earnings often lead to stock price increases, while disappointing earnings can lead to price drops.\n\n2. **Market trends and economic conditions**: Broader market trends can impact individual stocks. For example, a decline in the automotive sector might negatively affect Tesla.\n\n3. **News and events**: Company-specific news, such as product launches, regulatory approvals, partnerships, lawsuits, or recalls, can impact stock performance.\n\n4. **Industry developments**: Developments in the technology sector, automotive industry, and other relevant markets can influence the performance of these companies' stocks.\n\n5. **Investor sentiment**: Changes in investor confidence, often influenced by analysts' ratings or market commentary, can affect stock prices.\n\n6. **Technological advancements**: For tech companies like NVIDIA and Microsoft, advancements in technology and successful integration of new technologies can positively influence stock prices.\n\n7. **Legal and regulatory changes**: Changes in government policy, legal cases, or regulatory issues affecting these companies or their industries can impact their stock performance.\n\nTo begin with, we need to check for recent news, earnings reports, analyst ratings, and any significant events that may explain the stock price movements for these companies. To gather this information efficiently, we can use a combination of web scraping for recent news and extracting financial data from reliable sources such as financial news websites, stock market data providers, and the companies' investor relations pages.\n\nFor the purpose of this task, I will suggest a code to scrape recent news headlines from the web that may contain information explaining the performance of NVDA, TSLA, and MSFT stocks. \n\n```python\n# filename: stock_news_scraper.py\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Define a function to get news related to a specific stock symbol\ndef get_stock_news(stock_symbol):\n    # URL to scrape the news from Yahoo Finance for the provided stock_symbol\n    url = f'https://finance.yahoo.com/quote/{stock_symbol}/'\n    \n    # Perform a GET request to fetch the page content\n    response = requests.get(url)\n    \n    # Check if the request was successful\n    if response.status_code == 200:\n        # Parse the page content using BeautifulSoup\n        soup = BeautifulSoup(response.text, 'html.parser')\n        \n        # Find all news items. Yahoo Finance uses <h3> tags for news headlines.\n        news_headlines = soup.find_all('h3', {'class': 'Mb(5px)'})\n        \n        # Collect the headlines in a list\n        headlines = [headline.text for headline in news_headlines]\n        \n        return headlines\n    else:\n        # If the request failed, return an error message\n        return f'Failed to retrieve news for {stock_symbol}, status code: {response.status_code}'\n\n# Get news for NVDA, TSLA, and MSFT\nnvda_news = get_stock_news('NVDA')\ntsla_news = get_stock_news('TSLA')\nmsft_news = get_stock_news('MSFT')\n\n# Print the news for each stock\nprint('NVDA (NVIDIA Corporation) Recent News:')\nprint('\\n'.join(nvda_news))\nprint('\\nTSLA (Tesla, Inc.) Recent News:')\nprint('\\n'.join(tsla_news))\nprint('\\nMSFT (Microsoft Corporation) Recent News:')\nprint('\\n'.join(msft_news))\n```\n\nPlease execute the provided Python code to scrape the recent news headlines. The output will consist of the most recent news headlines related to NVDA, TSLA, and MSFT from Yahoo Finance, which may contain clues about their stock performance.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser (to Researcher):\n\nexitcode: 0 (execution succeeded)\nCode output: \nNVDA (NVIDIA Corporation) Recent News:\nS&P 500 earnings: Can stocks rally beyond Magnificent Seven?\nArm valuation 'a head-scratcher' in greater AI picture\nWhy the Market Dipped But Nvidia (NVDA) Gained Today\nDow Jones Futures: Arm Rockets 42%; AI Stock Arista Dives On Earnings\nArm Continues Meteoric Rise Amid AI Stock Buying Frenzy\nStock Market Today: Indexes Mixed As CPI Data Looms; Cheap Stock Soars 370% On Nvidia Partnership\nThe Simple Reason Nvidia Stock Is Flying\nArm Extends Blistering Rally as Stock Nearly Triples Since IPO\nNvidia Overtakes Amazon in Market Value\nNvidia's Surge, Tesla's Slide Reveal These Vital Investing Rules\n\nTSLA (Tesla, Inc.) Recent News:\nS&P 500 earnings: Can stocks rally beyond Magnificent Seven?\nChevy finalizes Equinox EV base price starting at $34,995\nTesla: Is Elon Musk actually bad for EV maker's business?\nTesla Vs. BYD: TSLA, New EV King Struggle To Rebound Amid Weak Earnings, Tough Climate\nTesla Cuts Model Y Prices For A Limited Time \u2014 At Least For Now\nElon Musk Wanted To Sell Tesla To Apple, But CEO Tim Cook Does Not Recall Ever Speaking To Him\nMagnificent Seven Stocks To Buy And Watch: Nvidia Rallies To Record High\nWhy Rivian Shares Are Sinking Today\nEVs and Americans Are Complicated. Here\u2019s How to Fix the Relationship.\n\nMSFT (Microsoft Corporation) Recent News:\nLayoffs hit gaming in 2024: The industry's biggest headwinds\nThe World\u2019s Largest Companies\nThese Stocks Moved the Most Today: Diamondback Energy, Big Lots, CymaBay, VF Corp., Monday.com, Rocket Lab, and More\nTop Stock Picks for Week of February 12, 2024\n25 Largest Economies in the World by 2040\nMagnificent Seven Stocks To Buy And Watch: Nvidia Rallies To Record High\nCloud Computing ETFs at a 52-Week High: Here's Why\nJeff Bezos Could Have Been One Of The Richest Men In History If He Hadn't Divorced Mackenzie Scott Without A Prenup  \u2014 Here's What Those Amazon Shares Would Be Worth Today\n13 Best Metaverse Stocks To Buy Right Now\n\n\n--------------------------------------------------------------------------------\nResearcher (to User):\n\nBased on the recent news headlines for each of the three companies, we can start to deduce some reasons behind their stock performance:\n\n**NVIDIA (NVDA) Recent News Highlights**:\n- There are repeated mentions of AI (Artificial Intelligence), suggesting that NVIDIA may be benefiting from a surge in AI-related business or technology, which could explain the positive stock performance.\n- News about NVIDIA's partnership leading to a massive increase in a stock value (\"Cheap Stock Soars 370% On Nvidia Partnership\") indicates market enthusiasm regarding their collaborations.\n- NVIDIA overtaking Amazon in market value and \"Nvidia's Surge, Tesla's Slide Reveal These Vital Investing Rules\" headlines suggest investor confidence in NVIDIA's growth and performance.\n- The headline \"Arm Continues Meteoric Rise Amid AI Stock Buying Frenzy\" might refer to NVIDIA's potential involvement with Arm, which is seeing high investor interest.\n  \n**Tesla (TSLA) Recent News Highlights**:\n- There are mentions of competition from other EV makers (\"Chevy finalizes Equinox EV base price starting at $34,995\"), which could be constraining Tesla's market dominance and stock price.\n- Negative media coverage related to Elon Musk (\"Tesla: Is Elon Musk actually bad for EV maker's business?\") might affect investor sentiment.\n- Pricing changes (\"Tesla Cuts Model Y Prices For A Limited Time \u2014 At Least For Now\") suggest Tesla could be responding to market pressures, potentially impacting profit margins.\n- Comparisons with BYD and mentions of struggling to rebound amid weak earnings imply that financial results may not be meeting market expectations.\n\n**Microsoft (MSFT) Recent News Highlights**:\n- The headline \"Layoffs hit gaming in 2024: The industry's biggest headwinds\" may hint at challenges in one segment of Microsoft's business.\n- General news updates about stock movements and macroeconomic forecasts (\"The World\u2019s Largest Companies\") don't specify direct causes but can augment investor sentiment.\n- Positive news regarding cloud computing (\"Cloud Computing ETFs at a 52-Week High: Here's Why\") may reflect well on Microsoft's Azure platform, which is a significant part of their business.\n\n**Analysis and Conclusion**:\nThe strong performance of NVDA could be attributed to the positive buzz around AI, strategic partnerships, and market valuation news, which are likely driving investor optimism. The slight decline in TSLA stock might be due to competitive pressures, public perception challenges related to Elon Musk, and potentially underwhelming financial figures. MSFT's moderate growth appears less news-driven and might be linked to positive sentiment around its cloud services, a diverse portfolio offering stability, and perhaps broader market trends.\n\nIt's important to note that while this analysis provides some insights, investors would typically also consider financial data, earnings reports, analyst ratings, and more comprehensive market analysis to form a complete understanding of each stock's performance.\n\nWith these points in mind, NVDA seems to be in a position of strong growth, especially in the realm of AI technologies, MSFT is showing stability with potential in cloud computing, and TSLA is facing headwinds that are likely causing some investor caution.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n\n********************************************************************************\nStart a new chat with the following message: \nDevelop an engaging blog post using any information provided.\n\nWith the following carryover: \nThe current stock prices and recent performance over the past month for NVDA, TSLA, and MSFT are as follows:\n\nNVDA (NVIDIA Corporation):\n- Stock Price: $722.48\n- Performance: +28.14% over the past month\n\nTSLA (Tesla, Inc.):\n- Stock Price: $188.13\n- Performance: -14.45% over the past month\n\nMSFT (Microsoft Corporation):\n- Stock Price: $415.26\n- Performance: +6.40% over the past month\n\nThese results show that NVIDIA has experienced significant growth in its stock value, Microsoft has seen a moderate increase, and Tesla's stock has declined in the past month.\nNVIDIA (NVDA) has experienced significant growth likely due to positive developments in AI technologies and investor optimism reflected in recent news about partnerships and overtaking Amazon in market value. Tesla (TSLA) stock has declined possibly due to competitive pressures, Elon Musk's negative media attention, and potential financial performance concerns. Microsoft (MSFT) has seen moderate increases, potentially related to the robust performance of its cloud computing services and its diverse portfolio offering overall stability within the market.\n\n********************************************************************************\nUser (to writer):\n\nDevelop an engaging blog post using any information provided.\nContext: \nThe current stock prices and recent performance over the past month for NVDA, TSLA, and MSFT are as follows:\n\nNVDA (NVIDIA Corporation):\n- Stock Price: $722.48\n- Performance: +28.14% over the past month\n\nTSLA (Tesla, Inc.):\n- Stock Price: $188.13\n- Performance: -14.45% over the past month\n\nMSFT (Microsoft Corporation):\n- Stock Price: $415.26\n- Performance: +6.40% over the past month\n\nThese results show that NVIDIA has experienced significant growth in its stock value, Microsoft has seen a moderate increase, and Tesla's stock has declined in the past month.\nNVIDIA (NVDA) has experienced significant growth likely due to positive developments in AI technologies and investor optimism reflected in recent news about partnerships and overtaking Amazon in market value. Tesla (TSLA) stock has declined possibly due to competitive pressures, Elon Musk's negative media attention, and potential financial performance concerns. Microsoft (MSFT) has seen moderate increases, potentially related to the robust performance of its cloud computing services and its diverse portfolio offering overall stability within the market.\n\n--------------------------------------------------------------------------------\nwriter (to User):\n\nTitle: Navigating the Tides of Tech: NVIDIA Surges, Tesla Navigates Rough Waters, and Microsoft Sails Steadily\n\nIn the unpredictable oceans of the stock market, the tech titans - NVIDIA, Tesla, and Microsoft - have shown varied performances over the past month, each telling a tale that savvy investors and enthusiasts alike eagerly dissect for future prospects.\n\nEmbarking on a remarkable journey, NVIDIA Corporation (NVDA), the leading light in graphics processing technology, has seen its stock skyrocket to a dazzling $722.48, marking a staggering 28.14% ascend in just thirty days. This impressive climb can be largely attributed to the company's groundbreaking strides in AI technologies. NVIDIA's innovation engine is firing on all cylinders, with recent partnerships underscoring its pivotal role in the tech ecosystem. The surge has propelled them to new heights, overtaking giants like Amazon in market value. Investors seem to be betting heavily on NVIDIA's future, recognizing it as a beacon of the AI revolution.\n\nIn a stark contrast, Tesla Inc.'s (TSLA) journey this month has been less than ideal, with its shares taking a dip to $188.13, reflecting a 14.45% decline. The electric vehicle pioneer, helmed by the enigmatic Elon Musk, seems to be navigating through choppy waters. Questions swirl around the company: Is the investor sentiment shifting? Are the winds of competition blowing fiercer? Or are the recent squalls caused by Elon Musk's ventures into the equally volatile Twitter sphere influencing Tesla's valuations? These factors, along with apprehensions about financial performance, have cast shadows on Tesla's stock market presence. However, true to Tesla\u2019s spirit, many investors maintain a \"weather-the-storm\" stance, convinced that the company is capable of steering back to stronger currents.\n\nMicrosoft Corporation (MSFT) depicts a steadier voyage, charting a course with a 6.40% increase in stock prices, which now stand at $415.26. This moderate but stable growth could be seen as the hallmark of Microsoft's enduring legacy in the technology sector. Microsoft's cloud computing services continue to be a powerhouse, generating a robust performance that suggests reliability amidst market fluctuations. Its diverse product and services portfolio has historically offered investors a sense of security \u2014 and this past month has been no exception. Microsoft's steady sail is a testament to its strategic positioning and resilient operations, a lighthouse for investors navigating the rough seas of the tech industry.\n\nAs we analyze this mosaic of market movements, it\u2019s clear that the tech sector remains a vibrant theater of action. NVIDIA's significant growth highlights the market's hunger for cutting-edge AI advancements and the company's capability to deliver them. Tesla's recent headwinds are a reminder that even the most disruptive companies are not immune to external factors and sentiment shifts, while Microsoft's steady performance reassures us that longstanding pillars of tech can offer safe harbor in turbulent times.\n\nInvesting in tech requires a measured approach, with an appreciation for the dynamics at play - innovation, public perception, and economic trends \u2014 each capable of steering these giants in unexpected directions. As always, the market keeps a watchful eye on these companies, looking for signs and signals of what may come, like seasoned sailors reading the stars and the swell. It's this constant interplay of forces that makes tech stocks a thrilling, albeit complex, adventure in the world of investments.\n\nTo our readers navigating these financial waters, we advise keeping a steady hand on the tiller. The tech sector, teeming with opportunity, demands respect for its potential and its unpredictability. May your investment voyages be prosperous, and may you have the foresight to chart a course through both calm and stormy seas.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n"})}),"\n",(0,a.jsx)(n.h4,{id:"check-chat-results-1",children:"Check chat results"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'for i, chat_res in enumerate(chat_results):\n    print(f"*****{i}th chat*******:")\n    print(chat_res.summary)\n    print("Human input in the middle:", chat_res.human_input)\n    print("Conversation cost: ", chat_res.cost)\n    print("\\n\\n")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"*****0th chat*******:\nThe current stock prices and recent performance over the past month for NVDA, TSLA, and MSFT are as follows:\n\nNVDA (NVIDIA Corporation):\n- Stock Price: $722.48\n- Performance: +28.14% over the past month\n\nTSLA (Tesla, Inc.):\n- Stock Price: $188.13\n- Performance: -14.45% over the past month\n\nMSFT (Microsoft Corporation):\n- Stock Price: $415.26\n- Performance: +6.40% over the past month\n\nThese results show that NVIDIA has experienced significant growth in its stock value, Microsoft has seen a moderate increase, and Tesla's stock has declined in the past month.\nHuman input in the middle: ['', 'What about microsoft', '', '']\nConversation cost:  ({'total_cost': 0.34307999999999994, 'gpt-4': {'cost': 0.34307999999999994, 'prompt_tokens': 7486, 'completion_tokens': 1975, 'total_tokens': 9461}}, {'total_cost': 0.1659, 'gpt-4': {'cost': 0.1659, 'prompt_tokens': 4292, 'completion_tokens': 619, 'total_tokens': 4911}})\n\n\n\n*****1th chat*******:\nNVIDIA (NVDA) has experienced significant growth likely due to positive developments in AI technologies and investor optimism reflected in recent news about partnerships and overtaking Amazon in market value. Tesla (TSLA) stock has declined possibly due to competitive pressures, Elon Musk's negative media attention, and potential financial performance concerns. Microsoft (MSFT) has seen moderate increases, potentially related to the robust performance of its cloud computing services and its diverse portfolio offering overall stability within the market.\nHuman input in the middle: ['', '']\nConversation cost:  ({'total_cost': 0.5937600000000001, 'gpt-4': {'cost': 0.5937600000000001, 'prompt_tokens': 13530, 'completion_tokens': 3131, 'total_tokens': 16661}}, {'total_cost': 0.23021999999999998, 'gpt-4': {'cost': 0.23021999999999998, 'prompt_tokens': 4666, 'completion_tokens': 1504, 'total_tokens': 6170}})\n\n\n\n*****2th chat*******:\nTitle: Navigating the Tides of Tech: NVIDIA Surges, Tesla Navigates Rough Waters, and Microsoft Sails Steadily\n\nIn the unpredictable oceans of the stock market, the tech titans - NVIDIA, Tesla, and Microsoft - have shown varied performances over the past month, each telling a tale that savvy investors and enthusiasts alike eagerly dissect for future prospects.\n\nEmbarking on a remarkable journey, NVIDIA Corporation (NVDA), the leading light in graphics processing technology, has seen its stock skyrocket to a dazzling $722.48, marking a staggering 28.14% ascend in just thirty days. This impressive climb can be largely attributed to the company's groundbreaking strides in AI technologies. NVIDIA's innovation engine is firing on all cylinders, with recent partnerships underscoring its pivotal role in the tech ecosystem. The surge has propelled them to new heights, overtaking giants like Amazon in market value. Investors seem to be betting heavily on NVIDIA's future, recognizing it as a beacon of the AI revolution.\n\nIn a stark contrast, Tesla Inc.'s (TSLA) journey this month has been less than ideal, with its shares taking a dip to $188.13, reflecting a 14.45% decline. The electric vehicle pioneer, helmed by the enigmatic Elon Musk, seems to be navigating through choppy waters. Questions swirl around the company: Is the investor sentiment shifting? Are the winds of competition blowing fiercer? Or are the recent squalls caused by Elon Musk's ventures into the equally volatile Twitter sphere influencing Tesla's valuations? These factors, along with apprehensions about financial performance, have cast shadows on Tesla's stock market presence. However, true to Tesla\u2019s spirit, many investors maintain a \"weather-the-storm\" stance, convinced that the company is capable of steering back to stronger currents.\n\nMicrosoft Corporation (MSFT) depicts a steadier voyage, charting a course with a 6.40% increase in stock prices, which now stand at $415.26. This moderate but stable growth could be seen as the hallmark of Microsoft's enduring legacy in the technology sector. Microsoft's cloud computing services continue to be a powerhouse, generating a robust performance that suggests reliability amidst market fluctuations. Its diverse product and services portfolio has historically offered investors a sense of security \u2014 and this past month has been no exception. Microsoft's steady sail is a testament to its strategic positioning and resilient operations, a lighthouse for investors navigating the rough seas of the tech industry.\n\nAs we analyze this mosaic of market movements, it\u2019s clear that the tech sector remains a vibrant theater of action. NVIDIA's significant growth highlights the market's hunger for cutting-edge AI advancements and the company's capability to deliver them. Tesla's recent headwinds are a reminder that even the most disruptive companies are not immune to external factors and sentiment shifts, while Microsoft's steady performance reassures us that longstanding pillars of tech can offer safe harbor in turbulent times.\n\nInvesting in tech requires a measured approach, with an appreciation for the dynamics at play - innovation, public perception, and economic trends \u2014 each capable of steering these giants in unexpected directions. As always, the market keeps a watchful eye on these companies, looking for signs and signals of what may come, like seasoned sailors reading the stars and the swell. It's this constant interplay of forces that makes tech stocks a thrilling, albeit complex, adventure in the world of investments.\n\nTo our readers navigating these financial waters, we advise keeping a steady hand on the tiller. The tech sector, teeming with opportunity, demands respect for its potential and its unpredictability. May your investment voyages be prosperous, and may you have the foresight to chart a course through both calm and stormy seas.\n\n\nHuman input in the middle: ['']\nConversation cost:  ({'total_cost': 0.11925, 'gpt-4': {'cost': 0.11925, 'prompt_tokens': 679, 'completion_tokens': 1648, 'total_tokens': 2327}}, {'total_cost': 0.05478, 'gpt-4': {'cost': 0.05478, 'prompt_tokens': 308, 'completion_tokens': 759, 'total_tokens': 1067}})\n\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"scenario-3-solve-the-tasks-with-a-series-of-chats-involving-group-chat",children:"Scenario 3: Solve the tasks with a series of chats involving group chat"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'user_proxy = autogen.UserProxyAgent(\n    name="User_proxy",\n    system_message="A human admin.",\n    human_input_mode="NEVER",\n    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "groupchat",\n        "use_docker": False,\n    },\n)\n\nresearch_assistant = autogen.AssistantAgent(\n    name="Researcher",\n    llm_config={"config_list": config_list},\n    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),\n)\n\nwriter = autogen.AssistantAgent(\n    name="Writer",\n    llm_config={"config_list": config_list},\n    system_message="""\n    You are a professional writer, known for\n    your insightful and engaging articles.\n    You transform complex concepts into compelling narratives.\n    Reply "TERMINATE" in the end when everything is done.\n    """,\n)\n\ncritic = autogen.AssistantAgent(\n    name="Critic",\n    system_message="""Critic. Double check plan, claims, code from other agents and provide feedback. Check whether the plan includes adding verifiable info such as source URL.\n    Reply "TERMINATE" in the end when everything is done.\n    """,\n    llm_config={"config_list": config_list},\n)\n\ngroupchat_1 = autogen.GroupChat(agents=[user_proxy, research_assistant, critic], messages=[], max_round=50)\n\ngroupchat_2 = autogen.GroupChat(agents=[user_proxy, writer, critic], messages=[], max_round=50)\n\nmanager_1 = autogen.GroupChatManager(\n    groupchat=groupchat_1,\n    name="Research_manager",\n    llm_config={"config_list": config_list},\n    is_termination_msg=lambda x: x.get("content", "").find("TERMINATE") >= 0,\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "groupchat",\n        "use_docker": False,\n    },\n)\nmanager_2 = autogen.GroupChatManager(\n    groupchat=groupchat_2,\n    name="Writing_manager",\n    llm_config={"config_list": config_list},\n    is_termination_msg=lambda x: x.get("content", "").find("TERMINATE") >= 0,\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "groupchat",\n        "use_docker": False,\n    },\n)\n\nuser = autogen.UserProxyAgent(\n    name="User",\n    human_input_mode="NEVER",\n    is_termination_msg=lambda x: x.get("content", "").find("TERMINATE") >= 0,\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "tasks",\n        "use_docker": False,\n    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n)\nuser.initiate_chats(\n    [\n        {"recipient": research_assistant, "message": financial_tasks[0], "summary_method": "last_msg"},\n        {"recipient": manager_1, "message": financial_tasks[1], "summary_method": "reflection_with_llm"},\n        {"recipient": manager_2, "message": writing_tasks[0]},\n    ]\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n********************************************************************************\nStart a new chat with the following message: \nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\nWith the following carryover: \n\n\n********************************************************************************\nUser (to Researcher):\n\nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\n--------------------------------------------------------------------------------\nResearcher (to User):\n\nTo get the current stock prices of NVDA (NVIDIA Corporation) and TSLA (Tesla, Inc.), along with their performance over the past month in terms of percentage change, we can use a Python library like `yfinance`. This library allows downloading of historical market data from Yahoo Finance.\n\nLet's proceed in the following steps:\n\n1. I will provide you a Python script that utilizes the `yfinance` library to fetch the current stock prices and historical data for the past month for both NVDA and TSLA.\n2. The script will then calculate the percentage change in the stock prices over the past month.\n\nPlease make sure that you have `yfinance` installed in your Python environment before running the script. You can install it using `pip install yfinance`.\n\nHere is the Python code to execute:\n\n```python\n# filename: stock_info.py\nimport yfinance as yf\nfrom datetime import datetime, timedelta\n\n# Function to get current stock price\ndef get_stock_price(stock_ticker):\n    stock = yf.Ticker(stock_ticker)\n    todays_data = stock.history(period='1d')\n    return todays_data['Close'][0]\n\n# Function to calculate percentage change over the past month\ndef get_percentage_change(stock_ticker):\n    stock = yf.Ticker(stock_ticker)\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=30)\n    historical_data = stock.history(start=start_date, end=end_date)\n    price_end = historical_data['Close'][-1]\n    price_start = historical_data['Close'][0]\n    percent_change = ((price_end - price_start)/price_start) * 100\n    return percent_change\n\n# Getting the current price and performance for NVDA and TSLA\nnvda_price = get_stock_price('NVDA')\ntesla_price = get_stock_price('TSLA')\nnvda_change = get_percentage_change('NVDA')\ntesla_change = get_percentage_change('TSLA')\n\n# Output the results\nprint(f\"NVDA (NVIDIA Corporation) stock price: ${nvda_price:.2f}\")\nprint(f\"TESLA (Tesla, Inc.) stock price: ${tesla_price:.2f}\")\nprint(f\"NVDA percentage change over past month: {nvda_change:.2f}%\")\nprint(f\"TESLA percentage change over past month: {tesla_change:.2f}%\")\n```\n\nPlease run this script in your environment and share with me the output. I'll then verify the information.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser (to Researcher):\n\nexitcode: 0 (execution succeeded)\nCode output: \nNVDA (NVIDIA Corporation) stock price: $722.48\nTESLA (Tesla, Inc.) stock price: $188.13\nNVDA percentage change over past month: 28.14%\nTESLA percentage change over past month: -14.45%\n\n\n--------------------------------------------------------------------------------\nResearcher (to User):\n\nThe script has executed successfully and provided the following results:\n\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\n- NVDA has experienced a percentage increase of 28.14% over the past month.\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\n\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\n\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n********************************************************************************\nStart a new chat with the following message: \nInvestigate possible reasons of the stock performance.\n\nWith the following carryover: \nThe script has executed successfully and provided the following results:\n\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\n- NVDA has experienced a percentage increase of 28.14% over the past month.\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\n\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\n\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\n\n\n\n********************************************************************************\nUser (to Research_manager):\n\nInvestigate possible reasons of the stock performance.\nContext: \nThe script has executed successfully and provided the following results:\n\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\n- NVDA has experienced a percentage increase of 28.14% over the past month.\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\n\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\n\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\n\n\n\n--------------------------------------------------------------------------------\nCritic (to Research_manager):\n\nIn order to investigate the reasons behind the performance of NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA) stock, we need to look at various factors that could influence their stock prices. Remember that stock prices can be affected by a wide spectrum of factors, ranging from company-specific news to broader economic trends. Here's a possible checklist of items to review when trying to understand stock performance:\n\n1. **Company Earnings Reports**: Has NVDA recently reported strong financial results? Have TSLA's earnings disappointments contributed to their stock price drop? Look for recent quarterly earnings reports or any forward-looking statements made by the companies.\n\n2. **Industry Trends**: Are there any major developments in the semiconductor industry that may have positively impacted NVDA's stock? For TSLA, check if there have been any negative trends or challenges within the automotive or energy sectors.\n\n3. **Market Sentiment and News**: Has there been positive or negative media coverage about NVDA or TSLA? Look for product launches, partnerships, legal issues, or scandals that might influence investor sentiment.\n\n4. **Economic Factors**: Macroeconomic factors such as changes in interest rates, inflation, and employment rates can also affect stock prices. Tech stocks, in particular, can be sensitive to interest rate changes.\n\n5. **Investor Expectations**: Assess whether there have been changes in investor expectations for NVDA's future performance as opposed to TSLA's, which may be evident from analyst ratings and price targets changes.\n\n6. **Technological Developments**: For NVDA, any breakthrough in technology or new product offerings in areas such as gaming, data centers, artificial intelligence, or cryptocurrency could have bolstered their stock. For TSLA, check if there have been any setbacks or advancements in electric vehicle technology or battery production.\n\n7. **Regulatory Environment**: Has there been any regulatory news that might affect NVDA or TSLA differently, such as trade policies, environmental regulations, or antitrust inquiries?\n\n8. **Supply Chain and Production Levels**: For both companies, supply chain disruptions can have a significant impact on their ability to meet demand and generate revenue.\n\n9. **Competitive Landscape**: Introduction of new competitors or loss of market share can significantly impact a company\u2019s stock performance.\n\nTo validate the causes behind the stock performance, one should look for concrete information from credible sources such as:\n\n- Company's Official Press Releases or Financial Statements\n- Statements from company executives during earnings calls or interviews\n- SEC Filings\n- News Articles from established financial news outlets\n- Market Analyst Reports\n- Official industry data\n\nAs the script you mentioned has run successfully and provided the latest stock prices and their monthly performance changes, the next step would be to allot time to each of these areas and research them methodically, referencing verifiable information from the sources mentioned above.\n\nPlease note, without concrete sources or current events affecting the stock market, my explanation is speculative and based on commonly known factors impacting stock prices.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n********************************************************************************\nStart a new chat with the following message: \nDevelop an engaging blog post using any information provided.\n\nWith the following carryover: \nThe script has executed successfully and provided the following results:\n\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\n- NVDA has experienced a percentage increase of 28.14% over the past month.\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\n\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\n\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\n\n\nPossible reasons for NVIDIA Corporation (NVDA) stock's performance increase could include strong financial results, positive developments in the semiconductor industry, favorable media coverage, technological breakthroughs, positive investor expectations, or benefits from the regulatory environment. Supply chain efficiency and maintaining a competitive edge could also be factors. On the other hand, possible reasons for the decrease in Tesla, Inc. (TSLA) stock might be disappointing earnings, negative industry trends, adverse media coverage or investor sentiment, macroeconomic factors, setbacks in technology, regulatory challenges, supply chain disruptions, or increased competition. To understand the specific causes behind NVDA's and TSLA's stock performance, one should conduct thorough research, utilizing credible sources such as the company\u2019s financial statements, official press releases, SEC filings, market analyst reports, and established news articles.\n\n********************************************************************************\nUser (to Writing_manager):\n\nDevelop an engaging blog post using any information provided.\nContext: \nThe script has executed successfully and provided the following results:\n\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\n- NVDA has experienced a percentage increase of 28.14% over the past month.\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\n\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\n\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\n\n\nPossible reasons for NVIDIA Corporation (NVDA) stock's performance increase could include strong financial results, positive developments in the semiconductor industry, favorable media coverage, technological breakthroughs, positive investor expectations, or benefits from the regulatory environment. Supply chain efficiency and maintaining a competitive edge could also be factors. On the other hand, possible reasons for the decrease in Tesla, Inc. (TSLA) stock might be disappointing earnings, negative industry trends, adverse media coverage or investor sentiment, macroeconomic factors, setbacks in technology, regulatory challenges, supply chain disruptions, or increased competition. To understand the specific causes behind NVDA's and TSLA's stock performance, one should conduct thorough research, utilizing credible sources such as the company\u2019s financial statements, official press releases, SEC filings, market analyst reports, and established news articles.\n\n--------------------------------------------------------------------------------\nWriter (to Writing_manager):\n\n**Title: Of Semiconductors and Electric Dreams: The Stocks Telling Silicon Valley's Story**\n\nIn the heart of Silicon Valley, two titans of industry have been playing a dramatic game of thrones on the stock market stage. NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA), each a revolutionary force in its respective field, have shown divergent paths in their recent stock performances, painting an intriguing narrative of triumphs and tribulations in the tech world.\n\n**The Rise of NVIDIA: Harnessing the Power of the Chip**\n\nIn a remarkable surge, NVIDIA's stock has rocketed a dazzling 28.14% over the past month, with shares proudly standing at $722.48. This silicon-fueled ascent raises the question: what is behind NVIDIA's electrifying climb?\n\nAt the core of NVIDIA's success could be its latest financial scorecard, which might shimmer with the colors of prosperity, reflecting a company that has not only met but also exceeded analyst expectations. NVIDIA is perhaps reaping the rewards of a booming semiconductor industry where the thirst for cutting-edge processors and GPUs is unslaked.\n\nBut let's not overlook the magic of technological innovation and the allure it holds for investors. From AI to gaming and autonomous vehicles, NVIDIA's GPUs are pivotal, and recent breakthroughs could be dazzling the market, promising an era of growth as expansive as a virtual universe.\n\n**Tesla's Unexpected Skid: A Roadworthy Reminder**\n\nContrarily, Tesla has experienced a skid, with a downtrend of -14.45% in its stock price over the last month, falling to $188.13. The electric vehicle (EV) maverick, led by the ever-polarizing Elon Musk, seems to have hit a bump in the road, but what sparked this deceleration?\n\nThe story behind Tesla's descent may twine through various threads of narrative. Analysts might whisper of earnings that didn't quite electrify Wall Street or industry headwinds buffeting against the hull of Musk's green dream. Perhaps adverse media attention or a shift in investor sentiment has cast a shadow of doubt on Tesla's prospects.\n\nFurthermore, in a world gripped by macroeconomic concerns such as inflation or interest rate hikes, even companies like Tesla are not immune. Could regulatory challenges have thrown a wrench in the works? Or maybe competition is closing in, with other automakers charging full-speed into the EV race.\n\n**Unlocking the Secrets Behind the Stocks**\n\nTo truly grasp the forces at play behind the curtains, one must embark on a methodical quest for knowledge. Anecdotes and rumors must give way to the concrete insights of QA financial statements, the strategic declarations of official press releases, and the scrutinizing gaze of market analysts' reports.\n\nOne might sift through the sands of news articles for grains of truth, or pore over the intricate lines of SEC filings, seeking an understanding that transcends mere numbers on a ticker. It's within these documents that the stories of NVIDIA's ascent and Tesla's dip are penned, awaiting readers eager for market wisdom.\n\n**In Conclusion: A Tale of Two Stocks**\n\nAs we chart the trajectory of these Silicon Valley stalwarts, NVIDIA and Tesla offer us more than mere data points; they unfold a narrative of our time\u2014a tale of innovation, challenge, expectation, and the relentless pursuit of the future. For those who seek to partake in the market's drama, these stories serve as a vivid reminder: the ebbs and flows of stock prices are but reflections of our complex, ever-changing world, beholden to the relentless march of progress and the inexorable tide of sentiment.\n\nRemember, dear readers, the landscape of financial markets is as dynamic as the technologies they bet on. Today's victor may be tomorrow's underdog, and in the dance of digits that is the stock market, agility, and insight are our most trusted partners.\n\nAnd with that, as the sun sets on another bustling day of trade, we conclude yet another chapter in the saga of Silicon Valley's stocks.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"[ChatResult(chat_history=[{'content': 'What are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?', 'role': 'assistant'}, {'content': 'To get the current stock prices of NVDA (NVIDIA Corporation) and TSLA (Tesla, Inc.), along with their performance over the past month in terms of percentage change, we can use a Python library like `yfinance`. This library allows downloading of historical market data from Yahoo Finance.\\n\\nLet\\'s proceed in the following steps:\\n\\n1. I will provide you a Python script that utilizes the `yfinance` library to fetch the current stock prices and historical data for the past month for both NVDA and TSLA.\\n2. The script will then calculate the percentage change in the stock prices over the past month.\\n\\nPlease make sure that you have `yfinance` installed in your Python environment before running the script. You can install it using `pip install yfinance`.\\n\\nHere is the Python code to execute:\\n\\n```python\\n# filename: stock_info.py\\nimport yfinance as yf\\nfrom datetime import datetime, timedelta\\n\\n# Function to get current stock price\\ndef get_stock_price(stock_ticker):\\n    stock = yf.Ticker(stock_ticker)\\n    todays_data = stock.history(period=\\'1d\\')\\n    return todays_data[\\'Close\\'][0]\\n\\n# Function to calculate percentage change over the past month\\ndef get_percentage_change(stock_ticker):\\n    stock = yf.Ticker(stock_ticker)\\n    end_date = datetime.now()\\n    start_date = end_date - timedelta(days=30)\\n    historical_data = stock.history(start=start_date, end=end_date)\\n    price_end = historical_data[\\'Close\\'][-1]\\n    price_start = historical_data[\\'Close\\'][0]\\n    percent_change = ((price_end - price_start)/price_start) * 100\\n    return percent_change\\n\\n# Getting the current price and performance for NVDA and TSLA\\nnvda_price = get_stock_price(\\'NVDA\\')\\ntesla_price = get_stock_price(\\'TSLA\\')\\nnvda_change = get_percentage_change(\\'NVDA\\')\\ntesla_change = get_percentage_change(\\'TSLA\\')\\n\\n# Output the results\\nprint(f\"NVDA (NVIDIA Corporation) stock price: ${nvda_price:.2f}\")\\nprint(f\"TESLA (Tesla, Inc.) stock price: ${tesla_price:.2f}\")\\nprint(f\"NVDA percentage change over past month: {nvda_change:.2f}%\")\\nprint(f\"TESLA percentage change over past month: {tesla_change:.2f}%\")\\n```\\n\\nPlease run this script in your environment and share with me the output. I\\'ll then verify the information.', 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\nNVDA (NVIDIA Corporation) stock price: $722.48\\nTESLA (Tesla, Inc.) stock price: $188.13\\nNVDA percentage change over past month: 28.14%\\nTESLA percentage change over past month: -14.45%\\n', 'role': 'assistant'}, {'content': 'The script has executed successfully and provided the following results:\\n\\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\\n- NVDA has experienced a percentage increase of 28.14% over the past month.\\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\\n\\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\\n\\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\\n\\nTERMINATE', 'role': 'user'}], summary='The script has executed successfully and provided the following results:\\n\\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\\n- NVDA has experienced a percentage increase of 28.14% over the past month.\\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\\n\\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\\n\\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\\n\\n', cost=({'total_cost': 0.08859, 'gpt-4': {'cost': 0.08859, 'prompt_tokens': 1597, 'completion_tokens': 678, 'total_tokens': 2275}}, {'total_cost': 0}), human_input=[]),\n ChatResult(chat_history=[{'content': 'Investigate possible reasons of the stock performance.\\nContext: \\nThe script has executed successfully and provided the following results:\\n\\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\\n- NVDA has experienced a percentage increase of 28.14% over the past month.\\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\\n\\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\\n\\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\\n\\n', 'role': 'assistant'}], summary=\"Possible reasons for NVIDIA Corporation (NVDA) stock's performance increase could include strong financial results, positive developments in the semiconductor industry, favorable media coverage, technological breakthroughs, positive investor expectations, or benefits from the regulatory environment. Supply chain efficiency and maintaining a competitive edge could also be factors. On the other hand, possible reasons for the decrease in Tesla, Inc. (TSLA) stock might be disappointing earnings, negative industry trends, adverse media coverage or investor sentiment, macroeconomic factors, setbacks in technology, regulatory challenges, supply chain disruptions, or increased competition. To understand the specific causes behind NVDA's and TSLA's stock performance, one should conduct thorough research, utilizing credible sources such as the company\u2019s financial statements, official press releases, SEC filings, market analyst reports, and established news articles.\", cost=({'total_cost': 0.04563, 'gpt-4': {'cost': 0.04563, 'prompt_tokens': 1189, 'completion_tokens': 166, 'total_tokens': 1355}}, {'total_cost': 0.04563, 'gpt-4': {'cost': 0.04563, 'prompt_tokens': 1189, 'completion_tokens': 166, 'total_tokens': 1355}}), human_input=[]),\n ChatResult(chat_history=[{'content': \"Develop an engaging blog post using any information provided.\\nContext: \\nThe script has executed successfully and provided the following results:\\n\\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\\n- NVDA has experienced a percentage increase of 28.14% over the past month.\\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\\n\\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\\n\\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\\n\\n\\nPossible reasons for NVIDIA Corporation (NVDA) stock's performance increase could include strong financial results, positive developments in the semiconductor industry, favorable media coverage, technological breakthroughs, positive investor expectations, or benefits from the regulatory environment. Supply chain efficiency and maintaining a competitive edge could also be factors. On the other hand, possible reasons for the decrease in Tesla, Inc. (TSLA) stock might be disappointing earnings, negative industry trends, adverse media coverage or investor sentiment, macroeconomic factors, setbacks in technology, regulatory challenges, supply chain disruptions, or increased competition. To understand the specific causes behind NVDA's and TSLA's stock performance, one should conduct thorough research, utilizing credible sources such as the company\u2019s financial statements, official press releases, SEC filings, market analyst reports, and established news articles.\", 'role': 'assistant'}], summary=\"Develop an engaging blog post using any information provided.\\nContext: \\nThe script has executed successfully and provided the following results:\\n\\n- The current stock price for NVIDIA Corporation (NVDA) is $722.48.\\n- The current stock price for Tesla, Inc. (TSLA) is $188.13.\\n- NVDA has experienced a percentage increase of 28.14% over the past month.\\n- TSLA has experienced a percentage decrease of -14.45% over the past month.\\n\\nThese results indicate that over the past month, NVIDIA\u2019s stock has seen a significant increase in value, whereas Tesla\u2019s stock has decreased in value. Keep in mind that stock prices and their performance are subject to rapid change and can vary within minutes.\\n\\nIf you require any further assistance, please let me know. Otherwise, that concludes our task.\\n\\n\\nPossible reasons for NVIDIA Corporation (NVDA) stock's performance increase could include strong financial results, positive developments in the semiconductor industry, favorable media coverage, technological breakthroughs, positive investor expectations, or benefits from the regulatory environment. Supply chain efficiency and maintaining a competitive edge could also be factors. On the other hand, possible reasons for the decrease in Tesla, Inc. (TSLA) stock might be disappointing earnings, negative industry trends, adverse media coverage or investor sentiment, macroeconomic factors, setbacks in technology, regulatory challenges, supply chain disruptions, or increased competition. To understand the specific causes behind NVDA's and TSLA's stock performance, one should conduct thorough research, utilizing credible sources such as the company\u2019s financial statements, official press releases, SEC filings, market analyst reports, and established news articles.\", cost=({'total_cost': 0.016829999999999998, 'gpt-4': {'cost': 0.016829999999999998, 'prompt_tokens': 559, 'completion_tokens': 1, 'total_tokens': 560}}, {'total_cost': 0.016829999999999998, 'gpt-4': {'cost': 0.016829999999999998, 'prompt_tokens': 559, 'completion_tokens': 1, 'total_tokens': 560}}), human_input=[])]\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5360:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>d,toc:()=>l});var a=t(5893),o=t(1151);const i={tags:["orchestration"],description:"Explore the demonstration of the SocietyOfMindAgent in the AutoGen library, which runs a group chat as an internal monologue, but appears to the external world as a single agent, offering a structured way to manage complex interactions among multiple agents and handle issues such as extracting responses from complex dialogues and dealing with context window constraints.\n",source_notebook:"/notebook/agentchat_society_of_mind.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_society_of_mind.ipynb",title:"SocietyOfMindAgent"},s="SocietyOfMindAgent",r={id:"notebooks/agentchat_society_of_mind",title:"SocietyOfMindAgent",description:"Explore the demonstration of the SocietyOfMindAgent in the AutoGen library, which runs a group chat as an internal monologue, but appears to the external world as a single agent, offering a structured way to manage complex interactions among multiple agents and handle issues such as extracting responses from complex dialogues and dealing with context window constraints.\n",source:"@site/docs/notebooks/agentchat_society_of_mind.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_society_of_mind",permalink:"/autogen/docs/notebooks/agentchat_society_of_mind",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_society_of_mind.ipynb",tags:[{label:"orchestration",permalink:"/autogen/docs/tags/orchestration"}],version:"current",frontMatter:{tags:["orchestration"],description:"Explore the demonstration of the SocietyOfMindAgent in the AutoGen library, which runs a group chat as an internal monologue, but appears to the external world as a single agent, offering a structured way to manage complex interactions among multiple agents and handle issues such as extracting responses from complex dialogues and dealing with context window constraints.\n",source_notebook:"/notebook/agentchat_society_of_mind.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_society_of_mind.ipynb",title:"SocietyOfMindAgent"},sidebar:"notebooksSidebar",previous:{title:"Solving Multiple Tasks in a Sequence of Chats",permalink:"/autogen/docs/notebooks/agentchat_multi_task_chats"},next:{title:"Solving Multiple Tasks in a Sequence of Chats",permalink:"/autogen/docs/notebooks/agentchats_sequential_chats"}},c={},l=[{value:"Example Group Chat with Two Agents",id:"example-group-chat-with-two-agents",level:3},{value:"Construct the Inner-Monologue Agents",id:"construct-the-inner-monologue-agents",level:4},{value:"Construct and Run the SocietyOfMind Agent",id:"construct-and-run-the-societyofmind-agent",level:4},{value:"Remarks",id:"remarks",level:4}],d=['\x3c!--\ntags: ["orchestration"]\ndescription: |\n    Explore the demonstration of the SocietyOfMindAgent in the AutoGen library, which runs a group chat as an internal monologue, but appears to the external world as a single agent, offering a structured way to manage complex interactions among multiple agents and handle issues such as extracting responses from complex dialogues and dealing with context window constraints.\n--\x3e'];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[0]}}),"\n",(0,a.jsx)(n.h1,{id:"societyofmindagent",children:"SocietyOfMindAgent"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_society_of_mind.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_society_of_mind.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsx)(n.p,{children:"This notebook demonstrates the SocietyOfMindAgent, which runs a group\nchat as an internal monologue, but appears to the external world as a\nsingle agent. This confers three distinct advantages:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"It provides a clean way of producing a hierarchy of agents, hiding\ncomplexity as inner monologues."}),"\n",(0,a.jsx)(n.li,{children:"It provides a consistent way of extracting an answer from a lengthy\ngroup chat (normally, it is not clear which message is the final\nresponse, and the response itself may not always be formatted in a\nway that makes sense when extracted as a standalone message)."}),"\n",(0,a.jsx)(n.li,{children:"It provides a way of recovering when agents exceed their context\nwindow constraints (the inner monologue is protected by try-catch\nblocks)"}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsxs)(n.p,{children:["Install ",(0,a.jsx)(n.code,{children:"pyautogen"}),":"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import autogen  # noqa: E402\n\nllm_config = {\n    "timeout": 600,\n    "cache_seed": 44,  # change the seed for different trials\n    "config_list": autogen.config_list_from_json(\n        "OAI_CONFIG_LIST",\n        filter_dict={"model": ["gpt-4", "gpt-4-0613", "gpt-4-32k", "gpt-4-32k-0613", "gpt-4-1106-preview"]},\n    ),\n    "temperature": 0,\n}\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about configuring LLMs for agents ",(0,a.jsx)(n.a,{href:"/docs/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"example-group-chat-with-two-agents",children:"Example Group Chat with Two Agents"}),"\n",(0,a.jsxs)(n.p,{children:["In this example, we will use an AssistantAgent and a UserProxy agent\n(configured for code execution) to work together to solve a problem.\nExecuting code requires ",(0,a.jsx)(n.em,{children:"at least"})," two conversation turns (one to write\nthe code, and one to execute the code). If the code fails, or needs\nfurther refinement, then additional turns may also be needed. When will\nthen wrap these agents in a SocietyOfMindAgent, hiding the internal\ndiscussion from other agents (though will still appear in the console),\nand ensuring that the response is suitable as a standalone message."]}),"\n",(0,a.jsx)(n.h4,{id:"construct-the-inner-monologue-agents",children:"Construct the Inner-Monologue Agents"}),"\n",(0,a.jsx)(n.p,{children:"We begin by constructing the inner-monologue agents. These are the\nagents that do that real work."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'assistant = autogen.AssistantAgent(\n    "inner-assistant",\n    llm_config=llm_config,\n    is_termination_msg=lambda x: x.get("content", "").find("TERMINATE") >= 0,\n)\n\ncode_interpreter = autogen.UserProxyAgent(\n    "inner-code-interpreter",\n    human_input_mode="NEVER",\n    code_execution_config={\n        "work_dir": "coding",\n        "use_docker": False,\n    },\n    default_auto_reply="",\n    is_termination_msg=lambda x: x.get("content", "").find("TERMINATE") >= 0,\n)\n\ngroupchat = autogen.GroupChat(\n    agents=[assistant, code_interpreter],\n    messages=[],\n    speaker_selection_method="round_robin",  # With two agents, this is equivalent to a 1:1 conversation.\n    allow_repeat_speaker=False,\n    max_round=8,\n)\n\nmanager = autogen.GroupChatManager(\n    groupchat=groupchat,\n    is_termination_msg=lambda x: x.get("content", "").find("TERMINATE") >= 0,\n    llm_config=llm_config,\n)\n'})}),"\n",(0,a.jsx)(n.h4,{id:"construct-and-run-the-societyofmind-agent",children:"Construct and Run the SocietyOfMind Agent"}),"\n",(0,a.jsx)(n.p,{children:"We now wrap the inner group-chat with the SocietyOfMind Agent, and\ncreate a UserProxy to talk to it."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from autogen.agentchat.contrib.society_of_mind_agent import SocietyOfMindAgent  # noqa: E402\n\ntask = "On which days in 2024 was Microsoft Stock higher than $370?"\n\nsociety_of_mind_agent = SocietyOfMindAgent(\n    "society_of_mind",\n    chat_manager=manager,\n    llm_config=llm_config,\n)\n\nuser_proxy = autogen.UserProxyAgent(\n    "user_proxy",\n    human_input_mode="NEVER",\n    code_execution_config=False,\n    default_auto_reply="",\n    is_termination_msg=lambda x: True,\n)\n\nuser_proxy.initiate_chat(society_of_mind_agent, message=task)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'user_proxy (to society_of_mind):\n\nOn which days in 2024 was Microsoft Stock higher than $370?\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nsociety_of_mind (to chat_manager):\n\nOn which days in 2024 was Microsoft Stock higher than $370?\n\n--------------------------------------------------------------------------------\ninner-assistant (to chat_manager):\n\nTo find out on which days in 2024 Microsoft stock (MSFT) was higher than $370, we would typically need to access historical stock price data. This data can be obtained from financial data providers or APIs that offer stock market data.\n\nOne common way to access such data is by using the `yfinance` library in Python, which allows us to download historical stock prices from Yahoo Finance. However, since I cannot directly access the internet or external APIs, I will provide you with a Python script that you can run on your machine to fetch the data and determine on which days MSFT was higher than $370 in 2024.\n\nPlease install the `yfinance` library if you haven\'t already by running `pip install yfinance` in your terminal, and then run the following Python script:\n\n```python\n# filename: msft_stock_analysis.py\nimport yfinance as yf\nfrom datetime import datetime\n\n# Define the ticker symbol and the date range\nticker_symbol = "MSFT"\nstart_date = "2024-01-01"\nend_date = "2024-12-31"\n\n# Download the historical stock prices\nmsft_data = yf.download(ticker_symbol, start=start_date, end=end_date)\n\n# Filter the days where the stock price was higher than $370\ndays_higher_than_370 = msft_data[msft_data[\'Close\'] > 370]\n\n# Print the dates\nprint("Dates in 2024 when MSFT stock was higher than $370:")\nfor date in days_higher_than_370.index:\n    print(date.strftime(\'%Y-%m-%d\'))\n```\n\nThis script will download the historical data for Microsoft stock for the year 2024 and print out the dates when the closing price was higher than $370. Please run this script and provide me with the output.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\ninner-code-interpreter (to chat_manager):\n\nexitcode: 1 (execution failed)\nCode output: \nTraceback (most recent call last):\n  File "msft_stock_analysis.py", line 2, in <module>\n    import yfinance as yf\nModuleNotFoundError: No module named \'yfinance\'\n\n\n--------------------------------------------------------------------------------\ninner-assistant (to chat_manager):\n\nThe error indicates that the `yfinance` module is not installed on your system. To resolve this, you need to install the `yfinance` library. Please run the following command in your terminal to install it:\n\n```sh\npip install yfinance\n```\n\nAfter you have installed `yfinance`, please try running the provided Python script again. If you encounter any further issues, please let me know.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is sh)...\ninner-code-interpreter (to chat_manager):\n\nexitcode: 0 (execution succeeded)\nCode output: \nCollecting yfinance\n  Using cached yfinance-0.2.36-py2.py3-none-any.whl (72 kB)\nRequirement already satisfied: lxml>=4.9.1 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from yfinance) (5.1.0)\nRequirement already satisfied: appdirs>=1.4.4 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from yfinance) (1.4.4)\nRequirement already satisfied: pytz>=2022.5 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from yfinance) (2023.3.post1)\nRequirement already satisfied: pandas>=1.3.0 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from yfinance) (2.2.0)\nRequirement already satisfied: peewee>=3.16.2 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from yfinance) (3.17.0)\nRequirement already satisfied: requests>=2.31 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from yfinance) (2.31.0)\nRequirement already satisfied: beautifulsoup4>=4.11.1 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from yfinance) (4.12.3)\nRequirement already satisfied: numpy>=1.16.5 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from yfinance) (1.26.3)\nRequirement already satisfied: html5lib>=1.1 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from yfinance) (1.1)\nRequirement already satisfied: frozendict>=2.3.4 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from yfinance) (2.4.0)\nRequirement already satisfied: multitasking>=0.0.7 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from yfinance) (0.0.11)\nRequirement already satisfied: soupsieve>1.2 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\nRequirement already satisfied: six>=1.9 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\nRequirement already satisfied: webencodings in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2.8.2)\nRequirement already satisfied: tzdata>=2022.7 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2023.4)\nRequirement already satisfied: certifi>=2017.4.17 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from requests>=2.31->yfinance) (2023.11.17)\nRequirement already satisfied: charset-normalizer<4,>=2 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /home/afourney/repos/autogen/notebook/.venv/lib/python3.10/site-packages (from requests>=2.31->yfinance) (2.1.0)\nInstalling collected packages: yfinance\nSuccessfully installed yfinance-0.2.36\n\n\n--------------------------------------------------------------------------------\ninner-assistant (to chat_manager):\n\nIt seems that the `yfinance` library has been successfully installed. Now that the library is available, please run the previously provided Python script again to fetch the historical stock prices for Microsoft and determine on which days the stock was higher than $370 in 2024.\n\nHere is the script again for your convenience:\n\n```python\n# filename: msft_stock_analysis.py\nimport yfinance as yf\nfrom datetime import datetime\n\n# Define the ticker symbol and the date range\nticker_symbol = "MSFT"\nstart_date = "2024-01-01"\nend_date = "2024-12-31"\n\n# Download the historical stock prices\nmsft_data = yf.download(ticker_symbol, start=start_date, end=end_date)\n\n# Filter the days where the stock price was higher than $370\ndays_higher_than_370 = msft_data[msft_data[\'Close\'] > 370]\n\n# Print the dates\nprint("Dates in 2024 when MSFT stock was higher than $370:")\nfor date in days_higher_than_370.index:\n    print(date.strftime(\'%Y-%m-%d\'))\n```\n\nPlease execute this script and provide me with the output.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\ninner-code-interpreter (to chat_manager):\n\nexitcode: 0 (execution succeeded)\nCode output: \nDates in 2024 when MSFT stock was higher than $370:\n2024-01-02\n2024-01-03\n2024-01-08\n2024-01-09\n2024-01-10\n2024-01-11\n2024-01-12\n2024-01-16\n2024-01-17\n2024-01-18\n2024-01-19\n\n\n--------------------------------------------------------------------------------\ninner-assistant (to chat_manager):\n\nThe output indicates that Microsoft stock (MSFT) was higher than $370 on the following days in 2024:\n\n- January 2, 2024\n- January 3, 2024\n- January 8, 2024\n- January 9, 2024\n- January 10, 2024\n- January 11, 2024\n- January 12, 2024\n- January 16, 2024\n- January 17, 2024\n- January 18, 2024\n- January 19, 2024\n\nPlease note that this list includes only the dates provided in the output and may not be exhaustive for the entire year of 2024. The script would have listed more dates if the stock price was higher than $370 on additional days beyond those listed.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\nsociety_of_mind (to user_proxy):\n\nMicrosoft stock (MSFT) was higher than $370 on the following days in 2024:\n\n- January 2, 2024\n- January 3, 2024\n- January 8, 2024\n- January 9, 2024\n- January 10, 2024\n- January 11, 2024\n- January 12, 2024\n- January 16, 2024\n- January 17, 2024\n- January 18, 2024\n- January 19, 2024\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(n.h4,{id:"remarks",children:"Remarks"}),"\n",(0,a.jsx)(n.p,{children:"There are a few things to notice about this output: - First, the\nuser_proxy sent only one message to the society_of_mind agent, and\nreceived only one message in response. As far as it is concerned, the\nsociety_of_mind agent is the only agent in the chat. - Second, the final\nresponse is formatted in a way that is standalone. Unlike the prior\nresponse, it makes no reference of a previous script or execution, and\nit lacks the TERMINATE keyword that ended the inner monologue."})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},4095:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>d,toc:()=>l});var a=t(5893),o=t(1151);const i={tags:["sequential chats"],description:"Use AutoGen to solve a set of tasks with a sequence of chats.\n",source_notebook:"/notebook/agentchats_sequential_chats.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchats_sequential_chats.ipynb",title:"Solving Multiple Tasks in a Sequence of Chats"},s="Solving Multiple Tasks in a Sequence of Chats",r={id:"notebooks/agentchats_sequential_chats",title:"Solving Multiple Tasks in a Sequence of Chats",description:"Use AutoGen to solve a set of tasks with a sequence of chats.\n",source:"@site/docs/notebooks/agentchats_sequential_chats.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchats_sequential_chats",permalink:"/autogen/docs/notebooks/agentchats_sequential_chats",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchats_sequential_chats.ipynb",tags:[{label:"sequential chats",permalink:"/autogen/docs/tags/sequential-chats"}],version:"current",frontMatter:{tags:["sequential chats"],description:"Use AutoGen to solve a set of tasks with a sequence of chats.\n",source_notebook:"/notebook/agentchats_sequential_chats.ipynb",custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchats_sequential_chats.ipynb",title:"Solving Multiple Tasks in a Sequence of Chats"},sidebar:"notebooksSidebar",previous:{title:"SocietyOfMindAgent",permalink:"/autogen/docs/notebooks/agentchat_society_of_mind"}},c={},l=[{value:"Example Tasks",id:"example-tasks",level:3},{value:"Solve tasks with a series of chats",id:"solve-tasks-with-a-series-of-chats",level:3},{value:"Check chat results",id:"check-chat-results",level:4}],d=['\x3c!--\ntags: ["sequential chats"]\ndescription: |\n    Use AutoGen to solve a set of tasks with a sequence of chats.\n--\x3e','\x3c!--\ntags: ["sequential chat"]\ndescription: |\n    Use AutoGen.initiate_chats to solve a set of tasks with a sequence of chats.\n--\x3e'];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[0]}}),"\n",(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:d[1]}}),"\n",(0,a.jsx)(n.h1,{id:"solving-multiple-tasks-in-a-sequence-of-chats",children:"Solving Multiple Tasks in a Sequence of Chats"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchats_sequential_chats.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchats_sequential_chats.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["This notebook showcases how to use the new chat interface\n",(0,a.jsx)(n.code,{children:"autogen.initiate_chats"})," to solve a set of tasks with a sequence of\nchats."]}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsxs)(n.p,{children:["Install ",(0,a.jsx)(n.code,{children:"pyautogen"}),":"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"../../docs/installation/",children:"installation\nguide"}),"."]})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import autogen\n\nconfig_list = autogen.config_list_from_json(env_or_file="OAI_CONFIG_LIST")\nllm_config = {"config_list": config_list}\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about the various ways to configure LLM endpoints\n",(0,a.jsx)(n.a,{href:"../../docs/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"example-tasks",children:"Example Tasks"}),"\n",(0,a.jsx)(n.p,{children:"Below are three example tasks, with each task being a string of text\ndescribing the request. The completion of later tasks requires or\nbenefits from the results of previous tasks."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'financial_tasks = [\n    """What are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?""",\n    """Investigate possible reasons of the stock performance leveraging market news.""",\n]\n\nwriting_tasks = ["""Develop an engaging blog post using any information provided."""]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"solve-tasks-with-a-series-of-chats",children:"Solve tasks with a series of chats"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"autogen.initiate_chats"})," interface can take a list of dictionaries\nas inputs. Each dictionary preserves the following fields: - ",(0,a.jsx)(n.code,{children:"sender"}),": a\nconversable agent as the sender; - ",(0,a.jsx)(n.code,{children:"recipient"}),": a conversable agent as\nthe recipient; - ",(0,a.jsx)(n.code,{children:"message"}),": is a string of text (typically a message\ncontaining the task); - ",(0,a.jsx)(n.code,{children:"summary_method"}),": A string specifying the method\nto get a summary from the chat. Currently supported choices include\n",(0,a.jsx)(n.code,{children:"last_msg"}),", which takes the last message from the chat history as the\nsummary, and ",(0,a.jsx)(n.code,{children:"reflection_with_llm"}),", which uses an LLM call to reflect on\nthe chat history and summarize a takeaway; - ",(0,a.jsx)(n.code,{children:"summary_prompt"}),": A string\nspecifying how to instruct an LLM-backed agent (either the recipient or\nthe sender in the chat) to reflect on the chat history and derive a\nsummary. If not otherwise specified, a default prompt will be used when\n",(0,a.jsx)(n.code,{children:"summary_method"})," is ",(0,a.jsx)(n.code,{children:"reflection_with_llm"}),". \u201cSummarize the takeaway from\nthe conversation. Do not add any introductory phrases. If the intended\nrequest is NOT properly addressed, please point it out.\u201d - ",(0,a.jsx)(n.code,{children:"carryover"}),":\nA string or a list of string to specify additional context to be used in\nthe chat. With ",(0,a.jsx)(n.code,{children:"initiate_chats"}),", summary from previous chats will be\nadded as carryover. They will be appended after the carryover provided\nby the user."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'financial_assistant = autogen.AssistantAgent(\n    name="Financial_assistant",\n    llm_config=llm_config,\n)\nresearch_assistant = autogen.AssistantAgent(\n    name="Researcher",\n    llm_config=llm_config,\n)\nwriter = autogen.AssistantAgent(\n    name="writer",\n    llm_config=llm_config,\n    system_message="""\n        You are a professional writer, known for\n        your insightful and engaging articles.\n        You transform complex concepts into compelling narratives.\n        Reply "TERMINATE" in the end when everything is done.\n        """,\n)\n\nuser_proxy_auto = autogen.UserProxyAgent(\n    name="User_Proxy_Auto",\n    human_input_mode="NEVER",\n    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "tasks",\n        "use_docker": False,\n    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n)\n\nuser_proxy = autogen.UserProxyAgent(\n    name="User_Proxy",\n    human_input_mode="ALWAYS",  # ask human for input at each step\n    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),\n    code_execution_config={\n        "last_n_messages": 1,\n        "work_dir": "tasks",\n        "use_docker": False,\n    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n)\n\n\nchat_results = autogen.initiate_chats(\n    [\n        {\n            "sender": user_proxy_auto,\n            "recipient": financial_assistant,\n            "message": financial_tasks[0],\n            "clear_history": True,\n            "silent": False,\n            "summary_method": "last_msg",\n        },\n        {\n            "sender": user_proxy_auto,\n            "recipient": research_assistant,\n            "message": financial_tasks[1],\n            "max_turns": 2,  # max number of turns for the conversation (added for demo purposes, generally not necessarily needed)\n            "summary_method": "reflection_with_llm",\n        },\n        {\n            "sender": user_proxy,\n            "recipient": writer,\n            "message": writing_tasks[0],\n            "carryover": "I want to include a figure or a table of data in the blogpost.",  # additional carryover to include to the conversation (added for demo purposes, generally not necessarily needed)\n        },\n    ]\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n********************************************************************************\nStart a new chat with the following message: \nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\nWith the following carryover: \n\n\n********************************************************************************\nUser_Proxy_Auto (to Financial_assistant):\n\nWhat are the current stock prices of NVDA and TESLA, and how is the performance over the past month in terms of percentage change?\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User_Proxy_Auto):\n\nTo get the current stock prices of NVDA (NVIDIA Corporation) and TSLA (Tesla, Inc.), along with their performance over the past month in terms of percentage change, we can use a Python library like `yfinance`. This library allows downloading of historical market data from Yahoo Finance.\n\nLet's proceed in the following steps:\n\n1. I will provide you a Python script that utilizes the `yfinance` library to fetch the current stock prices and historical data for the past month for both NVDA and TSLA.\n2. The script will then calculate the percentage change in the stock prices over the past month.\n\nPlease make sure that you have `yfinance` installed in your Python environment before running the script. You can install it using `pip install yfinance`.\n\nHere is the Python code to execute:\n\n```python\n# filename: stock_info.py\nimport yfinance as yf\nfrom datetime import datetime, timedelta\n\n# Function to get current stock price\ndef get_stock_price(stock_ticker):\n    stock = yf.Ticker(stock_ticker)\n    todays_data = stock.history(period='1d')\n    return todays_data['Close'][0]\n\n# Function to calculate percentage change over the past month\ndef get_percentage_change(stock_ticker):\n    stock = yf.Ticker(stock_ticker)\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=30)\n    historical_data = stock.history(start=start_date, end=end_date)\n    price_end = historical_data['Close'][-1]\n    price_start = historical_data['Close'][0]\n    percent_change = ((price_end - price_start)/price_start) * 100\n    return percent_change\n\n# Getting the current price and performance for NVDA and TSLA\nnvda_price = get_stock_price('NVDA')\ntesla_price = get_stock_price('TSLA')\nnvda_change = get_percentage_change('NVDA')\ntesla_change = get_percentage_change('TSLA')\n\n# Output the results\nprint(f\"NVDA (NVIDIA Corporation) stock price: ${nvda_price:.2f}\")\nprint(f\"TESLA (Tesla, Inc.) stock price: ${tesla_price:.2f}\")\nprint(f\"NVDA percentage change over past month: {nvda_change:.2f}%\")\nprint(f\"TESLA percentage change over past month: {tesla_change:.2f}%\")\n```\n\nPlease run this script in your environment and share with me the output. I'll then verify the information.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser_Proxy_Auto (to Financial_assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nNVDA (NVIDIA Corporation) stock price: $732.36\nTESLA (Tesla, Inc.) stock price: $200.46\nNVDA percentage change over past month: 30.65%\nTESLA percentage change over past month: -7.00%\n\n\n--------------------------------------------------------------------------------\nFinancial_assistant (to User_Proxy_Auto):\n\nGreat! According to the executed script, the current stock price for NVIDIA Corporation (NVDA) is $732.36, with a positive percentage change of 30.65% over the past month, indicating notable growth. Meanwhile, Tesla, Inc. (TSLA) has a current stock price of $200.46, but it has experienced a negative percentage change of -7.00% over the past month, indicating a decrease in its value.\n\nIt seems that NVIDIA has had a particularly strong performance over the past month, while Tesla has seen a decline in its stock price. Keep in mind that the stock market can be influenced by a wide array of factors, including but not limited to company performance, industry shifts, market trends, and global economic conditions.\n\nPlease ensure to verify these figures with real-time data or additional financial news sources to get the most up-to-date information, as the stock market is volatile and prices can change rapidly.\n\nIf you need any further assistance or have additional questions, feel free to ask. Otherwise, that concludes our task.\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n********************************************************************************\nStart a new chat with the following message: \nInvestigate possible reasons of the stock performance leveraging market news.\n\nWith the following carryover: \nGreat! According to the executed script, the current stock price for NVIDIA Corporation (NVDA) is $732.36, with a positive percentage change of 30.65% over the past month, indicating notable growth. Meanwhile, Tesla, Inc. (TSLA) has a current stock price of $200.46, but it has experienced a negative percentage change of -7.00% over the past month, indicating a decrease in its value.\n\nIt seems that NVIDIA has had a particularly strong performance over the past month, while Tesla has seen a decline in its stock price. Keep in mind that the stock market can be influenced by a wide array of factors, including but not limited to company performance, industry shifts, market trends, and global economic conditions.\n\nPlease ensure to verify these figures with real-time data or additional financial news sources to get the most up-to-date information, as the stock market is volatile and prices can change rapidly.\n\nIf you need any further assistance or have additional questions, feel free to ask. Otherwise, that concludes our task.\n\n\n********************************************************************************\nUser_Proxy_Auto (to Researcher):\n\nInvestigate possible reasons of the stock performance leveraging market news.\nContext: \nGreat! According to the executed script, the current stock price for NVIDIA Corporation (NVDA) is $732.36, with a positive percentage change of 30.65% over the past month, indicating notable growth. Meanwhile, Tesla, Inc. (TSLA) has a current stock price of $200.46, but it has experienced a negative percentage change of -7.00% over the past month, indicating a decrease in its value.\n\nIt seems that NVIDIA has had a particularly strong performance over the past month, while Tesla has seen a decline in its stock price. Keep in mind that the stock market can be influenced by a wide array of factors, including but not limited to company performance, industry shifts, market trends, and global economic conditions.\n\nPlease ensure to verify these figures with real-time data or additional financial news sources to get the most up-to-date information, as the stock market is volatile and prices can change rapidly.\n\nIf you need any further assistance or have additional questions, feel free to ask. Otherwise, that concludes our task.\n\n\n--------------------------------------------------------------------------------\nResearcher (to User_Proxy_Auto):\n\nTo investigate the possible reasons for the stock performance of NVIDIA (NVDA) and Tesla (TSLA), we can gather recent market news related to these companies. This may provide insights into any events or announcements that could have influenced investor sentiment and thus the stock price. \n\nI will now write a Python script to search for recent news articles for both NVDA and TSLA using a web scraping library. Please note that this script will return the latest publicly available news gathered from news websites that provide RSS feeds or have structured data appropriate for scraping. For more in-depth analysis, professional financial services or databases like Bloomberg Terminal would be more suitable, though these often require subscriptions. \n\nLet's proceed with the Python code to fetch recent news headlines for both companies:\n\n```python\n# filename: fetch_stock_news.py\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Define the URLs of the news sources you want to scrape\n# As an example, I'm using Google News RSS feed URLs for NVIDIA and Tesla.\n# You can change these URLs to any other news source that you prefer.\nnvidia_news_url = \"https://news.google.com/rss/search?q=NVIDIA+NVDA+when:7d&hl=en-US&gl=US&ceid=US:en\"\ntesla_news_url = \"https://news.google.com/rss/search?q=Tesla+TSLA+when:7d&hl=en-US&gl=US&ceid=US:en\"\n\ndef fetch_news(url):\n    # Send a request to the URL\n    response = requests.get(url)\n    \n    # Check if the request was successful\n    if response.status_code != 200:\n        raise Exception(f\"Request to {url} failed with status code {response.status_code}\")\n    \n    # Parse HTML content\n    soup = BeautifulSoup(response.content, features='xml')\n    articles = soup.find_all('item')\n\n    # Extract news titles\n    news_headlines = [article.title.text for article in articles]\n\n    return news_headlines\n\ndef main():\n    # Fetch news for NVIDIA\n    print(\"Recent NVIDIA (NVDA) News Headlines:\")\n    try:\n        nvidia_news = fetch_news(nvidia_news_url)\n        for idx, headline in enumerate(nvidia_news, 1):\n            print(f\"{idx}. {headline}\")\n    except Exception as e:\n        print(f\"An error occurred while fetching NVIDIA news: {e}\")\n\n    print(\"\\n\")  # Add a newline for better readability\n\n    # Fetch news for Tesla\n    print(\"Recent Tesla (TSLA) News Headlines:\")\n    try:\n        tesla_news = fetch_news(tesla_news_url)\n        for idx, headline in enumerate(tesla_news, 1):\n            print(f\"{idx}. {headline}\")\n    except Exception as e:\n        print(f\"An error occurred while fetching Tesla news: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nPlease save this script as `fetch_stock_news.py` and run it. After running the script, you will receive the latest news headlines for both NVIDIA and Tesla that might help explain their recent stock performance changes.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser_Proxy_Auto (to Researcher):\n\nexitcode: 0 (execution succeeded)\nCode output: \nRecent NVIDIA (NVDA) News Headlines:\n1. Piper Sandler Just Raised Its Nvidia (NVDA) Stock Price Target - InvestorPlace\n2. Nvidia Bucks Tech Weakness With Earnings Due. Is Nvidia A Buy? - Investor's Business Daily\n3. Nvidia (NVDA) Earnings Expected to Grow: What to Know Ahead of Next Week's Release - Yahoo Finance\n4. Nvidia Overtakes Google Parent Alphabet as Third-Largest US Company by Market Value - Investopedia\n5. Institutional Investors Load Up on Nvidia Stock (NASDAQ:NVDA) in Q4 - TipRanks.com - TipRanks\n6. Bridgewater increased Nvidia stake more than 450% in Q4 -filings - Reuters.com\n7. Susquehanna Just Raised Its Nvidia (NVDA) Stock Price Target - InvestorPlace\n8. Why the Market Dipped But Nvidia (NVDA) Gained Today - Yahoo Finance\n9. Nvidia Stock Braces For Q4 Earnings Report - Investor's Business Daily\n10. As earnings loom, Nvidia options traders brace for monster share move - Reuters.com\n11. In Nvidia We Trust: 3 Reasons to Remain Bullish on NVDA Stock - InvestorPlace\n12. Is NVIDIA Corporation's (NASDAQ:NVDA) Recent Stock Performance Tethered To Its Strong Fundamentals? - Yahoo Finance\n13. Mizuho Just Raised Its Price Target on Nvidia (NVDA) Stock - InvestorPlace\n14. Why Nvidia (NVDA) is a Top Stock for the Long-Term - Yahoo Finance\n15. Loop Capital Just Raised Its Price Target on Nvidia (NVDA) Stock to $1200 - InvestorPlace\n16. What To Watch: Nvidia Earnings - Yahoo Finance\n17. UBS Just Upped Its Nvidia (NVDA) Stock Price Target - InvestorPlace\n18. Nvidia's investments in these AI companies sent their stocks soaring - Yahoo Finance\n19. NVDA Stock Alert: Nvidia Is Now the No. 3 Most Valuable Company in the World - InvestorPlace\n20. The Bull Case for NVDA Stock: How Nvidia Could Be Worth $1600 by 2027 - InvestorPlace\n21. Go Home, Short Sellers! There's Nothing Holding Nvidia Stock Back. - InvestorPlace\n22. Nvidia Stock (NASDAQ:NVDA): Analysts Raise Price Targets, Ahead of Q4 Print - TipRanks.com - TipRanks\n23. Nvidia (NVDA) Stock Passes Alphabet (GOOG), Amazon Market Value - Bloomberg\n24. Nvidia's Stock Is Overbought. Is It Time to Sell? - TheStreet\n25. You Missed Out On Nvidia \u2014 7 Stocks Look Better Now, Analysts - Investor's Business Daily\n26. Exclusive: Nvidia pursues $30 billion custom chip opportunity with new unit - Reuters\n27. Nvidia hits major milestone as AI hype shifts eyes to earnings - TheStreet\n28. Nvidia Stock News: NVDA continues into sixth week of consecutive gains - FXStreet\n29. Nvidia (NVDA) Overtakes Amazon (AMZN) in Market Value Amid Rally - Bloomberg\n30. Here's How Much a $1,000 Investment in Nvidia Stock 10 Years Ago Would Be Worth Now - Yahoo Finance\n31. What You Need to Know Ahead of Nvidia's Earnings Report on Wednesday - Investopedia\n32. If You Like Nvidia, Then You Will Love These 2 Hot AI Stocks - The Motley Fool\n33. Loop Capital Starts NVIDIA (NVDA) at Buy, Street High $1,200 Target - StreetInsider.com\n34. Nvidia Stock: Buy Protection Before Earnings (NASDAQ:NVDA) - Seeking Alpha\n35. Nvidia Stock Overtakes Amazon and Google, but Overvaluation Concerns Linger - TheStreet\n36. Where Will Nvidia Stock Be in 10 Years? - The Motley Fool\n37. Will Nvidia Keep Going Up in 2024 as Stock Split Chatter Grows? - Nasdaq\n38. Is Nvidia Stock Still Undervalued Right Now? - Yahoo Finance\n39. Nvidia, Meta Drive These 10 Leaders. But They All Face This One Issue. - Investor's Business Daily\n40. Is NVIDIA Corporation's (NASDAQ:NVDA) Latest Stock Performance A Reflection Of Its Financial Health? - Simply Wall St\n41. Nvidia Is Betting Big on ARM Stock - InvestorPlace\n42. 'Wait Before Diving in,' Says Deutsche Bank About Nvidia Stock - TipRanks.com - TipRanks\n43. How Much $10000 Invested In Nvidia 10 Years Ago Is Worth Now - Investor's Business Daily\n44. 5 Stocks to Buy to Invest Like Nvidia - InvestorPlace\n45. Who the Heck Is SoundHound AI and Why Are Nvidia and SoftBank Investors in It? - RealMoney\n46. Nvidia & Arm: Chip space faces supply issues amid AI demand - Yahoo Finance\n47. The Next Nvidia? 3 Semiconductor Stocks That Investors Shouldn't Ignore - Markets Insider\n48. 1 Wall Street Analyst Boosts Nvidia Price Target by 47%: Here's Why They're Right - The Motley Fool\n49. Magnificent Seven Stocks To Buy And Watch: Tesla Dives On Earnings - Investor's Business Daily\n50. Why Nvidia (NVDA) is a Top Stock for the Long-Term - Zacks Investment Research\n51. Nvidia's maiden 13F filing sends AI-focused tech stock soaring - TheStreet\n52. Nvidia (NVDA) Is Now 3rd Largest in Market Cap: More Upside Left? - Zacks Investment Research\n53. Analysts unveil new stock price target for Nvidia ahead of earnings - TheStreet\n54. Nvidia CEO Jensen Huang Believes Meta Platforms Did One of the Greatest Things for the Artificial Intelligence (AI ... - Yahoo Finance\n55. Is Nvidia Stock Running Into Big Trouble? - Yahoo Finance\n56. Where Will Nvidia Stock Be in 1 Year? - Yahoo Finance\n57. Nvidia market cap threatens Alphabet after overtaking Amazon - Reuters\n58. Monday's top stocks to buy like NVDA - CNBC\n59. Is Palantir (PLTR) the Next Nvidia (NVDA)? - Cabot Wealth Network\n60. Nvidia Is Now Worth More Than Berkshire Hathaway, Tesla, and AMD Combined. But Will It Last? - Yahoo Finance\n61. Nvidia Discloses Stakes In Arm, SoundHound AI, Nano-X - Investor's Business Daily\n62. Wall Street Legend Stanley Druckenmiller: \"Nvidia Is in Nosebleed Territory\" - Yahoo Finance\n63. NVIDIA Corp. stock falls Thursday, underperforms market - MarketWatch\n64. Nvidia Has Invested in Arm Holdings and a Few Other Artificial Intelligence (AI) Stocks -- Should Investors Follow? - The Motley Fool\n65. As Nvidia Stock Hits $720, Analysts See a Downside of 5%. Is the Stock Overvalued? - TheStreet\n66. Nvidia Stock: UBS Note Should Raise Alarms (NASDAQ:NVDA) - Seeking Alpha\n67. Paul Tudor Jones' hedge fund just made a big bet on Nvidia stock - TheStreet\n68. Going Into Earnings, Is Nvidia Stock a Buy, a Sell, or Fairly Valued? - Morningstar\n69. In Nvidia We Trust: 3 Reasons to Remain Bullish on NVDA Stock - TradingView\n70. Stock-Split Watch: Is Nvidia Next? - The Motley Fool\n71. Is Nvidia Building A Little Galaxy To Take On Tesla In Next AI Push? - Investor's Business Daily\n72. Can Nvidia Hit $1000 in 2024? The Crazy Answer. - InvestorPlace\n73. Is Nvidia Stock Still Undervalued Right Now? - The Motley Fool\n74. Nvidia (NVDA) $560 Billion Rally Has Analysts Racing to Boost Targets - Bloomberg\n75. Nvidia (NVDA) reportedly to invest $30 billion into custom AI chip manufacturing - Shacknews\n76. Loop Capital initiates Nvidia coverage with $1,200 price target - Yahoo Finance\n77. Beyond the Ticker: Nvidia - Yahoo Finance\n78. 3 Reasons Why Growth Investors Shouldn't Overlook Nvidia (NVDA) - Zacks Investment Research\n79. Amazon, Alphabet, and Nvidia attract new interest from Wall Street's biggest investors - Yahoo Finance\n80. Think Nvidia's Stock Price Is Crazy? Maybe Not, According to 1 Wall Street Analyst - The Motley Fool\n81. Nvidia CEO Huang says countries must build sovereign AI infrastructure - Reuters\n82. Nvidia (Nvda) Stock Forecast: Is Nvidia Overvalued? - Investment U\n83. Sell Or Hold Nvidia, Arm, Supermicro Stocks? - Investor's Business Daily\n84. Curious about Nvidia (NVDA) Q4 Performance? Explore Wall Street Estimates for Key Metrics - Zacks Investment Research\n85. To Sell or Not to Sell: How to Handle the Inevitable Nvidia Downturn - InvestorPlace\n86. 3 Reasons Nvidia's Stock Is Still a Must-Buy AI Powerhouse in 2024 - InvestorPlace\n87. Beamr Imaging (BMR) Stock Soars 800% on Nvidia Partnership - InvestorPlace\n88. Nano-X stake received by Nvidia as part of 2021 deal, says Cantor Fitzgerald - TipRanks.com - TipRanks\n89. NVIDIA Hits New High, Price Targets Raised - TradingView\n90. Nano-X Imaging (NNOX) Stock Soars 50% on Nvidia Investment - InvestorPlace\n91. NVIDIA Corporation (NVDA) Hit a 52 Week High, Can the Run Continue? - Yahoo Finance UK\n92. Missed Out on Nvidia? My Best AI Stock to Buy and Hold - The Motley Fool\n93. Can This Under-the-Radar Tech Stock Disrupt Nvidia? - The Motley Fool\n94. Wall Street's Next Stock-Split Stocks Are Liable to Be Familiar Names - The Motley Fool\n95. Nvidia or Intel: Goldman Sachs Chooses the Best Chip Stock to Buy - TipRanks.com - TipRanks\n96. Nvidia Earnings Are Coming. How to Protect Against a Loss. - Barron's\n97. Dear NVDA Stock Fans, Mark Your Calendars for Feb. 21 - InvestorPlace\n98. Nvidia, Fed's Goolsbee, earnings themes: Top Stories - Yahoo Finance\n99. Nasty Surprise Awaits Those Buying Nvidia - Money Morning\n100. Nvidia Stock: Strong Market Growth Enables It For 15% Annual Returns (NASDAQ:NVDA) - Seeking Alpha\n\n\nRecent Tesla (TSLA) News Headlines:\n1. Tesla (TSLA) Stock: Another Reason to Buy The Pullback - Nasdaq\n2. Tesla (TSLA) Stock Value and Elon Musk's Magnificent Seven AI Rivals - Bloomberg\n3. Tesla Stock Is Up Again. What's the Latest News. - Barron's\n4. Big Tesla investors are bearish on the stock over the next 6-12 months, Morgan Stanley's Jonas says - Yahoo Finance\n5. How to Buy Tesla Stock (TSLA) - NerdWallet\n6. Altimeter Capital Is Betting Big on Tesla (TSLA) Stock - InvestorPlace\n7. Analyst weighs in on Tesla stock after short sellers pounce - TheStreet\n8. Magnificent Seven Stocks To Buy And Watch: Tesla Dives On Earnings - Investor's Business Daily\n9. Should You Buy Tesla While It's Below $200? - The Motley Fool\n10. Tesla Was Once About Climate Change, Driverless Cars, AI. Now What? - The Wall Street Journal\n11. Tesla (TSLA) Courts Chinese EV Suppliers to Mexico, Stoking Fears in DC - Bloomberg\n12. Tesla: Is Elon Musk actually bad for EV maker's business? - Yahoo Finance\n13. Tesla Stock Is Falling Again. The CPI Inflation Report Can Take Some Blame. - Barron's\n14. Tesla unveils latest move to offset demand slump as stock extends slide - TheStreet\n15. Tesla, BYD Struggle Amid Weak Earnings, Tough EV Climate - Investor's Business Daily\n16. TSLA Stock Warning: Why Tesla Is at the Start of a Long-Term Decline - InvestorPlace\n17. Gradual EV adoption in 2024 favors Tesla, GM: Analyst - Yahoo Finance\n18. Tesla Stock Is Down 26% in 2024. This Number Explains Why. - Barron's\n19. The Truth About Tesla Stock: Should You Buy Now? - Yahoo Finance\n20. Cathie Wood Just Keeps Buying More of This Magnificent AI Stock - Yahoo Finance\n21. 'Barely Any Attempt' From Tesla's Institutional Investors To Argue For Near-Term Bull Case, Says Analyst As ... - Markets Insider\n22. Tesla investors express bearishness on stock: Morgan Stanley - Yahoo Finance\n23. Here's Why Cathie Wood Can't Stop Buying This Artificial Intelligence (AI) Stock - The Motley Fool\n24. Tesla (NASDAQ:TSLA) Slashes Model Y Prices in the U.S. - TipRanks.com - TipRanks\n25. 'Stay Long and Strong,' Says Daniel Ives About Tesla Stock - TipRanks.com - TipRanks\n26. Tesla Eyes Indian Market As Government Nears Policy Shift On Import Duties - Yahoo Finance\n27. Musk's Neuralink switches location of incorporation to Nevada - Reuters\n28. Musk's Tesla to Texas threat: What investors need to know - Yahoo Finance\n29. Tesla, Rivian shares slide amid worries of broad EV slowdown - Yahoo Finance\n30. Is Tesla a Millionaire Maker? - The Motley Fool\n31. Elon Musk Wanted To Sell Tesla To Apple, But CEO Tim Cook Does Not Recall Ever Speaking To Him - Yahoo Finance\n32. Elon Musk discloses up to 20.5% stake in Tesla (NASDAQ:TSLA) - Seeking Alpha\n33. Tesla Shareholders Also Are Frustrated With Delaware\u2019s CEO Pay Decision - Barron's\n34. Elon Musk discloses 20.5% stake in Tesla - Seeking Alpha\n35. Tesla Stock Charts Further Gains. Here's the Latest News. - Barron's\n36. Tesla Stock Could Get Booted From the Mag-7. Buy It Anyway. Here's Why. - InvestorPlace\n37. Tesla Inc. stock falls Monday, underperforms market - MarketWatch\n38. Elon Musk Boosts Stake in Tesla to 20.5% - TipRanks.com - TipRanks\n39. Tesla: Buy The Dip? Here's What You Need To Know (NASDAQ:TSLA) - Seeking Alpha\n40. Tesla Competitors: 7 Rival EV Stocks to Buy | Investing | U.S. News - U.S News & World Report Money\n41. 11 Best Small Cap Electric Vehicle Stocks to Invest In - Yahoo Finance\n42. The Worst-Performing S&P 500 Stock in 2024: Will It Be Tesla? - InvestorPlace\n43. Tesla board silent as investors await next steps after court revokes Elon Musk's $56 billion pay package - CNBC\n44. Why These 3 EV Stocks Could Be Headed for Further Losses - InvestorPlace\n45. Tesla electric vehicle rival files bankruptcy, begins liquidation - TheStreet\n46. AI year-end prediction for Tesla share price - Finbold - Finance in Bold\n47. Elon Musk's Tesla Ownership Hits 20.5%, Over $120 Billion - Markets Insider\n48. Tesla Inc. stock rises Wednesday, outperforms market - MarketWatch\n49. TSLA, RIVN: What Pulled These EV Stocks Lower Yesterday? - TipRanks.com - TipRanks\n50. Tesla Price Yo-Yo Continues With Model Y Hikes In Europe - Investor's Business Daily\n51. Don't Rely Solely on Auto Business for Tesla Stock, Advises Piper Sandler - TipRanks.com - TipRanks\n52. Should You Buy Tesla Inc (TSLA) Stock Friday Morning? - InvestorsObserver\n53. Tesla and Elon Musk Show Why Governance Doesn't Matter\u2014Until It Does - The Wall Street Journal\n54. Tesla Cuts Model Y Prices For A Limited Time \u2014 For Now - Investor's Business Daily\n55. Morgan Stanley Weighs in on Tesla Stock Following Investor Meeting - TipRanks.com - TipRanks\n56. Tesla listed as \u2018most crowded\u2019 short position among U.S. securities: Hazeltree - TESLARATI\n57. Forget Tesla: Buy These 2 Canadian Stocks to Profit From EV Growth - Yahoo Canada Finance\n58. The Truth About Tesla Stock: Should You Buy Now? - The Motley Fool\n59. Analyst weighs in on Tesla stock as short sellers pounce - jacksonprogress-argus\n60. This Won't Help Elon Musk or Tesla's Stock Price - Money Morning\n61. Tesla Stock is Dead, Long Live Tesla? - Schaeffers Research\n62. Elon Musk moves SpaceX incorporation state to Texas - Yahoo Finance\n63. Elon Musk doubles down on his promise to ditch Delaware. SpaceX is headed for Texas incorporation - CNN\n64. Tesla offers $1K February discount on select Model Y's, seeks \"continuous production for efficiency\" By Investing.com - Investing.com\n65. Tesla Inc (TSLA) Price Target Set: Are Analysts Too Bullish On This Electric Vehicle Stock? - InvestorsObserver\n66. Tesla's Decline: Unveiling Growing Downside Risk (Technical Analysis) (TSLA) - Seeking Alpha\n67. The 'News' That Elon Musk Has Acquired 20.5% Of Tesla Is A 'Nothingburger' (NASDAQ:TSLA) - Seeking Alpha\n68. [FREE ACCESS] HedgAI Signals: 2/13/2024 (Long S&P, TSLA, NFLX) - Hedgeye\n69. TSLA: Tesla Drifts Away from Mag 7 After 22% Drop This Year. Here's Who Can Swoop In. - TradingView\n70. Here's how much Tesla stock Elon Musk now owns - Finbold - Finance in Bold\n71. Analyst weighs in on Tesla stock as short sellers pounce - Rockdale Newton Citizen\n72. Tesla Stock: Waiting For The 'Redwood' - Seeking Alpha\n73. Elon Musk discloses 20.5% stake in Tesla - Seeking Alpha\n74. Tesla's rival BYD is considering a plant in Mexico By Investing.com - Investing.com\n75. Elon Musk discloses 20.5% stake in Tesla - Seeking Alpha\n76. Elon Musk threatens Delaware's hold on corporations - Yahoo Finance\n77. Is Tesla Stock a Buy? - The Globe and Mail\n78. Tesla Stock Pops On Filing Showing Elon Musk Owns 20.5%: Here's What Happened - Tesla (NASDAQ:TSLA) - Benzinga\n79. Tesla Inc (TSLA) Stock Falls -0.76% This Week; Should You Buy? - InvestorsObserver\n80. Electric Vehicle Stock Alert: Tesla Inc (TSLA) Receives Neutral Sentiment Score - InvestorsObserver\n81. Tesla temporarily cuts some U.S. auto prices - Seeking Alpha\n82. Tesla Stock: Waiting For The 'Redwood' - Seeking Alpha\n83. When Does Tesla Stock Become Too Cheap to Ignore? | investing.com - Investing.com\n84. Electric Vehicle Stock Alert: Should You Charge Your Portfolio With Tesla Inc (TSLA) Monday? - InvestorsObserver\n85. Better Buy in 2024: Rivian or Tesla Stock? - The Globe and Mail\n86. The Tesla share price is down 24% this year! Can it remain in the Magnificent 7? - Yahoo Finance UK\n87. Was Tesla's $17B Monday Meltdown Justified? Bullish Vs. Bearish Analysts Evaluate Model Y Price Cut Impact - TradingView\n88. Nvidia Is Now Worth More Than Berkshire Hathaway, Tesla, and AMD Combined. But Will It Last? - The Globe and Mail\n89. $1,000 invested in Tesla stock at start of 2024 returned - Finbold - Finance in Bold\n90. Tesla emits more negative signals - Analysis - 15-02-2024 - Economies.com\n91. Elon Musk Boosts Stake in Tesla to 20.5% - MSN\n92. Will Nvidia Keep Going Up in 2024 as Stock Split Chatter Grows? - The Globe and Mail\n93. Remote software updates transforming auto industry, experts say - The Globe and Mail\n94. Institutional investors feel Tesla stock will underperform over 6 months - Morgan Stanley - StreetInsider.com\n95. 2 Phenomenal Artificial Intelligence (AI) Stocks Using Nvidia's Technologies That I Can't Stop Buying - The Globe and Mail\n96. Tesla Stock Forecast: Bullish. But Not For the Reason You Think - Investment U\n97. Ford CEO urges the Wall Street to 'stop looking at Tesla' - InvestorsObserver\n98. Elon Musk Set To Appeal Tesla Compensation Ruling: Title Of World's Richest Person At Stake - Tesla (NASD - Benzinga\n99. Elon Musk's Neuralink transfers incorporation to Nevada - India TV News\n100. Tesla Has Problems. Could QuantumScape Be a Good Choice for Growth Investors? - The Globe and Mail\n\n\n--------------------------------------------------------------------------------\nResearcher (to User_Proxy_Auto):\n\nAnalyzing the provided news headlines, we can attempt to comprehend why NVIDIA (NVDA) and Tesla (TSLA) stock prices have shown differing performance over the past month.\n\nFor NVIDIA (NVDA), several headlines suggest positive catalysts:\n\n1. **Earnings Growth and Optimism**: There are multiple news headlines indicating expectations of earnings growth and raised price targets by various investment firms (e.g., Piper Sandler, Susquehanna).\n2. **Market Value Increase**: NVIDIA has reportedly overtaken Google Parent Alphabet as the third-largest US company by market value, reflecting high investor confidence.\n3. **Investment and Stake Increases**: There are reports of institutional investors increasing stakes in NVIDIA, indicating bullish sentiment in the investment community.\n4. **Focus on AI and Technology Advancements**: NVIDIA is discussed in the context of artificial intelligence, with investment in AI companies and anticipation of revenue from AI-related technology.\n5. **Bullish Analyst Reports and Price Target Increases**: Various analysts have raised their price targets for NVIDIA's stock, offering a positive outlook for the company's future.\n\nFor Tesla (TSLA), the headlines suggest a mix of concerns and opportunities:\n\n1. **Stock Price Volatility**: Headlines note Tesla's stock price volatility and the negative bearish sentiment among some institutional investors.\n2. **Management and Corporate Governance Query**: There are references to concerns regarding Elon Musk's focus and the impact of his managerial decisions on Tesla's business.\n3. **Possibility of Slowing EV Demand**: Some articles suggest a slump in demand for electric vehicles, which could be impacting Tesla's sales and valuation.\n4. **Economic Overview and Macro Factors**: Reports indicate that the wider economic conditions, such as inflation reports and potential slowdown, may be influencing Tesla's stock performance.\n5. **Price Adjustments and Strategy**: Tesla is making price adjustments to its vehicle lineup, which can indicate a strategy to boost demand or respond to market pressures.\n\nFrom this qualitative analysis of the recent news headlines, we can infer that NVIDIA's stock price increase may be driven by positive financial expectations, advancements in AI technologies, and increased investment interest. In contrast, Tesla's decline might be influenced by market concerns about demand and potential impacts of economic factors, as well as governance and strategy questions related to Elon Musk's leadership.\n\nInvestors often consider such news and analyst reports when making investment decisions, which can lead to the changes in stock performance observed. It is important to remember that stock market performance is multifaceted and can be influenced by a large variety of factors, including those not mentioned in the latest news headlines. For a complete understanding of any stock's performance, an in-depth analysis including financial statements, market trends, and expert analysis would be necessary.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n********************************************************************************\nStart a new chat with the following message: \nDevelop an engaging blog post using any information provided.\n\nWith the following carryover: \nI want to include a figure or a table of data in the blogpost.\nGreat! According to the executed script, the current stock price for NVIDIA Corporation (NVDA) is $732.36, with a positive percentage change of 30.65% over the past month, indicating notable growth. Meanwhile, Tesla, Inc. (TSLA) has a current stock price of $200.46, but it has experienced a negative percentage change of -7.00% over the past month, indicating a decrease in its value.\n\nIt seems that NVIDIA has had a particularly strong performance over the past month, while Tesla has seen a decline in its stock price. Keep in mind that the stock market can be influenced by a wide array of factors, including but not limited to company performance, industry shifts, market trends, and global economic conditions.\n\nPlease ensure to verify these figures with real-time data or additional financial news sources to get the most up-to-date information, as the stock market is volatile and prices can change rapidly.\n\nIf you need any further assistance or have additional questions, feel free to ask. Otherwise, that concludes our task.\n\nNVIDIA's (NVDA) stock price increase could stem from positive earnings growth projections, its ascent to the third-largest US company by market value, strong investor confidence signaled by institutional investments, and its strategic focus on artificial intelligence. Meanwhile, Tesla's (TSLA) price decline may relate to concerns about slowing electric vehicle demand, volatility and bearish sentiment among institutional investors, corporate governance questions pertaining to Elon Musk, and broader economic conditions impacting stock performance. These interpretations are based on recent news headlines and suggest that NVIDIA is currently favored in the market, while Tesla is facing challenges that may be causing its stock value to decrease.\n\n********************************************************************************\nUser_Proxy (to writer):\n\nDevelop an engaging blog post using any information provided.\nContext: \nI want to include a figure or a table of data in the blogpost.\nGreat! According to the executed script, the current stock price for NVIDIA Corporation (NVDA) is $732.36, with a positive percentage change of 30.65% over the past month, indicating notable growth. Meanwhile, Tesla, Inc. (TSLA) has a current stock price of $200.46, but it has experienced a negative percentage change of -7.00% over the past month, indicating a decrease in its value.\n\nIt seems that NVIDIA has had a particularly strong performance over the past month, while Tesla has seen a decline in its stock price. Keep in mind that the stock market can be influenced by a wide array of factors, including but not limited to company performance, industry shifts, market trends, and global economic conditions.\n\nPlease ensure to verify these figures with real-time data or additional financial news sources to get the most up-to-date information, as the stock market is volatile and prices can change rapidly.\n\nIf you need any further assistance or have additional questions, feel free to ask. Otherwise, that concludes our task.\n\nNVIDIA's (NVDA) stock price increase could stem from positive earnings growth projections, its ascent to the third-largest US company by market value, strong investor confidence signaled by institutional investments, and its strategic focus on artificial intelligence. Meanwhile, Tesla's (TSLA) price decline may relate to concerns about slowing electric vehicle demand, volatility and bearish sentiment among institutional investors, corporate governance questions pertaining to Elon Musk, and broader economic conditions impacting stock performance. These interpretations are based on recent news headlines and suggest that NVIDIA is currently favored in the market, while Tesla is facing challenges that may be causing its stock value to decrease.\n\n--------------------------------------------------------------------------------\nwriter (to User_Proxy):\n\n**The Tale of Two Tech Giants: A Stock Market Saga**\n\nIn the ever-changing landscape of the stock market, the tales of rising stars and waning giants are narrated daily through the cold, hard numbers flashing on traders' screens. In the latest chapter of this financial epic, we turn our gaze to two behemoths of innovation: NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA). Each tells a story as captivating as the next, but with decidedly different plot twists.\n\n**NVIDIA's Ascension: A Graphical Powerhouse**\n\nPicture this: a company whose fortunes are soaring, much like the rockets that its technology could one day help to navigate through the stars. NVIDIA, known for transforming pixels into beautiful imagery, is now transforming its numbers with just as much finesse. Let's delve into the specifics with a table that paints a thousand words\u2014or in this case, numbers:\n\n| Company | Current Stock Price | Percentage Change (Last Month) |\n|---------|---------------------|--------------------------------|\n| NVIDIA (NVDA) | $732.36             | +30.65%                        |\n| Tesla (TSLA)  | $200.46             | -7.00%                         |\n\nWhat we see is a whopping 30.65% increase in NVIDIA's stock price over the past month. But what has fueled this impressive growth? Analysts might point to a confluence of factors: a resounding optimism in earnings growth, NVIDIA's coronation as the third-largest US company by market value, a strong current of institutional investor confidence, and a strategic play in the buzz-filled field of artificial intelligence.\n\n**Tesla's Twist: When Currents Shift**\n\nContrast this with the journey Tesla has embarked upon. Once a darling of the market, it presently faces a twist in its narrative, marked by a 7% decrease in its stock price within the same timeframe. Tesla's plot thickens with a concoction of concerns: a potential slowdown in the electric vehicle market, turbulence sewn by bearish institutional sentiment, a series of questions around corporate governance, and the larger, shadowy figure of global economic uncertainty that lurks in the background.\n\n**Deciphering the Stories Behind the Statistics**\n\nWhat these figures don't capture is the rich tapestry of human decisions, innovations, fears, and aspirations that drive them. NVIDIA's current favored status among investors may be underpinned by its key strides in technology that promise to unlock new capabilities in various sectors, while Tesla's challenges might reflect the intricate dance of market expectations with real-world deliverables. Each stock price movement is a reflection of myriad stories unfolding within and around these corporate giants.\n\n**An Investor's Prose: Caution Amidst Narratives**\n\nAs a savvy observer of the market's grand narrative, caution remains a protagonist. Remember, stock prices are as volatile as the oceans\u2014serene one day, stormy the next. While NVIDIA's rise and Tesla's stumble are today's headlines, tomorrow might tell a different tale. For the most accurate pulse, ensure you're synced with the heartbeat of the market through real-time data and a diversified suite of financial news sources.\n\nToday, NVIDIA basks in the glow of market approval, while Tesla navigates a patch of rough seas. But as any veteran of the markets will tell you, fortunes can reverse in the blink of an eye. As long as innovation remains at their core and adaptability in their strategies, both companies are poised for the next chapter in their storied existences.\n\nAnd whether as cautionary tale or heroic epic, you can be certain that the market will be there to tell the tale.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\nUser_Proxy (to writer):\n\nToo short. Enrich it. \n\n--------------------------------------------------------------------------------\nwriter (to User_Proxy):\n\n**The Silicon Symbiosis: A Contrast in Fortunes**\n\nIn the realm of high technology and financial markets, the narrative is as dynamic as it is unpredictable. Every tradesman's tick and investor's tock is part of an intricate symphony, with movements both adagio and allegro. Today, we cast our spotlight on two titans that have come to symbolically represent the march of modern innovation: NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA). Their stories, though interwoven by the common thread of cutting-edge technology, are currently humming different melodies in the stock market concerto.\n\n**NVIDIA's Flourishing Financial Canvas**\n\nAllow me to direct your eyes to a visual that speaks volumes\u2014a financial figure that captivates the analytical mind as surely as a work of art steals the gaze of its onlooker:\n\n*Table 1: Comparative Stock Performances*\n\n| Company | Current Stock Price | Percentage Change (Last Month) |\n|---------|---------------------|--------------------------------|\n| NVIDIA (NVDA) | $732.36             | +30.65%                        |\n| Tesla (TSLA)  | $200.46             | -7.00%                         |\n\nIn just one month, NVIDIA has seen a dramatic surge in its stock price, a robust 30.65% climb that mirrors the steep inclines of a mountainous ascent. Yet, this ascent is no mere accident of fate. It has been prodded by a series of catalysts, each more powerful than the last. Analysts may suggest that NVIDIA's performance is reflective of a positive outlook on earnings growth, the magnifying glass of confidence from institutional investors, and its strategic investment in artificial intelligence\u2014a field that promises to redefine the boundaries of possibility.\n\nThis growth is no less significant for having catapulted NVIDIA to newfound heights, positioning it as the third-largest U.S. company by market value. In the eyes of many, NVIDIA is not merely a company but a canvas upon which the future of technology is being painted.\n\n**Tesla's Tales of Caution and Volatility**\n\nIn sharp contrast stands Tesla, the electric automaker whose brand has become synonymous with the future of transportation. Despite the sheen of innovation and Elon Musk's vision, the company's current stock price reflects a narrative tinged with uncertainty. The -7% dip might be seen as a momentary pause in the company\u2019s otherwise stellar performance, but it whispers tales of doubt regarding slowing electric vehicle demand and the complex ballet of investor sentiment in the face of corporate governance queries and Musk's multifaceted public persona.\n\nThe fluctuating script encapsulating Tesla's value also underscores the inherent volatility of the stock market, heavily influenced by external economic narratives and internal corporate dramas. Tesla's story is a complex one, layered with futuristic ambitions tempered by the current climate of economic restraint.\n\n**The Interplay of Market Forces and Human Emotion**\n\nBeyond the arithmetic of stock prices lies the human element: the restless drive for invention against the cautious tug of preservation. NVIDIA\u2019s surge speaks of human ambition crystallized into financial momentum, while Tesla\u2019s recent dip reflects the cautious pullback of a market wary of sprinting ahead of its own shadow.\n\nBut these stock price reflections are but shadows of a larger drama\u2014the ebb and flow of market sentiments that can turn on the dime of a quarterly report or a tweet-storm. The savvy investor or curious spectator must look beneath the surface waves to the currents below, charting movements with the precision of a cartographer mapping uncharted seas.\n\n**Heed the Market's Mutable Muse**\n\nWe conclude with a note of prudence: embrace the complex stories of NVIDIA and Tesla, but anchor your investment decisions in the bedrock of real-time data and comprehensive analytics. The stock market is a creature of change, and its story is written anew each day. Embrace the power of informed speculation, but be wary of the market's mutable muse.\n\nFor as the curtains fall on today's account of NVIDIA's stellar ascension and Tesla's contemplative descent, one can only wonder what twists the next act will hold. The market is, after all, the grandest theater of all\u2014a stage where fortunes are made and dreams may either be woven into reality or unravel before the audience's eyes.\n\nAs the tales of these two tech giants continue to unfold, whether they lead to further success or unexpected downturns, they exemplify the vibrancy and the volatility inherent in our quest to predicate the future on the promise of progress.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n"})}),"\n",(0,a.jsx)(n.h4,{id:"check-chat-results",children:"Check chat results"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"initiate_chat"})," method returns a ",(0,a.jsx)(n.code,{children:"ChatResult"})," object, which is a\ndataclass object storing information about the chat. Currently, it\nincludes the following attributes:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"chat_history"}),": a list of chat history."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"summary"}),": a string of chat summary. A summary is only available if\na summary_method is provided when initiating the chat."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"cost"}),": a tuple of (total_cost, total_actual_cost), where total_cost\nis a dictionary of cost information, and total_actual_cost is a\ndictionary of information on the actual incurred cost with cache."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"human_input"}),": a list of strings of human inputs solicited during\nthe chat. (Note that since we are setting ",(0,a.jsx)(n.code,{children:"human_input_mode"})," to\n",(0,a.jsx)(n.code,{children:"NEVER"})," in this notebook, this list is always empty.)"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'for i, chat_res in enumerate(chat_results):\n    print(f"*****{i}th chat*******:")\n    print(chat_res.summary)\n    print("Human input in the middle:", chat_res.human_input)\n    print("Conversation cost: ", chat_res.cost)\n    if i == 1:\n        assert (\n            len(chat_res.chat_history) == 4\n        ), f"The chat history should contain at most 4 messages because max_turns is set to 2 in the {i}-th chat."\n    print("\\n\\n")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"*****0th chat*******:\nGreat! According to the executed script, the current stock price for NVIDIA Corporation (NVDA) is $732.36, with a positive percentage change of 30.65% over the past month, indicating notable growth. Meanwhile, Tesla, Inc. (TSLA) has a current stock price of $200.46, but it has experienced a negative percentage change of -7.00% over the past month, indicating a decrease in its value.\n\nIt seems that NVIDIA has had a particularly strong performance over the past month, while Tesla has seen a decline in its stock price. Keep in mind that the stock market can be influenced by a wide array of factors, including but not limited to company performance, industry shifts, market trends, and global economic conditions.\n\nPlease ensure to verify these figures with real-time data or additional financial news sources to get the most up-to-date information, as the stock market is volatile and prices can change rapidly.\n\nIf you need any further assistance or have additional questions, feel free to ask. Otherwise, that concludes our task.\n\nHuman input in the middle: []\nConversation cost:  ({'total_cost': 0.09200999999999998, 'gpt-4': {'cost': 0.09200999999999998, 'prompt_tokens': 1597, 'completion_tokens': 735, 'total_tokens': 2332}}, {'total_cost': 0.04589999999999999, 'gpt-4': {'cost': 0.04589999999999999, 'prompt_tokens': 1096, 'completion_tokens': 217, 'total_tokens': 1313}})\n\n\n\n*****1th chat*******:\nNVIDIA's (NVDA) stock price increase could stem from positive earnings growth projections, its ascent to the third-largest US company by market value, strong investor confidence signaled by institutional investments, and its strategic focus on artificial intelligence. Meanwhile, Tesla's (TSLA) price decline may relate to concerns about slowing electric vehicle demand, volatility and bearish sentiment among institutional investors, corporate governance questions pertaining to Elon Musk, and broader economic conditions impacting stock performance. These interpretations are based on recent news headlines and suggest that NVIDIA is currently favored in the market, while Tesla is facing challenges that may be causing its stock value to decrease.\nHuman input in the middle: []\nConversation cost:  ({'total_cost': 0.45192, 'gpt-4': {'cost': 0.45192, 'prompt_tokens': 12414, 'completion_tokens': 1325, 'total_tokens': 13739}}, {'total_cost': 0.45192, 'gpt-4': {'cost': 0.45192, 'prompt_tokens': 12414, 'completion_tokens': 1325, 'total_tokens': 13739}})\n\n\n\n*****2th chat*******:\n**The Silicon Symbiosis: A Contrast in Fortunes**\n\nIn the realm of high technology and financial markets, the narrative is as dynamic as it is unpredictable. Every tradesman's tick and investor's tock is part of an intricate symphony, with movements both adagio and allegro. Today, we cast our spotlight on two titans that have come to symbolically represent the march of modern innovation: NVIDIA Corporation (NVDA) and Tesla, Inc. (TSLA). Their stories, though interwoven by the common thread of cutting-edge technology, are currently humming different melodies in the stock market concerto.\n\n**NVIDIA's Flourishing Financial Canvas**\n\nAllow me to direct your eyes to a visual that speaks volumes\u2014a financial figure that captivates the analytical mind as surely as a work of art steals the gaze of its onlooker:\n\n*Table 1: Comparative Stock Performances*\n\n| Company | Current Stock Price | Percentage Change (Last Month) |\n|---------|---------------------|--------------------------------|\n| NVIDIA (NVDA) | $732.36             | +30.65%                        |\n| Tesla (TSLA)  | $200.46             | -7.00%                         |\n\nIn just one month, NVIDIA has seen a dramatic surge in its stock price, a robust 30.65% climb that mirrors the steep inclines of a mountainous ascent. Yet, this ascent is no mere accident of fate. It has been prodded by a series of catalysts, each more powerful than the last. Analysts may suggest that NVIDIA's performance is reflective of a positive outlook on earnings growth, the magnifying glass of confidence from institutional investors, and its strategic investment in artificial intelligence\u2014a field that promises to redefine the boundaries of possibility.\n\nThis growth is no less significant for having catapulted NVIDIA to newfound heights, positioning it as the third-largest U.S. company by market value. In the eyes of many, NVIDIA is not merely a company but a canvas upon which the future of technology is being painted.\n\n**Tesla's Tales of Caution and Volatility**\n\nIn sharp contrast stands Tesla, the electric automaker whose brand has become synonymous with the future of transportation. Despite the sheen of innovation and Elon Musk's vision, the company's current stock price reflects a narrative tinged with uncertainty. The -7% dip might be seen as a momentary pause in the company\u2019s otherwise stellar performance, but it whispers tales of doubt regarding slowing electric vehicle demand and the complex ballet of investor sentiment in the face of corporate governance queries and Musk's multifaceted public persona.\n\nThe fluctuating script encapsulating Tesla's value also underscores the inherent volatility of the stock market, heavily influenced by external economic narratives and internal corporate dramas. Tesla's story is a complex one, layered with futuristic ambitions tempered by the current climate of economic restraint.\n\n**The Interplay of Market Forces and Human Emotion**\n\nBeyond the arithmetic of stock prices lies the human element: the restless drive for invention against the cautious tug of preservation. NVIDIA\u2019s surge speaks of human ambition crystallized into financial momentum, while Tesla\u2019s recent dip reflects the cautious pullback of a market wary of sprinting ahead of its own shadow.\n\nBut these stock price reflections are but shadows of a larger drama\u2014the ebb and flow of market sentiments that can turn on the dime of a quarterly report or a tweet-storm. The savvy investor or curious spectator must look beneath the surface waves to the currents below, charting movements with the precision of a cartographer mapping uncharted seas.\n\n**Heed the Market's Mutable Muse**\n\nWe conclude with a note of prudence: embrace the complex stories of NVIDIA and Tesla, but anchor your investment decisions in the bedrock of real-time data and comprehensive analytics. The stock market is a creature of change, and its story is written anew each day. Embrace the power of informed speculation, but be wary of the market's mutable muse.\n\nFor as the curtains fall on today's account of NVIDIA's stellar ascension and Tesla's contemplative descent, one can only wonder what twists the next act will hold. The market is, after all, the grandest theater of all\u2014a stage where fortunes are made and dreams may either be woven into reality or unravel before the audience's eyes.\n\nAs the tales of these two tech giants continue to unfold, whether they lead to further success or unexpected downturns, they exemplify the vibrancy and the volatility inherent in our quest to predicate the future on the promise of progress.\n\n\nHuman input in the middle: ['Too short. Enrich it. ', '']\nConversation cost:  ({'total_cost': 0.14765999999999999, 'gpt-4': {'cost': 0.14765999999999999, 'prompt_tokens': 1604, 'completion_tokens': 1659, 'total_tokens': 3263}}, {'total_cost': 0.14765999999999999, 'gpt-4': {'cost': 0.14765999999999999, 'prompt_tokens': 1604, 'completion_tokens': 1659, 'total_tokens': 3263}})\n\n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},3891:(e,n,t)=>{"use strict";t.d(n,{Z:()=>p});var a=t(7294),o=t(8263),i=t(6936),s=t(1704),r=t(109),c=t(6550),l=t(5893);const{Option:d}=o.default,{Paragraph:h,Title:u}=i.default,p=e=>{const n=(0,c.TH)(),t=(0,c.k6)(),i=(0,a.useCallback)((()=>{const e=new URLSearchParams(n.search).get("tags");return e?e.split(","):[]}),[n.search]),[p,m]=(0,a.useState)(i());(0,a.useEffect)((()=>{const e=i();m(e)}),[i]);const g=e=>{let{tags:n}=e;return(0,l.jsx)("div",{className:"tags-container",children:n?.map(((e,n)=>(0,l.jsx)("span",{className:"tag",onClick:n=>(p.includes(e)||y([...p,e]),n.preventDefault(),n.stopPropagation(),!1),children:e},n)))})},f=[...new Set(e.items.flatMap((e=>e.tags)))],y=e=>{m(e);const a=new URLSearchParams;e.length>0&&a.set("tags",e.join(",")),t.push(`${n.pathname}?${a.toString()}`)},T=p.length>0?e.items.filter((e=>p.some((n=>e.tags.includes(n))))):e.items,b=e.allowDefaultImage??!0,k=e=>{const n=(0,l.jsx)("img",{alt:e.title,src:e.image?e.image.includes("http")?e.image:`/autogen/img/gallery/${e.image}`:"/autogen/img/gallery/default.png",style:{height:150,width:"fit-content",margin:"auto",padding:2}});return e.image||b?n:null},_=e=>{if(!e.source)return null;const n=`https://colab.research.google.com/github/microsoft/autogen/blob/main/${e.source}`,t=`https://github.com/microsoft/autogen/blob/main/${e.source}`;return(0,l.jsxs)("span",{children:[(0,l.jsx)("a",{style:{marginRight:"5px"},href:n,target:"_parent",children:(0,l.jsx)("img",{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),(0,l.jsx)("a",{href:t,target:"_parent",children:(0,l.jsx)("img",{alt:"Static Badge",src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github"})})]})},w=e.target??"_blank";return(0,l.jsxs)("div",{children:[(0,l.jsx)(o.default,{mode:"multiple",placeholder:"Filter by tags",style:{width:"100%",marginBottom:16},value:p,onChange:y,"aria-label":"Filter by tags",children:f.map((e=>(0,l.jsx)(d,{value:e,children:e},e)))}),(0,l.jsx)(s.Z,{grid:{gutter:16,xs:1,sm:2,md:2,lg:3,xl:4,xxl:4},dataSource:T,renderItem:e=>(0,l.jsx)(s.Z.Item,{children:(0,l.jsx)("a",{href:e.link,target:w,rel:"noopener noreferrer",style:{display:"block"},children:(0,l.jsxs)(r.Z,{hoverable:!0,bordered:!0,style:{height:370,paddingTop:k(e)?15:0},cover:k(e),children:[(0,l.jsx)(u,{level:5,ellipsis:{rows:4},children:e.title}),_(e),(0,l.jsx)(h,{ellipsis:{rows:k(e)?3:6},style:{fontWeight:"normal",color:"#727272"},children:e.description?e.description:e.title}),(0,l.jsx)(g,{tags:e.tags})]})})})})]})}},1602:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=t.p+"assets/images/cell-6-output-1-729ebfb15d0c309ef1318de774296c7e.png"},7958:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=t.p+"assets/images/cell-8-output-2-b672d214f7d3b1916b6c9e5ea2f33f96.png"},5332:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=t.p+"assets/images/cell-10-output-1-f38a82f2f47285d9e1f761a11ff48fdd.png"},2410:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=t.p+"assets/images/cell-6-output-1-3c7def77ca1f51c006ac1ec1a92309f9.png"},9167:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=t.p+"assets/images/cell-7-output-1-ace8304cee97327ed19bf2935ff53cb5.png"},4030:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=t.p+"assets/images/cell-8-output-2-ecbfb470aee1a07cbcafce2b2d49a199.png"},9653:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=t.p+"assets/images/cell-9-output-1-045811c0828de122467a5c1edc9a5420.png"}}]);