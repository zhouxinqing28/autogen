"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9530],{90861:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var t=o(85893),a=o(11151);const r={custom_edit_url:"https://github.com/microsoft/autogen/edit/main/website/docs/topics/non-openai-models/cloud-mistralai.ipynb",source_notebook:"/website/docs/topics/non-openai-models/cloud-mistralai.ipynb",title:"Mistral AI"},s="Mistral AI",i={id:"topics/non-openai-models/cloud-mistralai",title:"Mistral AI",description:"Open In Colab",source:"@site/docs/topics/non-openai-models/cloud-mistralai.mdx",sourceDirName:"topics/non-openai-models",slug:"/topics/non-openai-models/cloud-mistralai",permalink:"/autogen/docs/topics/non-openai-models/cloud-mistralai",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/topics/non-openai-models/cloud-mistralai.ipynb",tags:[],version:"current",frontMatter:{custom_edit_url:"https://github.com/microsoft/autogen/edit/main/website/docs/topics/non-openai-models/cloud-mistralai.ipynb",source_notebook:"/website/docs/topics/non-openai-models/cloud-mistralai.ipynb",title:"Mistral AI"},sidebar:"docsSidebar",previous:{title:"Non-OpenAI Models",permalink:"/autogen/docs/topics/non-openai-models/about-using-nonopenai-models"},next:{title:"Together AI",permalink:"/autogen/docs/topics/non-openai-models/cloud-togetherai"}},l={},d=[{value:"Two-Agent Coding Example",id:"two-agent-coding-example",level:2},{value:"Tool Call Example",id:"tool-call-example",level:2}];function m(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"mistral-ai",children:"Mistral AI"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/website/docs/topics/non-openai-models/cloud-mistralai.ipynb",children:(0,t.jsx)(e.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,t.jsx)(e.a,{href:"https://github.com/microsoft/autogen/blob/main/website/docs/topics/non-openai-models/cloud-mistralai.ipynb",children:(0,t.jsx)(e.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:"https://mistral.ai/",children:"Mistral AI"})," is a cloud based platform serving\nMistral\u2019s own LLMs. You can use AutoGen with Mistral AI\u2019s API directly."]}),"\n",(0,t.jsxs)(e.p,{children:["First you need to install the ",(0,t.jsx)(e.code,{children:"pyautogen"})," package to use AutoGen."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"! pip install pyautogen\n"})}),"\n",(0,t.jsx)(e.p,{children:"Now you can set up the Mistral model you want to use."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import os\n\nconfig_list = [\n    {\n        # Choose your model name.\n        "model": "mistral-large-latest",\n        "base_url": "https://api.mistral.ai/v1",\n        # You need to provide your API key here.\n        "api_key": os.environ.get("MISTRAL_API_KEY"),\n    }\n]\n'})}),"\n",(0,t.jsx)(e.h2,{id:"two-agent-coding-example",children:"Two-Agent Coding Example"}),"\n",(0,t.jsx)(e.p,{children:"In this example, we run a two-agent chat to count how many prime numbers\nbetween 1 and 10000 using coding."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from pathlib import Path\nfrom autogen import AssistantAgent, UserProxyAgent\nfrom autogen.coding import LocalCommandLineCodeExecutor\n\n# Setting up the code executor.\nworkdir = Path("coding")\nworkdir.mkdir(exist_ok=True)\ncode_executor = LocalCommandLineCodeExecutor(work_dir=workdir)\n\n# Setting up the agents.\nuser_proxy_agent = UserProxyAgent(\n    name="User",\n    code_execution_config={"executor": code_executor},\n    is_termination_msg=lambda msg: "TERMINATE" in msg.get("content"),\n)\n\nassistant_agent = AssistantAgent(\n    name="Mistral Assistant",\n    llm_config={"config_list": config_list},\n)\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'chat_result = user_proxy_agent.initiate_chat(\n    assistant_agent,\n    message="Count how many prime numbers from 1 to 10000.",\n)\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"User (to Mistral Assistant):\n\nCount how many prime numbers from 1 to 10000.\n\n--------------------------------------------------------------------------------\nMistral Assistant (to User):\n\nSure, I can help with that. Here's a Python code snippet that counts the number of prime numbers from 1 to 10000.\n\n```python\n# filename: prime_counter.py\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ncount = 0\nfor num in range(1, 10001):\n    if is_prime(num):\n        count += 1\n\nprint(count)\n```\n\nPlease save this code in a file named `prime_counter.py` and run it. The output will be the count of prime numbers from 1 to 10000.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING CODE BLOCK (inferred language is python)...\nUser (to Mistral Assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: 1229\n\n\n--------------------------------------------------------------------------------\nMistral Assistant (to User):\n\nBased on the output, the code I provided earlier has successfully executed and found that there are 1229 prime numbers between 1 and 10000. Here's how I approached this task step by step:\n\n1. I wrote a Python function `is_prime(n)` to check if a given number `n` is prime. This function returns `True` if `n` is prime and `False` otherwise.\n\n2. I used a for loop to iterate through numbers from 1 to 10000, then called the `is_prime` function to determine if the current number is prime. If it is, I incremented a counter variable `count` by 1.\n\n3. I printed the value of `count` after the loop to display the total number of prime numbers in the given range.\n\nThe output `1229` confirms that there are indeed 1229 prime numbers between 1 and 10000.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n"})}),"\n",(0,t.jsx)(e.h2,{id:"tool-call-example",children:"Tool Call Example"}),"\n",(0,t.jsx)(e.p,{children:"In this example, instead of writing code, we will have two agent playing\nchess against each other using tool to make moves."}),"\n",(0,t.jsxs)(e.p,{children:["First install the ",(0,t.jsx)(e.code,{children:"chess"})," package by running the following command:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"! pip install chess\n"})}),"\n",(0,t.jsx)(e.p,{children:"Write function for making a move."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import chess\nimport chess.svg\nfrom IPython.display import display\nimport random\nfrom typing_extensions import Annotated\n\nboard = chess.Board()\n\n\ndef make_move() -> Annotated[str, "A move in UCI format"]:\n    moves = list(board.legal_moves)\n    move = random.choice(moves)\n    board.push(move)\n    # Display the board.\n    display(chess.svg.board(board, size=400))\n    return str(move)\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Let\u2019s create the agents. We have three different agents: -\n",(0,t.jsx)(e.code,{children:"player_white"})," is the agent that plays white. - ",(0,t.jsx)(e.code,{children:"player_black"})," is the\nagent that plays black. - ",(0,t.jsx)(e.code,{children:"board_proxy"})," is the agent that moves the\npieces on the board."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from autogen import ConversableAgent, register_function\n\nplayer_white = ConversableAgent(\n    name="Player White",\n    system_message="You are a chess player and you play as white. " "Always call make_move() to make a move",\n    llm_config={"config_list": config_list, "cache_seed": None},\n)\n\nplayer_black = ConversableAgent(\n    name="Player Black",\n    system_message="You are a chess player and you play as black. " "Always call make_move() to make a move",\n    llm_config={"config_list": config_list, "cache_seed": None},\n)\n\nboard_proxy = ConversableAgent(\n    name="Board Proxy",\n    llm_config=False,\n    # The board proxy will only respond to the make_move function.\n    is_termination_msg=lambda msg: "tool_calls" not in msg,\n)\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Register tools for the agents. See ",(0,t.jsx)(e.a,{href:"../../../docs/tutorial/tool-use",children:"tutorial chapter on tool\nuse"})," for more information."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'register_function(\n    make_move,\n    caller=player_white,\n    executor=board_proxy,\n    name="make_move",\n    description="Make a move.",\n)\n\nregister_function(\n    make_move,\n    caller=player_black,\n    executor=board_proxy,\n    name="make_move",\n    description="Make a move.",\n)\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Register nested chats for the player agents. Nested chats allows each\nplayer agent to chat with the board proxy agent to make a move, before\ncommunicating with the other player agent. See ",(0,t.jsx)(e.a,{href:"../../../docs/tutorial/conversation-patterns#nested-chats",children:"nested chats tutorial\nchapter"})," for\nmore information."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'player_white.register_nested_chats(\n    trigger=player_black,\n    chat_queue=[\n        {\n            "sender": board_proxy,\n            "recipient": player_white,\n        }\n    ],\n)\n\nplayer_black.register_nested_chats(\n    trigger=player_white,\n    chat_queue=[\n        {\n            "sender": board_proxy,\n            "recipient": player_black,\n        }\n    ],\n)\n'})}),"\n",(0,t.jsx)(e.p,{children:"Start the chess game."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# Clear the board.\nboard = chess.Board()\n\nchat_result = player_white.initiate_chat(\n    player_black,\n    message="Let\'s play chess! Your move.",\n    max_turns=4,\n)\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"Player White (to Player Black):\n\nLet's play chess! Your move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n********************************************************************************\nStarting a new chat....\n\nMessage:\nLet's play chess! Your move.\n\nCarryover: \n\n\n********************************************************************************\nBoard Proxy (to Player Black):\n\nLet's play chess! Your move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer Black (to Board Proxy):\n\n\n***** Suggested tool call (No tool call id found): make_move *****\nArguments: \n{}\n******************************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING FUNCTION make_move...\nBoard Proxy (to Player Black):\n\nBoard Proxy (to Player Black):\n\n***** Response from calling tool (No id found) *****\na2a3\n****************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer Black (to Board Proxy):\n\nYou made a move: a2a3. It's my turn now.\n\ne2e4\n\nYour move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\nPlayer Black (to Player White):\n\nYou made a move: a2a3. It's my turn now.\n\ne2e4\n\nYour move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n********************************************************************************\nStarting a new chat....\n\nMessage:\nYou made a move: a2a3. It's my turn now.\n\ne2e4\n\nYour move.\n\nCarryover: \n\n\n********************************************************************************\nBoard Proxy (to Player White):\n\nYou made a move: a2a3. It's my turn now.\n\ne2e4\n\nYour move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer White (to Board Proxy):\n\n\n***** Suggested tool call (No tool call id found): make_move *****\nArguments: \n{}\n******************************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING FUNCTION make_move...\nBoard Proxy (to Player White):\n\nBoard Proxy (to Player White):\n\n***** Response from calling tool (No id found) *****\ne7e5\n****************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer White (to Board Proxy):\n\nI made a move: e7e5. It's your turn now.\n\nYour move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\nPlayer White (to Player Black):\n\nI made a move: e7e5. It's your turn now.\n\nYour move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n********************************************************************************\nStarting a new chat....\n\nMessage:\nI made a move: e7e5. It's your turn now.\n\nYour move.\n\nCarryover: \n\n\n********************************************************************************\nBoard Proxy (to Player Black):\n\nI made a move: e7e5. It's your turn now.\n\nYour move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer Black (to Board Proxy):\n\n\n***** Suggested tool call (No tool call id found): make_move *****\nArguments: \n{}\n******************************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING FUNCTION make_move...\nBoard Proxy (to Player Black):\n\nBoard Proxy (to Player Black):\n\n***** Response from calling tool (No id found) *****\nh2h4\n****************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer Black (to Board Proxy):\n\nI made a move: h2h4. It's your turn now.\n\nYour move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\nPlayer Black (to Player White):\n\nI made a move: h2h4. It's your turn now.\n\nYour move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n********************************************************************************\nStarting a new chat....\n\nMessage:\nI made a move: h2h4. It's your turn now.\n\nYour move.\n\nCarryover: \n\n\n********************************************************************************\nBoard Proxy (to Player White):\n\nI made a move: h2h4. It's your turn now.\n\nYour move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer White (to Board Proxy):\n\n\n***** Suggested tool call (No tool call id found): make_move *****\nArguments: \n{}\n******************************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING FUNCTION make_move...\nBoard Proxy (to Player White):\n\nBoard Proxy (to Player White):\n\n***** Response from calling tool (No id found) *****\ng8h6\n****************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer White (to Board Proxy):\n\nYou moved g8h6. I made a move: g1g3. It's your turn now.\n\nYour move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\nPlayer White (to Player Black):\n\nYou moved g8h6. I made a move: g1g3. It's your turn now.\n\nYour move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n********************************************************************************\nStarting a new chat....\n\nMessage:\nYou moved g8h6. I made a move: g1g3. It's your turn now.\n\nYour move.\n\nCarryover: \n\n\n********************************************************************************\nBoard Proxy (to Player Black):\n\nYou moved g8h6. I made a move: g1g3. It's your turn now.\n\nYour move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer Black (to Board Proxy):\n\n\n***** Suggested tool call (No tool call id found): make_move *****\nArguments: \n{}\n******************************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING FUNCTION make_move...\nBoard Proxy (to Player Black):\n\nBoard Proxy (to Player Black):\n\n***** Response from calling tool (No id found) *****\ng1h3\n****************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer Black (to Board Proxy):\n\nYou moved g8h6. I made a move: g1h3. You moved g1h3. It's my turn now.\n\nI made a move: d2d4. Your move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\nPlayer Black (to Player White):\n\nYou moved g8h6. I made a move: g1h3. You moved g1h3. It's my turn now.\n\nI made a move: d2d4. Your move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n********************************************************************************\nStarting a new chat....\n\nMessage:\nYou moved g8h6. I made a move: g1h3. You moved g1h3. It's my turn now.\n\nI made a move: d2d4. Your move.\n\nCarryover: \n\n\n********************************************************************************\nBoard Proxy (to Player White):\n\nYou moved g8h6. I made a move: g1h3. You moved g1h3. It's my turn now.\n\nI made a move: d2d4. Your move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer White (to Board Proxy):\n\n\n***** Suggested tool call (No tool call id found): make_move *****\nArguments: \n{}\n******************************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING FUNCTION make_move...\nBoard Proxy (to Player White):\n\nBoard Proxy (to Player White):\n\n***** Response from calling tool (No id found) *****\nd8h4\n****************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer White (to Board Proxy):\n\nYou moved d8h4. I made a move: d4d5. Your move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\nPlayer White (to Player Black):\n\nYou moved d8h4. I made a move: d4d5. Your move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n********************************************************************************\nStarting a new chat....\n\nMessage:\nYou moved d8h4. I made a move: d4d5. Your move.\n\nCarryover: \n\n\n********************************************************************************\nBoard Proxy (to Player Black):\n\nYou moved d8h4. I made a move: d4d5. Your move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer Black (to Board Proxy):\n\n\n***** Suggested tool call (No tool call id found): make_move *****\nArguments: \n{}\n******************************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING FUNCTION make_move...\nBoard Proxy (to Player Black):\n\nBoard Proxy (to Player Black):\n\n***** Response from calling tool (No id found) *****\ne2e4\n****************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nPlayer Black (to Board Proxy):\n\nYou made a move: e2e4. I made a move: d5e4. Your move.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\nPlayer Black (to Player White):\n\nYou made a move: e2e4. I made a move: d5e4. Your move.\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:o(60380).Z+"",width:"400",height:"400"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:o(95847).Z+"",width:"400",height:"400"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:o(78118).Z+"",width:"400",height:"400"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:o(95613).Z+"",width:"400",height:"400"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:o(19461).Z+"",width:"400",height:"400"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:o(44838).Z+"",width:"400",height:"400"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:o(5556).Z+"",width:"400",height:"400"})})]})}function c(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(m,{...n})}):m(n)}},60380:(n,e,o)=>{o.d(e,{Z:()=>t});const t=o.p+"assets/images/cell-11-output-2-e2d03080f600f7f140bef143757ed841.svg"},95847:(n,e,o)=>{o.d(e,{Z:()=>t});const t=o.p+"assets/images/cell-11-output-3-7034f8d52980b892339756c5612d48ce.svg"},78118:(n,e,o)=>{o.d(e,{Z:()=>t});const t=o.p+"assets/images/cell-11-output-4-8b33fa7ebc5f4ea35c04081828290c33.svg"},95613:(n,e,o)=>{o.d(e,{Z:()=>t});const t=o.p+"assets/images/cell-11-output-5-d4a20d1012df4324433eeaaef6e92e47.svg"},19461:(n,e,o)=>{o.d(e,{Z:()=>t});const t=o.p+"assets/images/cell-11-output-6-b6a9c75b471f448a518425aa8750f9b6.svg"},44838:(n,e,o)=>{o.d(e,{Z:()=>t});const t=o.p+"assets/images/cell-11-output-7-eff25c2050fc949643d7db030355e964.svg"},5556:(n,e,o)=>{o.d(e,{Z:()=>t});const t=o.p+"assets/images/cell-11-output-8-7cf7adda819abde0895f93061b74d584.svg"},11151:(n,e,o)=>{o.d(e,{Z:()=>i,a:()=>s});var t=o(67294);const a={},r=t.createContext(a);function s(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);