"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1218],{2982:t=>{t.exports=JSON.parse('{"label":"orchestration","permalink":"/autogen/docs/tags/orchestration","allTagsPath":"/autogen/docs/tags","count":4,"items":[{"id":"notebooks/agentchat_groupchat_finite_state_machine","title":"FSM - User can input speaker transition contraints. {#fsm---user-can-input-speaker-transition-contraints.}","description":"Explore the demonstration of the Finite State Machine implementation, which allows the user to input speaker transition contraints.\\n","permalink":"/autogen/docs/notebooks/agentchat_groupchat_finite_state_machine"},{"id":"notebooks/agentchat_groupchat","title":"Group Chat","description":"Explore the utilization of large language models in automated group chat scenarios, where agents perform tasks collectively, demonstrating how they can be configured, interact with each other, and retrieve specific information from external resources.\\n","permalink":"/autogen/docs/notebooks/agentchat_groupchat"},{"id":"notebooks/agentchat_groupchat_RAG","title":"Group Chat with Retrieval Augmented Generation","description":"Implement and manage a multi-agent chat system using AutoGen, where AI assistants retrieve information, generate code, and interact collaboratively to solve complex tasks, especially in areas not covered by their training data.\\n","permalink":"/autogen/docs/notebooks/agentchat_groupchat_RAG"},{"id":"notebooks/agentchat_society_of_mind","title":"SocietyOfMindAgent","description":"Explore the demonstration of the SocietyOfMindAgent in the AutoGen library, which runs a group chat as an internal monologue, but appears to the external world as a single agent, offering a structured way to manage complex interactions among multiple agents and handle issues such as extracting responses from complex dialogues and dealing with context window constraints.\\n","permalink":"/autogen/docs/notebooks/agentchat_society_of_mind"}],"unlisted":false}')}}]);