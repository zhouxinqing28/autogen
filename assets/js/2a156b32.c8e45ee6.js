"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9829],{55533:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2024/03/03/AutoGen-Update","metadata":{"permalink":"/autogen/blog/2024/03/03/AutoGen-Update","source":"@site/blog/2024-03-03-AutoGen-Update/index.mdx","title":"What\'s New in AutoGen?","description":"autogen is loved","date":"2024-03-03T00:00:00.000Z","formattedDate":"March 3, 2024","tags":[{"label":"news","permalink":"/autogen/blog/tags/news"},{"label":"summary","permalink":"/autogen/blog/tags/summary"},{"label":"roadmap","permalink":"/autogen/blog/tags/roadmap"}],"readingTime":10.135,"hasTruncateMarker":false,"authors":[{"name":"Chi Wang","title":"Principal Researcher at Microsoft Research","url":"https://www.linkedin.com/in/chi-wang-49b15b16/","imageURL":"https://github.com/sonichi.png","key":"sonichi"}],"frontMatter":{"title":"What\'s New in AutoGen?","authors":"sonichi","tags":["news","summary","roadmap"]},"unlisted":false,"nextItem":{"title":"StateFlow - Build LLM Workflows with Customized State-Oriented Transition Function in GroupChat","permalink":"/autogen/blog/2024/02/29/StateFlow"}},"content":"![autogen is loved](img/love.png)\\n\\n**TL;DR**\\n- **AutoGen has received tremendous interest and recognition.**\\n- **AutoGen has many exciting new features and ongoing research.**\\n\\nFive months have passed since the initial spinoff of AutoGen from [FLAML](https://github.com/microsoft/FLAML). What have we learned since then? What are the milestones achieved? What\'s next?\\n\\n## Background\\n\\nAutoGen was motivated by two big questions:\\n- What are future AI applications like?\\n- How do we empower every developer to build them?\\n\\nLast year, I worked with my colleagues and collaborators from Penn State University and University of Washington, on a new multi-agent framework, to enable the next generation of applications powered by large language models.\\nWe have been building AutoGen, as a programming framework for agentic AI, just like PyTorch for deep learning.\\nWe developed AutoGen in an open source project [FLAML](https://github.com/microsoft/FLAML): a fast library for AutoML and tuning. After a few studies like [EcoOptiGen](https://arxiv.org/abs/2303.04673v1) and [MathChat](https://arxiv.org/abs/2306.01337), in August, we published a [technical report](https://arxiv.org/abs/2308.08155v1) about the multi-agent framework.\\nIn October, we moved AutoGen from FLAML to a standalone repo on GitHub, and published an [updated technical report](https://arxiv.org/abs/2308.08155).\\n\\n## Feedback\\n\\nSince then, we\'ve got new feedback every day, everywhere. Users have shown really high recognition of the new levels of capability enabled by AutoGen. For example, there are many comments like the following on X (Twitter) or YouTube.\\n\\n> Autogen gave me the same a-ha moment that I haven\'t felt since trying out GPT-3\\nfor the first time.\\n\\n> I have never been this surprised since ChatGPT.\\n\\n\\nMany users have deep understanding of the value in different dimensions, such as the modularity, flexibility and simplicity.\\n\\n> The same reason autogen is significant is the same reason OOP is a good idea. Autogen packages up all that complexity into an agent I can create in one line, or modify with another.\\n\x3c!--\\nI had lots of ideas I wanted to implement, but it needed a framework like this\\nand I am just not the guy to make such a robust and intelligent framework.\\n--\x3e\\n\\nOver time, more and more users share their experiences in using or contributing to autogen.\\n\\n> In our Data Science department Autogen is helping us develop a production ready\\nmulti-agents framework.\\n>> Sam Khalil, VP Data Insights & FounData, Novo Nordisk\\n\\n> When I built an interactive learning tool for students, I looked for a tool that\\ncould streamline the logistics but also give enough flexibility so I could use\\ncustomized tools. AutoGen has both. It simplified the work. Thanks to Chi and his\\nteam for sharing such a wonderful tool with the community.\\n>> Yongsheng Lian, Professor at the University of Louisville, Mechanical Engineering\\n\\n> Exciting news: the latest AutoGen release now features my contribution\u2026\\nThis experience has been a wonderful blend of learning and contributing,\\ndemonstrating the dynamic and collaborative spirit of the tech community.\\n>> Davor Runje, Cofounder @ airt / President of the board @ CISEx\\n\\n> With the support of a grant through the Data Intensive Studies Center at Tufts\\nUniversity, our group is hoping to solve some of the challenges students face when\\ntransitioning from undergraduate to graduate-level courses, particularly in Tufts\'\\nDoctor of Physical Therapy program in the School of Medicine. We\'re experimenting\\nwith Autogen to create tailored assessments, individualized study guides, and focused\\ntutoring. This approach has led to significantly better results than those we\\nachieved using standard chatbots. With the help of Chi and his group at Microsoft,\\nour current experiments include using multiple agents in sequential chat, teachable\\nagents, and round-robin style debate formats. These methods have proven more\\neffective in generating assessments and feedback compared to other large language\\nmodels (LLMs) we\'ve explored. I\'ve also used OpenAI Assistant agents through Autogen\\nin my Primary Care class to facilitate student engagement in patient interviews\\nthrough digital simulations. The agent retrieved information from a real patient\\nfeatured in a published case study, allowing students to practice their interview\\nskills with realistic information.\\n>> Benjamin D Stern, MS, DPT, Assistant Professor, Doctor of Physical Therapy Program,\\nTufts University School of Medicine\\n\\n> Autogen has been a game changer for how we analyze companies and products! Through\\ncollaborative discourse between AI Agents we are able to shave days off our research\\nand analysis process.\\n>> Justin Trugman, Cofounder & Head of Technology at BetterFutureLabs\\n\\nThese are just a small fraction of examples. We have seen big enterprise customers\u2019 interest from pretty much every vertical industry: Accounting, Airlines, Biotech, Consulting, Consumer Packaged Goods, Electronics, Entertainment, Finance, Fintech, Government, Healthcare, Manufacturer, Metals, Pharmacy, Research, Retailer, Social Media, Software, Supply Chain, Technology, Telecom\u2026\\n\\nAutoGen is used or contributed by companies, organizations, universities from A to Z, in all over the world. We have seen hundreds of example applications. Some organization uses AutoGen as the backbone to build their agent platform. Others use AutoGen for diverse scenarios, including research and investment to novel and creative applications of multiple agents.\\n\\n## Milestones\\n\\nAutoGen has a large and active community of developers, researchers and AI practitioners.\\n- 22K+ stars on [GitHub](https://aka.ms/autogen-gh), 3K+ forks\\n- 14K+ members on [Discord](https://aka.ms/autogen-dc)\\n- 100K+ downloads per months\\n- 3M+ views on Youtube (400+ community-generated videos)\\n- 100+ citations on [Google Scholar](https://scholar.google.com/citations?view_op=view_citation&hl=en&user=IiSNwnAAAAAJ&citation_for_view=IiSNwnAAAAAJ:zCpYd49hD24C)\\n\\nI am so amazed by their creativity and passion.\\nI also appreciate the recognition and awards AutoGen has received, such as:\\n- Selected by [TheSequence: My Five Favorite AI Papers of 2023](https://thesequence.substack.com/p/my-five-favorite-ai-papers-of-2023)\\n- Top trending repo on GitHub in Oct\'23\\n- Selected into [Open100: Top 100 Open Source achievements](https://www.benchcouncil.org/evaluation/opencs/annual.html) only 35 days after spinoff\\n\\nOn March 1, the initial AutoGen multi-agent experiment on the challenging [GAIA](https://huggingface.co/spaces/gaia-benchmark/leaderboard) benchmark turned out to achieve the No. 1 accuracy with a big leap, in all the three levels.\\n\\n![gaia](img/gaia.png)\\n\\nThat shows the big potential of using AutoGen in solving complex tasks.\\nAnd it\'s just the beginning of the community\'s effort to answering a few hard open questions.\\n\\n## Open Questions\\n\\nIn the [AutoGen technical report](https://arxiv.org/abs/2308.08155), we laid out a number of challenging research questions:\\n\\n1. How to design optimal multi-agent workflows?\\n1. How to create highly capable agents?\\n1. How to enable scale, safety and human agency?\\n\\nThe community has been working hard to address them in several dimensions:\\n\\n- Evaluation. Convenient and insightful evaluation is the foundation of making solid progress.\\n- Interface. An intuitive, expressive and standardized interface is the prerequisite of fast experimentation and optimization.\\n- Optimization. Both the multi-agent interaction design (e.g., decomposition) and the individual agent capability need to be optimized to satisfy specific application needs.\\n- Integration. Integration with new technologies is an effective way to enhance agent capability.\\n- Learning/Teaching. Agentic learning and teaching are intuitive approaches for agents to optimize their performance, enable human agency and enhance safety.\\n\\n## New Features & Ongoing Research\\n\\n### Evaluation\\n\\nWe are working on agent-based evaluation tools and benchmarking tools. For example:\\n\\n- [AgentEval](/blog/2023/11/20/AgentEval). Our [research](https://arxiv.org/abs/2402.09015) finds that LLM agents built with AutoGen can be used to automatically identify evaluation criteria and assess the performance from task descriptions and execution logs. It is demonstrated as a [notebook example](https://github.com/microsoft/autogen/blob/main/notebook/agenteval_cq_math.ipynb). Feedback and help are welcome for building it into the library.\\n- [AutoGenBench](/blog/2024/01/25/AutoGenBench). AutoGenBench is a commandline tool for downloading, configuring, running an agentic benchmark, and reporting results. It is designed to allow repetition, isolation and instrumentation, leveraging the new [runtime logging](/docs/notebooks/agentchat_logging) feature.\\n\\nThese tools have been used for improving the AutoGen library as well as applications. For example, the new state-of-the-art performance achieved by a multi-agent solution to the [GAIA](https://huggingface.co/spaces/gaia-benchmark/leaderboard) benchmark has benefited from these evaluation tools.\\n\\n### Interface\\n\\nWe are making rapid progress in further improving the interface to make it even easier to build agent applications. For example:\\n\\n- [AutoBuild](/blog/2023/11/26/Agent-AutoBuild). AutoBuild is an ongoing area of research to automatically create or select a group of agents for a given task and objective. If successful, it will greatly reduce the effort from users or developers when using the multi-agent technology. It also paves the way for agentic decomposition to handle complex tasks. It is available as an experimental feature and demonstrated in two modes: free-form [creation](https://github.com/microsoft/autogen/blob/main/notebook/autobuild_basic.ipynb) and [selection](https://github.com/microsoft/autogen/blob/main/notebook/autobuild_agent_library.ipynb) from a library.\\n- [AutoGen Studio](/blog/2023/12/01/AutoGenStudio). AutoGen Studio is a no-code UI for fast experimentation with the multi-agent conversations. It lowers the barrier of entrance to the AutoGen technology. Models, agents, and workflows can all be configured without writing code. And chatting with multiple agents in a playground is immediately available after the configuration. Although only a subset of `pyautogen` features are available in this sample app, it demonstrates a promising experience. It has generated tremendous excitement in the community.\\n- Conversation Programming+. The [AutoGen paper](https://arxiv.org/abs/2308.08155) introduced a key concept of *Conversation Programming*, which can be used to program diverse conversation patterns such as 1-1 chat, group chat, hierarchical chat, nested chat etc. While we offered dynamic group chat as an example of high-level orchestration, it made other patterns relatively less discoverable. Therefore, we have added more convenient conversation programming features which enables easier definition of other types of complex workflow, such as [finite state machine based group chat](/blog/2024/02/11/FSM-GroupChat), [sequential chats](/docs/notebooks/agentchats_sequential_chats), and [nested chats](/docs/notebooks/agentchat_nestedchat). Many users have found them useful in implementing specific patterns, which have been always possible but more obvious with the added features. I will write another blog post for a deep dive.\\n\\n### Learning/Optimization/Teaching\\n\\nThe features in this category allow agents to remember teachings from users or other agents long term, or improve over iterations. For example:\\n\\n- [AgentOptimizer](/blog/2023/12/23/AgentOptimizer). This [research](https://arxiv.org/abs/2402.11359) finds an approach of training LLM agents without modifying the model. As a case study, this technique optimizes a set of Python functions for agents to use in solving a set of training tasks. It is planned to be available as an experimental feature.\\n- [EcoAssistant](/blog/2023/11/09/EcoAssistant). This [research](https://arxiv.org/abs/2310.03046) finds a multi-agent teaching approach when using agents with different capacities powered by different LLMs. For example, a GPT-4 agent can teach a GPT-3.5 agent by demonstration. With this approach, one only needs 1/3 or 1/2 of GPT-4\'s cost, while getting 10-20\\\\% higher success rate than GPT-4 on coding-based QA. No finetuning is needed. All you need is a GPT-4 endpoint and a GPT-3.5-turbo endpoint. Help is appreciated to offer this technique as a feature in the AutoGen library.\\n- [Teachability](/blog/2023/10/26/TeachableAgent). Every LLM agent in AutoGen can be made teachable, i.e., remember facts, preferences, skills etc. from interacting with other agents. For example, a user behind a user proxy agent can teach an assistant agent instructions in solving a difficult math problem. After teaching once, the problem solving rate for the assistant agent can have a dramatic improvement (e.g., 37% -> 95% for gpt-4-0613).\\n![teach](img/teach.png)\\nThis feature works for GPTAssistantAgent (using OpenAI\'s assistant API) and group chat as well. One interesting use case of teachability + FSM group chat: [teaching resilience](https://www.linkedin.com/pulse/combatting-ai-naivete-teaching-resilience-emotional-leah-bonser-jdhrc).\\n\\n### Integration\\n\\nThe extensible design of AutoGen makes it easy to integrate with new technologies. For example:\\n- [Custom models and clients](/blog/2024/01/26/Custom-Models) can be used as backends of an agent, such as Huggingface models and inference APIs.\\n- [OpenAI assistant](/blog/2023/11/13/OAI-assistants) can be used as the backend of an agent (GPTAssistantAgent). It will be nice to reimplement it as a custom client to increase the compatibility with ConversableAgent.\\n- [Multimodality](/blog/2023/11/06/LMM-Agent). LMM models like GPT-4V can be used to provide vision to an agent, and accomplish interesting multimodal tasks by conversing with other agents, including advanced image analysis, figure generation, and automatic iterative improvement in image generation.\\n\\n![multimodal](img/dalle_gpt4v.png)\\n\\nThe above only covers a subset of new features and roadmap. There are many other interesting new features, integration examples or sample apps:\\n- new features like stateful code execution, [tool decorators](/docs/Use-Cases/agent_chat#tool-calling), [long context handling](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_capability_long_context_handling.ipynb), [web agents](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_surfer.ipynb).\\n- integration examples like using [guidance](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_guidance.ipynb) to generate structured response.\\n- sample apps like [AutoAnny](/blog/2024/02/02/AutoAnny).\\n\\n## Call for Help\\n\\nI appreciate the huge support from more than 14K members in the Discord community.\\nDespite all the exciting progress, there are tons of open problems, issues and feature requests awaiting to be solved.\\nWe need more help to tackle the challenging problems and accelerate the development.\\nYou\'re all welcome to join our community and define the future of AI agents together.\\n\\n*Do you find this update helpful? Would you like to join force? Please join our [Discord](https://discord.gg/pAbnFJrkgZ) server for discussion.*\\n\\n![contributors](img/contributors.png)"},{"id":"/2024/02/29/StateFlow","metadata":{"permalink":"/autogen/blog/2024/02/29/StateFlow","source":"@site/blog/2024-02-29-StateFlow/index.mdx","title":"StateFlow - Build LLM Workflows with Customized State-Oriented Transition Function in GroupChat","description":"TL;DR:: Introduce Stateflow, a task-solving paradigm that conceptualizes complex task-solving processes backed by LLMs as state machines.","date":"2024-02-29T00:00:00.000Z","formattedDate":"February 29, 2024","tags":[{"label":"LLM","permalink":"/autogen/blog/tags/llm"},{"label":"research","permalink":"/autogen/blog/tags/research"}],"readingTime":6.39,"hasTruncateMarker":false,"authors":[{"name":"Yiran Wu","title":"PhD student at Pennsylvania State University","url":"https://github.com/kevin666aa","imageURL":"https://github.com/kevin666aa.png","key":"yiranwu"}],"frontMatter":{"title":"StateFlow - Build LLM Workflows with Customized State-Oriented Transition Function in GroupChat","authors":"yiranwu","tags":["LLM","research"]},"unlisted":false,"prevItem":{"title":"What\'s New in AutoGen?","permalink":"/autogen/blog/2024/03/03/AutoGen-Update"},"nextItem":{"title":"FSM Group Chat -- User-specified agent transitions","permalink":"/autogen/blog/2024/02/11/FSM-GroupChat"}},"content":"**TL;DR:**: Introduce Stateflow, a task-solving paradigm that conceptualizes complex task-solving processes backed by LLMs as state machines.\\nIntroduce how to use GroupChat to realize such an idea with a customized speaker selection function.\\n\\nThe paper is coming soon!\\n\\n## Introduction\\nLLMs have increasingly been employed to solve complex, multi-step tasks, e.g., tasks that require a sequence of complex reasoning\\nand interacting with external environments and tools. To facilitate the development of such applications, we introduce **StateFlow**, a new paradigm\\nthat conceptualizes complex task-solving processes backed by LLMs as state machines. With proper construction of states and definition of\\nstate transitions, we can ground the progress of task-solving, ensuring clear tracking and management of LLMs\' responses throughout the task-solving process.\\n\\n## StateFlow\\nFinite State machines (FSMs) are used as control systems to monitor practical applications, such as traffic light control.\\nA defined state machine is a model of behavior that decides what to do based on current status. A state represents one situation that the state machine might be in, and all states cover all possible situations of the FSM.\\nDrawing from this concept, we want to use state machines to model the task-solving process of LLMs. When using an LLM to solve a task, each step of the task-solving process can be mapped to a state.\\nFor example, the process starts at the *Init* state when the task is given. When reaching a state, a sequence of output functions is called to add content to the context history, including sending a specific instruction, using a tool, or calling the LLM itself.\\nBased on the current state and context history, the **StateFlow** model determines the next state to transit to. The task-solving process progresses by transitioning through different states and performing corresponding actions and ends until a final state is reached.\\nEssentially, we are sending different instructions to an LLM to ask it to perform different actions based on its current status.\\n\\nIn **StateFlow**, we construct a state machine to control a single LLM, sending different instructions to it at different states.\\nWe also provide an agent view of our framework, **SF_Agent**, that can use different LLM agents to perform actions at different states.\\nIn this case, we don\'t need to add instructions to the context history and call the LLM. Instead, we construct individual agents with pre-set instructions and (potentially) different LLMs.\\nAutoGen is the perfect platform to implement **SF_Agent**.\\n\\n## Experiments\\nWe evaluate **StateFlow** on the SQL task and Bash task from the InterCode benchmark, with both GPT-3.5-Turbo and GPT-4.\\nWe construct different **StateFlow** models for each task (See the figure below). But note that most of the states are shared between the two tasks.\\nWithin each state, we define a sequence of actions to be performed. The most common action sequence is P->M->E, meaning we first send a prompt, then call the LLM to generate a response, and finally execute commands from the response.\\n![Intercode Example](./img/intercode.png)\\n\\nWe record different metrics for a comprehensive comparison. The \'SR\' (success rate) and \'rewards\' measure the performance,\\n\'Turns represents a number of interactions with the environment, and \'Error Rate\' represents the percentage of errors of the commands executed.\\nWe also record the cost and token counts to show the LLM usage.\\n\\nWe compare with the following baselines:\\n(1) ReAct: a few-shot prompting method that prompts the model to generate thoughts and actions.\\n(2) Plan & Solve: A two-step prompting strategy to first ask the model to propose a plan and then execute it.\\n\\nWe show the results of the Bash task in the figure below:\\n\\n![Bash Result](./img/bash_result.png)\\n\\nOur evaluation demonstrates the advantages of **StateFlow** and **SF_Agent** over existing methods in terms of both effectiveness and efficiency.\\nFor example, in the Bash task with GPT-4, **SF_Agent** improves the success rate by 8% and has 4x less cost compared to ReAct prompting.\\n\\n\\n## Implement StateFlow With GroupChat\\nWe illustrate how to build **StateFlow** with GroupChat. Previous blog [FSM Group Chat](/blog/2024/02/11/FSM-GroupChat/)\\nintroduces a new feature of GroupChat that allows us to input a transition graph to constrain agent transitions.\\nIt requires us to use natural language to describe the transition conditions of the FSM in the agent\'s `description` parameter, and then use an LLM to take in the description and make decisions of the next agent.\\nIn this blog, we take advantages of a customized speaker selection function passed to the `speaker_selection_method` of the `GroupChat` object.\\nThis function allows us to custom the transition logic between agents, and can be used together with the transition graph introduced in FSM Group Chat. The current StateFlow implementation also allows the user to override the transition graph.\\nThese transitions can be based on the current speaker and static checking of the context history (for example, checking if \'Error\' is in the last message).\\n\\nWe present an example of how to build a state-oriented workflow using GroupChat.\\nWe define a custom speaker selection function to be passed into the `speaker_selection_method` parameter of the GroupChat.\\nHere, the task is to retrieve research papers related to a given topic, and create a markdown table for these papers.\\n\\n![StateFlow Example](./img/sf_example_1.png)\\n\\n\\nWe define the following agents:\\n- Initializer: Start the workflow by sending a task.\\n- Coder: Retrieve papers from the internet by writing code.\\n- Executor: Execute the code.\\n- Scientist: Read the papers and write a summary.\\n\\n\\n```python\\n# Define the agents, the code is for illustration purposes and is not executable.\\ninitializer = autogen.UserProxyAgent(\\n   name=\\"Init\\"\\n)\\ncoder = autogen.AssistantAgent(\\n   name=\\"Coder\\",\\n   system_message=\\"\\"\\"You are the Coder. Write Python Code to retrieve papers from arxiv.\\"\\"\\"\\n)\\nexecutor = autogen.UserProxyAgent(\\n   name=\\"Executor\\",\\n   system_message=\\"Executor. Execute the code written by the Coder and report the result.\\",\\n)\\nscientist = autogen.AssistantAgent(\\n   name=\\"Scientist\\",\\n   system_message=\\"\\"\\"You are the Scientist. Please categorize papers after seeing their abstracts printed and create a markdown table with Domain, Title, Authors, Summary and Link. Return \'TERMINATE\' in the end.\\"\\"\\",\\n)\\n```\\n\\nIn the Figure, we define a simple workflow for research with 4 states: Init, Retrieve, Reserach and End. Within each state, we will call different agents to perform the tasks.\\n- Init: We use the initializer to start the workflow.\\n- Retrieve: We will first call the coder to write code and then call the executor to execute the code.\\n- Research: We will call the scientist to read the papers and write a summary.\\n- End: We will end the workflow.\\n\\n\\nThen we define a customized function to control the transition between states:\\n```python\\ndef state_transition(last_speaker, groupchat):\\n   messages = groupchat.messages\\n\\n   if last_speaker is initializer:\\n       # init -> retrieve\\n       return coder\\n   elif last_speaker is coder:\\n       # retrieve: action 1 -> action 2\\n       return executor\\n   elif last_speaker is executor:\\n       if messages[-1][\\"content\\"] == \\"exitcode: 1\\":\\n           # retrieve --(execution failed)--\x3e retrieve\\n           return coder\\n       else:\\n           # retrieve --(execution success)--\x3e research\\n           return scientist\\n   elif last_speaker == \\"Scientist\\":\\n       # research -> end\\n       return None\\n\\n\\ngroupchat = autogen.GroupChat(\\n   agents=[initializer, coder, executor, scientist],\\n   messages=[],\\n   max_round=20,\\n   speaker_selection_method=state_transition,\\n)\\n```\\n\\nWe recommend implementing the transition logic for each speaker in the customized function. In analogy to a state machine, a state transition function determines the next state based on the current state and input.\\nInstead of returning an `Agent` class representing the next speaker, we can also return a string from `[\'auto\', \'manual\', \'random\', \'round_robin\']` to select a default method to use.\\nFor example, we can always default to the built-in `auto` method to employ a LLM-based group chat manager to select the next speaker.\\nWhen returning `None`, the group chat will terminate. Note that some of the transitions, such as \\"initializer\\" -> \\"coder\\" can be defined with the transition graph.\\n\\n\\n## For Further Reading\\n* [StateFlow notebook](/docs/notebooks/agentchat_groupchat_stateflow)\\n* [GroupChat with Customized Speaker Selection notebook](/docs/notebooks/agentchat_groupchat_customized)\\n* [FSM Group Chat](/blog/2024/02/11/FSM-GroupChat/)\\n* [Documentation about `autogen`](/docs/Getting-Started)"},{"id":"/2024/02/11/FSM-GroupChat","metadata":{"permalink":"/autogen/blog/2024/02/11/FSM-GroupChat","source":"@site/blog/2024-02-11-FSM-GroupChat/index.mdx","title":"FSM Group Chat -- User-specified agent transitions","description":"FSM Group Chat","date":"2024-02-11T00:00:00.000Z","formattedDate":"February 11, 2024","tags":[{"label":"AutoGen","permalink":"/autogen/blog/tags/auto-gen"}],"readingTime":5.655,"hasTruncateMarker":false,"authors":[{"name":"Joshua Kim","title":"AI Freelancer at SpectData","url":"https://github.com/joshkyh/","imageURL":"https://github.com/joshkyh.png","key":"joshkyh"},{"name":"Yishen Sun","title":"Data Scientist at PingCAP LAB","url":"https://github.com/freedeaths/","imageURL":"https://github.com/freedeaths.png","key":"freedeaths"}],"frontMatter":{"title":"FSM Group Chat -- User-specified agent transitions","authors":["joshkyh","freedeaths"],"tags":["AutoGen"]},"unlisted":false,"prevItem":{"title":"StateFlow - Build LLM Workflows with Customized State-Oriented Transition Function in GroupChat","permalink":"/autogen/blog/2024/02/29/StateFlow"},"nextItem":{"title":"Anny: Assisting AutoGen Devs Via AutoGen","permalink":"/autogen/blog/2024/02/02/AutoAnny"}},"content":"![FSM Group Chat](img/teaser.jpg)\\r\\n<p align=\\"center\\"><em>Finite State Machine (FSM) Group Chat allows the user to constrain agent transitions.</em></p>\\r\\n\\r\\n\\r\\n## TL;DR\\r\\nRecently, FSM Group Chat is released that allows the user to input a transition graph to constrain agent transitions. This is useful as the number of agents increases because the number of transition pairs (N choose 2 combinations) increases exponentially increasing the risk of sub-optimal transitions, which leads to wastage of tokens and/or poor outcomes.\\r\\n\\r\\n## Possible use-cases for transition graph\\r\\n1. One-pass workflow, i.e., we want each agent to only have one pass at the problem, Agent A -> B -> C.\\r\\n2. Decision tree flow, like a decision tree, we start with a root node (agent), and flow down the decision tree with agents being nodes. For example, if the query is a SQL query, hand over to the SQL agent, else if the query is a RAG query, hand over to the RAG agent.\\r\\n3. Sequential Team Ops. Suppose we have a team of 3 developer agents, each responsible for a different GitHub repo. We also have a team of business analyst that discuss and debate the overall goal of the user. We could have the manager agent of the developer team speak to the manager agent of the business analysis team. That way, the discussions are more focused team-wise, and better outcomes can be expected.\\r\\n\\r\\nNote that we are not enforcing a directed acyclic graph; the user can specify the graph to be acyclic, but cyclic workflows can also be useful to iteratively work on a problem, and layering additional analysis onto the solution.\\r\\n\\r\\n\\r\\n## Usage Guide\\r\\nWe have added two parameters `allowed_or_disallowed_speaker_transitions` and `speaker_transitions_type`.\\r\\n- `allowed_or_disallowed_speaker_transitions`: is a dictionary with the type expectation of `{Agent: [Agent]}`. The key refers to the source agent, while the value(s) in the list refers to the target agent(s). If none, a fully connection graph is assumed.\\r\\n- `speaker_transitions_type`: is a string with the type expectation of string, and specifically, one of [\\"allowed\\", \\"disallowed\\"]. We wanted the user to be able to supply a dictionary of allowed or disallowed transitions to improve the ease of use. In the code base, we would invert the disallowed transition into a allowed transition dictionary `allowed_speaker_transitions_dict`.\\r\\n\\r\\n\\r\\n### Application of the FSM Feature\\r\\n\\r\\nA quick demonstration of how to initiate a FSM-based `GroupChat` in the `AutoGen` framework. In this demonstration, if we consider each agent as a state, and each agent speaks according to certain conditions. For example, User always initiates the task first, followed by Planner creating a plan. Then Engineer and Executor work alternately, with Critic intervening when necessary, and after Critic, only Planner should revise additional plans. Each state can only exist at a time, and there are transition conditions between states. Therefore, GroupChat can be well abstracted as a Finite-State Machine (FSM).\\r\\n\\r\\n![visualization](img/FSM_logic.png)\\r\\n\\r\\n\\r\\n### Usage\\r\\n\\r\\n0. Pre-requisites\\r\\n```bash\\r\\npip install autogen[graph]\\r\\n```\\r\\n\\r\\n1. Import dependencies\\r\\n\\r\\n    ```python\\r\\n    from autogen.agentchat import GroupChat, AssistantAgent, UserProxyAgent, GroupChatManager\\r\\n    from autogen.oai.openai_utils import config_list_from_dotenv\\r\\n    ```\\r\\n2. Configure LLM parameters\\r\\n\\r\\n    ```python\\r\\n    # Please feel free to change it as you wish\\r\\n    config_list = config_list_from_dotenv(\\r\\n            dotenv_file_path=\'.env\',\\r\\n            model_api_key_map={\'gpt-4-1106-preview\':\'OPENAI_API_KEY\'},\\r\\n            filter_dict={\\r\\n                \\"model\\": {\\r\\n                    \\"gpt-4-1106-preview\\"\\r\\n                }\\r\\n            }\\r\\n        )\\r\\n\\r\\n    gpt_config = {\\r\\n        \\"cache_seed\\": None,\\r\\n        \\"temperature\\": 0,\\r\\n        \\"config_list\\": config_list,\\r\\n        \\"timeout\\": 100,\\r\\n    }\\r\\n    ```\\r\\n\\r\\n3. Define the task\\r\\n\\r\\n    ```python\\r\\n    # describe the task\\r\\n    task = \\"\\"\\"Add 1 to the number output by the previous role. If the previous number is 20, output \\"TERMINATE\\".\\"\\"\\"\\r\\n    ```\\r\\n\\r\\n4. Define agents\\r\\n\\r\\n    ```python\\r\\n    # agents configuration\\r\\n    engineer = AssistantAgent(\\r\\n        name=\\"Engineer\\",\\r\\n        llm_config=gpt_config,\\r\\n        system_message=task,\\r\\n        description=\\"\\"\\"I am **ONLY** allowed to speak **immediately** after `Planner`, `Critic` and `Executor`.\\r\\n    If the last number mentioned by `Critic` is not a multiple of 5, the next speaker must be `Engineer`.\\r\\n    \\"\\"\\"\\r\\n    )\\r\\n\\r\\n    planner = AssistantAgent(\\r\\n        name=\\"Planner\\",\\r\\n        system_message=task,\\r\\n        llm_config=gpt_config,\\r\\n        description=\\"\\"\\"I am **ONLY** allowed to speak **immediately** after `User` or `Critic`.\\r\\n    If the last number mentioned by `Critic` is a multiple of 5, the next speaker must be `Planner`.\\r\\n    \\"\\"\\"\\r\\n    )\\r\\n\\r\\n    executor = AssistantAgent(\\r\\n        name=\\"Executor\\",\\r\\n        system_message=task,\\r\\n        is_termination_msg=lambda x: x.get(\\"content\\", \\"\\") and x.get(\\"content\\", \\"\\").rstrip().endswith(\\"FINISH\\"),\\r\\n        llm_config=gpt_config,\\r\\n        description=\\"\\"\\"I am **ONLY** allowed to speak **immediately** after `Engineer`.\\r\\n    If the last number mentioned by `Engineer` is a multiple of 3, the next speaker can only be `Executor`.\\r\\n    \\"\\"\\"\\r\\n    )\\r\\n\\r\\n    critic = AssistantAgent(\\r\\n        name=\\"Critic\\",\\r\\n        system_message=task,\\r\\n        llm_config=gpt_config,\\r\\n        description=\\"\\"\\"I am **ONLY** allowed to speak **immediately** after `Engineer`.\\r\\n    If the last number mentioned by `Engineer` is not a multiple of 3, the next speaker can only be `Critic`.\\r\\n    \\"\\"\\"\\r\\n    )\\r\\n\\r\\n    user_proxy = UserProxyAgent(\\r\\n        name=\\"User\\",\\r\\n        system_message=task,\\r\\n        code_execution_config=False,\\r\\n        human_input_mode=\\"NEVER\\",\\r\\n        llm_config=False,\\r\\n        description=\\"\\"\\"\\r\\n    Never select me as a speaker.\\r\\n    \\"\\"\\"\\r\\n    )\\r\\n    ```\\r\\n\\r\\n    1. Here, I have configured the `system_messages` as \\"task\\" because every agent should know what it needs to do. In this example, each agent has the same task, which is to count in sequence.\\r\\n    2. **The most important point is the `description` parameter, where I have used natural language to describe the transition conditions of the FSM. Because the manager knows which agents are available next based on the constraints of the graph, I describe in the `description` field of each candidate agent when it can speak, effectively describing the transition conditions in the FSM.**\\r\\n\\r\\n5. Define the graph\\r\\n\\r\\n    ```python\\r\\n    graph_dict = {}\\r\\n    graph_dict[user_proxy] = [planner]\\r\\n    graph_dict[planner] = [engineer]\\r\\n    graph_dict[engineer] = [critic, executor]\\r\\n    graph_dict[critic] = [engineer, planner]\\r\\n    graph_dict[executor] = [engineer]\\r\\n    ```\\r\\n\\r\\n    1. **The graph here and the transition conditions mentioned above together form a complete FSM. Both are essential and cannot be missing.**\\r\\n    2. You can visualize it as you wish, which is shown as follows\\r\\n\\r\\n    ![visualization](img/FSM_of_multi-agents.png)\\r\\n\\r\\n6. Define a `GroupChat` and a `GroupChatManager`\\r\\n\\r\\n    ```python\\r\\n    agents = [user_proxy, engineer, planner, executor, critic]\\r\\n\\r\\n    # create the groupchat\\r\\n    group_chat = GroupChat(agents=agents, messages=[], max_round=25, allowed_or_disallowed_speaker_transitions=graph_dict, allow_repeat_speaker=None, speaker_transitions_type=\\"allowed\\")\\r\\n\\r\\n    # create the manager\\r\\n    manager = GroupChatManager(\\r\\n        groupchat=group_chat,\\r\\n        llm_config=gpt_config,\\r\\n        is_termination_msg=lambda x: x.get(\\"content\\", \\"\\") and x.get(\\"content\\", \\"\\").rstrip().endswith(\\"TERMINATE\\"),\\r\\n        code_execution_config=False,\\r\\n    )\\r\\n    ```\\r\\n\\r\\n7. Initiate the chat\\r\\n\\r\\n    ```python\\r\\n    # initiate the task\\r\\n    user_proxy.initiate_chat(\\r\\n        manager,\\r\\n        message=\\"1\\",\\r\\n        clear_history=True\\r\\n    )\\r\\n    ```\\r\\n\\r\\n8. You may get the following output(I deleted the ignorable warning):\\r\\n\\r\\n    ```\\r\\n    User (to chat_manager):\\r\\n\\r\\n    1\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Planner (to chat_manager):\\r\\n\\r\\n    2\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Engineer (to chat_manager):\\r\\n\\r\\n    3\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Executor (to chat_manager):\\r\\n\\r\\n    4\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Engineer (to chat_manager):\\r\\n\\r\\n    5\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Critic (to chat_manager):\\r\\n\\r\\n    6\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Engineer (to chat_manager):\\r\\n\\r\\n    7\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Critic (to chat_manager):\\r\\n\\r\\n    8\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Engineer (to chat_manager):\\r\\n\\r\\n    9\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Executor (to chat_manager):\\r\\n\\r\\n    10\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Engineer (to chat_manager):\\r\\n\\r\\n    11\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Critic (to chat_manager):\\r\\n\\r\\n    12\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Engineer (to chat_manager):\\r\\n\\r\\n    13\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Critic (to chat_manager):\\r\\n\\r\\n    14\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Engineer (to chat_manager):\\r\\n\\r\\n    15\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Executor (to chat_manager):\\r\\n\\r\\n    16\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Engineer (to chat_manager):\\r\\n\\r\\n    17\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Critic (to chat_manager):\\r\\n\\r\\n    18\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Engineer (to chat_manager):\\r\\n\\r\\n    19\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Critic (to chat_manager):\\r\\n\\r\\n    20\\r\\n\\r\\n    --------------------------------------------------------------------------------\\r\\n    Planner (to chat_manager):\\r\\n\\r\\n    TERMINATE\\r\\n    ```\\r\\n\\r\\n## Notebook examples\\r\\nMore examples can be found in the [notebook](https://microsoft.github.io/autogen/docs/notebooks/agentchat_groupchat_finite_state_machine/). The notebook includes more examples of possible transition paths such as (1) hub and spoke, (2) sequential team operations, and (3) think aloud and debate. It also uses the function `visualize_speaker_transitions_dict` from `autogen.graph_utils` to visualize the various graphs."},{"id":"/2024/02/02/AutoAnny","metadata":{"permalink":"/autogen/blog/2024/02/02/AutoAnny","source":"@site/blog/2024-02-02-AutoAnny/index.mdx","title":"Anny: Assisting AutoGen Devs Via AutoGen","description":"Anny is a Discord bot powered by AutoGen to help AutoGen\'s Discord server.","date":"2024-02-02T00:00:00.000Z","formattedDate":"February 2, 2024","tags":[{"label":"AutoGen","permalink":"/autogen/blog/tags/auto-gen"}],"readingTime":1.61,"hasTruncateMarker":false,"authors":[{"name":"Gagan Bansal","title":"Senior Researcher at Microsoft Research","url":"https://www.linkedin.com/in/gagan-bansal/","imageURL":"https://github.com/gagb.png","key":"gagb"}],"frontMatter":{"title":"Anny: Assisting AutoGen Devs Via AutoGen","authors":["gagb"],"tags":["AutoGen"]},"unlisted":false,"prevItem":{"title":"FSM Group Chat -- User-specified agent transitions","permalink":"/autogen/blog/2024/02/11/FSM-GroupChat"},"nextItem":{"title":"AutoGen with Custom Models: Empowering Users to Use Their Own Inference Mechanism","permalink":"/autogen/blog/2024/01/26/Custom-Models"}},"content":"import AutoAnnyLogo from \'./img/AutoAnnyLogo.jpg\';\\n\\n<div style={{ display: \\"flex\\", justifyContent: \\"center\\" }}>\\n  <img src={AutoAnnyLogo} alt=\\"AutoAnny Logo\\" style={{ width: \\"250px\\" }} />\\n</div>\\n<p align=\\"center\\"><em>Anny is a Discord bot powered by AutoGen to help AutoGen\'s Discord server.</em></p>\\n\\n\\n## TL;DR\\n\\nWe are adding a new sample app called Anny-- a simple Discord bot powered\\nby AutoGen that\'s intended to assist AutoGen Devs. See [`samples/apps/auto-anny`](https://github.com/microsoft/autogen/tree/main/samples/apps/auto-anny) for details.\\n\\n## Introduction\\n\\nOver the past few months, AutoGen has experienced large growth in number of users and number of community requests and feedback.\\nHowever, accommodating this demand and feedback requires manually sifting through issues, PRs, and discussions on GitHub, as well as managing messages\\n from AutoGen\'s 14000+ community members on Discord. There are many tasks that AutoGen\'s developer community has to perform everyday,\\n  but here are some common ones:\\n- Answering questions\\n- Recognizing and prioritizing bugs and features\\n- Maintaining responsiveness for our incredible community\\n- Tracking growth\\n\\nThis requires a significant amount of effort. Agentic-workflows and interfaces promise adding\\n immense value-added automation for many tasks, so we thought *why don\'t we use AutoGen to make\\n  our lives easier?!* So we\'re turning to automation to help us and allow\\n   us to focus on what\'s most critical.\\n\\n## Current Version of Anny\\nThe current version of Anny is pretty simple -- it uses the Discord API and AutoGen to enable a bot\\n that can respond to a set of commands.\\n\\nFor example, it supports commands like `/heyanny help` for command listing, `/heyanny ghstatus` for\\n GitHub activity summary, `/heyanny ghgrowth` for GitHub repo growth indicators, and `/heyanny ghunattended` for listing unattended issues and PRs. Most of these commands use multiple AutoGen agents to accomplish these task.\\n\\nTo use Anny, please follow instructions in [`samples/apps/auto-anny`](https://github.com/microsoft/autogen/tree/main/samples/apps/auto-anny).\\n\\n## It\'s Not Just for AutoGen\\nIf you\'re an open-source developer managing your own project, you can probably relate to our challenges. We invite you to check out Anny and contribute to its development and roadmap."},{"id":"/2024/01/26/Custom-Models","metadata":{"permalink":"/autogen/blog/2024/01/26/Custom-Models","source":"@site/blog/2024-01-26-Custom-Models/index.mdx","title":"AutoGen with Custom Models: Empowering Users to Use Their Own Inference Mechanism","description":"TL;DR","date":"2024-01-26T00:00:00.000Z","formattedDate":"January 26, 2024","tags":[{"label":"AutoGen","permalink":"/autogen/blog/tags/auto-gen"}],"readingTime":5.455,"hasTruncateMarker":false,"authors":[{"name":"Olga Vrousgou","title":"Senior Software Engineer at Microsoft Research","url":"https://github.com/olgavrou/","imageURL":"https://github.com/olgavrou.png","key":"olgavrou"}],"frontMatter":{"title":"AutoGen with Custom Models: Empowering Users to Use Their Own Inference Mechanism","authors":["olgavrou"],"tags":["AutoGen"]},"unlisted":false,"prevItem":{"title":"Anny: Assisting AutoGen Devs Via AutoGen","permalink":"/autogen/blog/2024/02/02/AutoAnny"},"nextItem":{"title":"AutoGenBench -- A Tool for Measuring and Evaluating AutoGen Agents","permalink":"/autogen/blog/2024/01/25/AutoGenBench"}},"content":"## TL;DR\\n\\nAutoGen now supports custom models! This feature empowers users to define and load their own models, allowing for a more flexible and personalized inference mechanism. By adhering to a specific protocol, you can integrate your custom model for use with AutoGen and respond to prompts any way needed by using any model/API call/hardcoded response you want.\\n\\n**NOTE: Depending on what model you use, you may need to play with the default prompts of the Agent\'s**\\n\\n## Quickstart\\n\\nAn interactive and easy way to get started is by following the notebook [here](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_custom_model.ipynb) which loads a local model from HuggingFace into AutoGen and uses it for inference, and making changes to the class provided.\\n\\n### Step 1: Create the custom model client class\\n\\nTo get started with using custom models in AutoGen, you need to create a model client class that adheres to the `ModelClient` protocol defined in `client.py`. The new model client class should implement these methods:\\n\\n- `create()`: Returns a response object that implements the `ModelClientResponseProtocol` (more details in the Protocol section).\\n- `message_retrieval()`: Processes the response object and returns a list of strings or a list of message objects (more details in the Protocol section).\\n- `cost()`: Returns the cost of the response.\\n- `get_usage()`: Returns a dictionary with keys from `RESPONSE_USAGE_KEYS = [\\"prompt_tokens\\", \\"completion_tokens\\", \\"total_tokens\\", \\"cost\\", \\"model\\"]`.\\n\\nE.g. of a bare bones dummy custom class:\\n\\n```python\\nclass CustomModelClient:\\n    def __init__(self, config, **kwargs):\\n        print(f\\"CustomModelClient config: {config}\\")\\n\\n    def create(self, params):\\n        num_of_responses = params.get(\\"n\\", 1)\\n\\n        # can create my own data response class\\n        # here using SimpleNamespace for simplicity\\n        # as long as it adheres to the ModelClientResponseProtocol\\n\\n        response = SimpleNamespace()\\n        response.choices = []\\n        response.model = \\"model_name\\" # should match the OAI_CONFIG_LIST registration\\n\\n        for _ in range(num_of_responses):\\n            text = \\"this is a dummy text response\\"\\n            choice = SimpleNamespace()\\n            choice.message = SimpleNamespace()\\n            choice.message.content = text\\n            choice.message.function_call = None\\n            response.choices.append(choice)\\n        return response\\n\\n    def message_retrieval(self, response):\\n        choices = response.choices\\n        return [choice.message.content for choice in choices]\\n\\n    def cost(self, response) -> float:\\n        response.cost = 0\\n        return 0\\n\\n    @staticmethod\\n    def get_usage(response):\\n        return {}\\n```\\n\\n### Step 2: Add the configuration to the OAI_CONFIG_LIST\\n\\nThe field that is necessary is setting `model_client_cls` to the name of the new class (as a string) `\\"model_client_cls\\":\\"CustomModelClient\\"`. Any other fields will be forwarded to the class constructor, so you have full control over what parameters to specify and how to use them. E.g.:\\n\\n```json\\n{\\n    \\"model\\": \\"Open-Orca/Mistral-7B-OpenOrca\\",\\n    \\"model_client_cls\\": \\"CustomModelClient\\",\\n    \\"device\\": \\"cuda\\",\\n    \\"n\\": 1,\\n    \\"params\\": {\\n        \\"max_length\\": 1000,\\n    }\\n}\\n```\\n\\n### Step 3: Register the new custom model to the agent that will use it\\n\\nIf a configuration with the field `\\"model_client_cls\\":\\"<class name>\\"` has been added to an Agent\'s config list, then the corresponding model with the desired class must be registered after the agent is created and before the conversation is initialized:\\n\\n```python\\nmy_agent.register_model_client(model_client_cls=CustomModelClient, [other args that will be forwarded to CustomModelClient constructor])\\n```\\n\\n`model_client_cls=CustomModelClient` arg matches the one specified in the `OAI_CONFIG_LIST` and `CustomModelClient` is the class that adheres to the `ModelClient` protocol (more details on the protocol below).\\n\\nIf the new model client is in the config list but not registered by the time the chat is initialized, then an error will be raised.\\n\\n## Protocol details\\n\\nA custom model class can be created in many ways, but needs to adhere to the `ModelClient` protocol and response structure which is defined in `client.py` and shown below.\\n\\nThe response protocol is currently using the minimum required fields from the autogen codebase that match the OpenAI response structure. Any response protocol that matches the OpenAI response structure will probably be more resilient to future changes, but we are starting off with minimum requirements to make adpotion of this feature easier.\\n\\n```python\\n\\nclass ModelClient(Protocol):\\n    \\"\\"\\"\\n    A client class must implement the following methods:\\n    - create must return a response object that implements the ModelClientResponseProtocol\\n    - cost must return the cost of the response\\n    - get_usage must return a dict with the following keys:\\n        - prompt_tokens\\n        - completion_tokens\\n        - total_tokens\\n        - cost\\n        - model\\n\\n    This class is used to create a client that can be used by OpenAIWrapper.\\n    The response returned from create must adhere to the ModelClientResponseProtocol but can be extended however needed.\\n    The message_retrieval method must be implemented to return a list of str or a list of messages from the response.\\n    \\"\\"\\"\\n\\n    RESPONSE_USAGE_KEYS = [\\"prompt_tokens\\", \\"completion_tokens\\", \\"total_tokens\\", \\"cost\\", \\"model\\"]\\n\\n    class ModelClientResponseProtocol(Protocol):\\n        class Choice(Protocol):\\n            class Message(Protocol):\\n                content: Optional[str]\\n\\n            message: Message\\n\\n        choices: List[Choice]\\n        model: str\\n\\n    def create(self, params) -> ModelClientResponseProtocol:\\n        ...\\n\\n    def message_retrieval(\\n        self, response: ModelClientResponseProtocol\\n    ) -> Union[List[str], List[ModelClient.ModelClientResponseProtocol.Choice.Message]]:\\n        \\"\\"\\"\\n        Retrieve and return a list of strings or a list of Choice.Message from the response.\\n\\n        NOTE: if a list of Choice.Message is returned, it currently needs to contain the fields of OpenAI\'s ChatCompletion Message object,\\n        since that is expected for function or tool calling in the rest of the codebase at the moment, unless a custom agent is being used.\\n        \\"\\"\\"\\n        ...\\n\\n    def cost(self, response: ModelClientResponseProtocol) -> float:\\n        ...\\n\\n    @staticmethod\\n    def get_usage(response: ModelClientResponseProtocol) -> Dict:\\n        \\"\\"\\"Return usage summary of the response using RESPONSE_USAGE_KEYS.\\"\\"\\"\\n        ...\\n\\n```\\n\\n## Troubleshooting steps\\n\\nIf something doesn\'t work then run through the checklist:\\n\\n- Make sure you have followed the client protocol and client response protocol when creating the custom model class\\n  - `create()` method: `ModelClientResponseProtocol` must be followed when returning an inference response during `create` call.\\n  - `message_retrieval()` method: returns a list of strings or a list of message objects. If a list of message objects is returned, they currently must contain the fields of OpenAI\'s ChatCompletion Message object, since that is expected for function or tool calling in the rest of the codebase at the moment, unless a custom agent is being used.\\n  - `cost()`method: returns an integer, and if you don\'t care about cost tracking you can just return `0`.\\n  - `get_usage()`: returns a dictionary, and if you don\'t care about usage tracking you can just return an empty dictionary `{}`.\\n- Make sure you have a corresponding entry in the `OAI_CONFIG_LIST` and that that entry has the `\\"model_client_cls\\":\\"<custom-model-class-name>\\"` field.\\n- Make sure you have registered the client using the corresponding config entry and your new class `agent.register_model_client(model_client_cls=<class-of-custom-model>, [other optional args])`\\n- Make sure that all of the custom models defined in the `OAI_CONFIG_LIST` have been registered.\\n- Any other troubleshooting might need to be done in the custom code itself.\\n\\n## Conclusion\\n\\nWith the ability to use custom models, AutoGen now offers even more flexibility and power for your AI applications. Whether you\'ve trained your own model or want to use a specific pre-trained model, AutoGen can accommodate your needs. Happy coding!"},{"id":"/2024/01/25/AutoGenBench","metadata":{"permalink":"/autogen/blog/2024/01/25/AutoGenBench","source":"@site/blog/2024-01-25-AutoGenBench/index.mdx","title":"AutoGenBench -- A Tool for Measuring and Evaluating AutoGen Agents","description":"AutoGenBench","date":"2024-01-25T00:00:00.000Z","formattedDate":"January 25, 2024","tags":[{"label":"AutoGen","permalink":"/autogen/blog/tags/auto-gen"}],"readingTime":6.595,"hasTruncateMarker":false,"authors":[{"name":"Adam Fourney","title":"Principal Researcher Microsoft Research","url":"https://www.adamfourney.com","imageURL":"https://github.com/afourney.png","key":"afourney"},{"name":"Qingyun Wu","title":"Assistant Professor at the Pennsylvania State University","url":"https://qingyun-wu.github.io/","imageURL":"https://github.com/qingyun-wu.png","key":"qingyunwu"}],"frontMatter":{"title":"AutoGenBench -- A Tool for Measuring and Evaluating AutoGen Agents","authors":["afourney","qingyunwu"],"tags":["AutoGen"]},"unlisted":false,"prevItem":{"title":"AutoGen with Custom Models: Empowering Users to Use Their Own Inference Mechanism","permalink":"/autogen/blog/2024/01/26/Custom-Models"},"nextItem":{"title":"Code execution is now by default inside docker container","permalink":"/autogen/blog/2024/01/23/Code-execution-in-docker"}},"content":"![AutoGenBench](img/teaser.jpg)\\r\\n<p align=\\"center\\"><em>AutoGenBench is a standalone tool for evaluating AutoGen agents and workflows on common benchmarks.</em></p>\\r\\n\\r\\n\\r\\n## TL;DR\\r\\nToday we are releasing AutoGenBench - a tool for evaluating AutoGen agents and workflows on established LLM and agentic benchmarks.\\r\\n\\r\\nAutoGenBench is a standalone command line tool, installable from PyPI, which handles downloading, configuring, running, and reporting supported benchmarks. AutoGenBench works best when run alongside Docker, since it uses Docker to isolate tests from one another.\\r\\n\\r\\n* See the [AutoGenBench README](https://github.com/microsoft/autogen/blob/main/samples/tools/autogenbench/README.md) for information on installation and running benchmarks.\\r\\n* See the [AutoGenBench CONTRIBUTING guide](https://github.com/microsoft/autogen/blob/main/samples/tools/autogenbench/CONTRIBUTING.md) for information on developing or contributing benchmark datasets.\\r\\n\\r\\n\\r\\n### Quick Start\\r\\nGet started quickly by running the following commands in a bash terminal.\\r\\n\\r\\n*Note:* You may need to adjust the path to the `OAI_CONFIG_LIST`, as appropriate.\\r\\n```sh\\r\\nexport OAI_CONFIG_LIST=$(cat ./OAI_CONFIG_LIST)\\r\\npip install autogenbench\\r\\nautogenbench clone HumanEval\\r\\ncd HumanEval\\r\\ncat README.md\\r\\nautogenbench run --subsample 0.1 --repeat 3 Tasks/human_eval_two_agents.jsonl\\r\\nautogenbench tabulate Results/human_eval_two_agents\\r\\n```\\r\\n\\r\\n## Introduction\\r\\nMeasurement and evaluation are core components of every major AI or ML research project. The same is true for AutoGen. To this end, today we are releasing AutoGenBench, a standalone command line tool that we have been using to guide development of AutoGen. Conveniently, AutoGenBench handles: downloading, configuring, running, and reporting results of agents on various public benchmark datasets. In addition to reporting top-line numbers, each AutoGenBench run produces a comprehensive set of logs and telemetry that can be used for debugging, profiling, computing custom metrics, and as input to [AgentEval](https://microsoft.github.io/autogen/blog/2023/11/20/AgentEval). In the remainder of this blog post, we outline core design principles for AutoGenBench (key to understanding its operation); present a guide to installing and running AutoGenBench; outline a roadmap for evaluation; and conclude with an open call for contributions.\\r\\n\\r\\n## Design Principles\\r\\nAutoGenBench is designed around three core design principles. Knowing these principles will help you understand the tool, its operation and its output. These three principles are:\\r\\n-  **Repetition:** LLMs are stochastic, and in many cases, so too is the code they write to solve problems. For example, a Python script might call an external search engine, and the results may vary run-to-run. This can lead to variance in agent performance. Repetition is key to measuring and understanding this variance. To this end, AutoGenBench is built from the ground up with an understanding that tasks may be run multiple times, and that variance is a metric we often want to measure.\\r\\n\\r\\n -  **Isolation:** Agents interact with their worlds in both subtle and overt ways. For example an agent may install a python library or write a file to disk. This can lead to ordering effects that can impact future measurements. Consider, for example, comparing two agents on a common benchmark. One agent may appear more efficient than the other simply because it ran second, and benefitted from the hard work the first agent did in installing and debugging necessary Python libraries. To address this, AutoGenBench isolates each task in its own Docker container. This ensures that all runs start with the same initial conditions.  (Docker is also a *much safer way to run agent-produced code*, in general.)\\r\\n\\r\\n-  **Instrumentation:** While top-line metrics are great for comparing agents or models, we often want much more information about how the agents are performing, where they are getting stuck, and how they can be improved. We may also later think of new research questions that require computing a different set of metrics. To this end, AutoGenBench is designed to log everything, and to compute metrics from those logs. This ensures that one can always go back to the logs to answer questions about what happened, run profiling software, or feed the logs into tools like [AgentEval](https://microsoft.github.io/autogen/blog/2023/11/20/AgentEval).\\r\\n\\r\\n## Installing and Running AutoGenBench\\r\\nAs noted above, isolation is a key design principle, and so AutoGenBench must be run in an environment where Docker is available (desktop or Engine). **It will not run in GitHub codespaces**, unless you opt for native execution (which is strongly discouraged). To install Docker Desktop see [https://www.docker.com/products/docker-desktop/](https://www.docker.com/products/docker-desktop/).\\r\\nOnce Docker is installed, AutoGenBench can then be installed as a standalone tool from PyPI. With `pip`, installation can be achieved as follows:\\r\\n\\r\\n```sh\\r\\npip install autogenbench\\r\\n```\\r\\nAfter installation, you must configure your API keys. As with other AutoGen applications, AutoGenBench will look for the OpenAI keys in the OAI_CONFIG_LIST file in the current working directory, or the OAI_CONFIG_LIST environment variable. This behavior can be overridden using a command-line parameter.\\r\\n\\r\\nIf you will be running multiple benchmarks, it is often most convenient to leverage the environment variable option. You can load your keys into the environment variable by executing:\\r\\n\\r\\n```sh\\r\\nexport OAI_CONFIG_LIST=$(cat ./OAI_CONFIG_LIST)\\r\\n```\\r\\n## A Typical Session\\r\\nOnce AutoGenBench and necessary keys are installed, a typical session will look as follows:\\r\\n\\r\\n```\\r\\nautogenbench clone HumanEval\\r\\ncd HumanEval\\r\\ncat README.md\\r\\nautogenbench run --subsample 0.1 --repeat 3 Tasks/human_eval_two_agents.jsonl\\r\\nautogenbench tabulate results/human_eval_two_agents\\r\\n```\\r\\n\\r\\nWhere:\\r\\n- `autogenbench clone HumanEval` downloads and expands the HumanEval benchmark scenario.\\r\\n- `cd HumanEval; cat README.md` navigates to the benchmark directory, and prints the README (which you should always read!)\\r\\n- `autogenbench run --subsample 0.1 --repeat 3 Tasks/human_eval_two_agents.jsonl`\\r\\n runs a 10% subsample of the tasks defined in `Tasks/human_eval_two_agents.jsonl`. Each task is run 3 times.\\r\\n- `autogenbench tabulate results/human_eval_two_agents` tabulates the results of the run.\\r\\n\\r\\nAfter running the above `tabulate` command, you should see output similar to the following:\\r\\n\\r\\n```\\r\\n                 Trial 0    Trial 1    Trial 2\\r\\nTask Id          Success    Success    Success\\r\\n-------------  ---------  ---------  ---------\\r\\nHumanEval_107       False      True       True\\r\\nHumanEval_22        True       True       True\\r\\nHumanEval_43        True       True       True\\r\\nHumanEval_88        True       True       True\\r\\nHumanEval_14        True       True       True\\r\\nHumanEval_157       True       True       True\\r\\nHumanEval_141       True       True       True\\r\\nHumanEval_57        True       True       True\\r\\nHumanEval_154       True       True       True\\r\\nHumanEval_153       True       True       True\\r\\nHumanEval_93        False      True      False\\r\\nHumanEval_137       True       True       True\\r\\nHumanEval_143       True       True       True\\r\\nHumanEval_13        True       True       True\\r\\nHumanEval_49        True       True       True\\r\\nHumanEval_95        True       True       True\\r\\n-------------  ---------  ---------  ---------\\r\\nSuccesses             14         16         15\\r\\nFailures               2          0          1\\r\\nMissing                0          0          0\\r\\nTotal                 16         16         16\\r\\n\\r\\nCAUTION: \'autogenbench tabulate\' is in early preview.\\r\\nPlease do not cite these values in academic work without first inspecting and verifying the results in the logs yourself.\\r\\n```\\r\\n\\r\\nFrom this output we can see the results of the three separate repetitions of each task, and final summary statistics of each run. In this case, the results were generated via GPT-4 (as defined in the OAI_CONFIG_LIST that was provided), and used the `TwoAgents` template. **It is important to remember that AutoGenBench evaluates *specific* end-to-end configurations of agents (as opposed to evaluating a model or cognitive framework more generally).**\\r\\n\\r\\nFinally, complete execution traces and logs can be found in the `Results` folder. See the [AutoGenBench README](https://github.com/microsoft/autogen/blob/main/samples/tools/autogenbench/README.md) for more details about command-line options and output formats. Each of these commands also offers extensive in-line help via:\\r\\n\\r\\n- `autogenbench --help`\\r\\n- `autogenbench clone --help`\\r\\n- `autogenbench run --help`\\r\\n- `autogenbench tabulate --help`\\r\\n\\r\\n\\r\\n## Roadmap\\r\\nWhile we are announcing AutoGenBench, we note that it is very much an evolving project in its own right. Over the next few weeks and months we hope to:\\r\\n- Onboard many additional benchmarks beyond those shipping today\\r\\n- Greatly improve logging and telemetry\\r\\n- Introduce new core metrics including total costs, task completion time, conversation turns, etc.\\r\\n- Provide tighter integration with AgentEval and AutoGen Studio\\r\\n\\r\\nFor an up to date tracking of our work items on this project, please see [AutoGenBench Work Items]( https://github.com/microsoft/autogen/issues/973)\\r\\n\\r\\n## Call for Participation\\r\\nFinally, we want to end this blog post with an open call for contributions. AutoGenBench is still nascent, and has much opportunity for improvement.  New benchmarks are constantly being published, and will need to be added. Everyone may have their own distinct set of metrics that they care most about optimizing, and these metrics should be onboarded. To this end, we welcome any and all contributions to this corner of the AutoGen project. If contributing is something that interests you, please see the [contributor\u2019s guide](https://github.com/microsoft/autogen/blob/main/samples/tools/autogenbench/CONTRIBUTING.md) and join our [Discord](https://discord.gg/pAbnFJrkgZ) discussion in the [#autogenbench](https://discord.com/channels/1153072414184452236/1199851779328847902) channel!"},{"id":"/2024/01/23/Code-execution-in-docker","metadata":{"permalink":"/autogen/blog/2024/01/23/Code-execution-in-docker","source":"@site/blog/2024-01-23-Code-execution-in-docker/index.mdx","title":"Code execution is now by default inside docker container","description":"TL;DR","date":"2024-01-23T00:00:00.000Z","formattedDate":"January 23, 2024","tags":[{"label":"AutoGen","permalink":"/autogen/blog/tags/auto-gen"}],"readingTime":2.38,"hasTruncateMarker":false,"authors":[{"name":"Olga Vrousgou","title":"Senior Software Engineer at Microsoft Research","url":"https://github.com/olgavrou/","imageURL":"https://github.com/olgavrou.png","key":"olgavrou"}],"frontMatter":{"title":"Code execution is now by default inside docker container","authors":["olgavrou"],"tags":["AutoGen"]},"unlisted":false,"prevItem":{"title":"AutoGenBench -- A Tool for Measuring and Evaluating AutoGen Agents","permalink":"/autogen/blog/2024/01/25/AutoGenBench"},"nextItem":{"title":"All About Agent Descriptions","permalink":"/autogen/blog/2023/12/29/AgentDescriptions"}},"content":"## TL;DR\\n\\nAutoGen 0.2.8 enhances operational safety by making \'code execution inside a Docker container\' the default setting, focusing on informing users about its operations and empowering them to make informed decisions regarding code execution.\\n\\nThe new release introduces a breaking change where the `use_docker` argument is set to `True` by default in code executing agents. This change underscores our commitment to prioritizing security and safety in AutoGen.\\n\\n## Introduction\\n\\nAutoGen has code-executing agents, usually defined as a `UserProxyAgent`, where code execution is by default ON. Until now, unless explicitly specified by the user, any code generated by other agents would be executed by code-execution agents locally, i.e. wherever AutoGen was being executed. If AutoGen happened to be run in a docker container then the risks of running code were minimized. However, if AutoGen runs outside of Docker, it\'s easy particularly for new users to overlook code-execution risks.\\n\\nAutoGen has now changed to by default execute any code inside a docker container (unless execution is already happening inside a docker container). It will launch a Docker image (either user-provided or default), execute the new code, and then terminate the image, preparing for the next code execution cycle.\\n\\nWe understand that not everyone is concerned about this especially when playing around with AutoGen for the first time. We have provided easy ways to turn this requirement off. But we believe that making sure that the user is aware of the fact that code will be executed locally, and prompting them to think about the security implications of running code locally is the right step for AutoGen.\\n\\n## Example\\n\\nThe example shows the default behaviour which is that any code generated by assistant agent and executed by user_proxy agent, will attempt to use a docker container to execute the code. If docker is not running, it will throw an error. User can decide to activate docker or opt in for local code execution.\\n\\n```python\\nfrom autogen import AssistantAgent, UserProxyAgent, config_list_from_json\\nassistant = AssistantAgent(\\"assistant\\", llm_config={\\"config_list\\": config_list})\\nuser_proxy = UserProxyAgent(\\"user_proxy\\", code_execution_config={\\"work_dir\\": \\"coding\\"})\\nuser_proxy.initiate_chat(assistant, message=\\"Plot a chart of NVDA and TESLA stock price change YTD.\\")\\n```\\n\\nTo opt out of from this default behaviour there are some options.\\n\\n### Diasable code execution entirely\\n\\n- Set `code_execution_config` to `False` for each code-execution agent. E.g.:\\n\\n```python\\nuser_proxy = autogen.UserProxyAgent(name=\\"user_proxy\\", llm_config=llm_config, code_execution_config=False)\\n```\\n\\n### Run code execution locally\\n\\n- `use_docker` can be set to `False` in `code_execution_config` for each code-execution agent.\\n- To set it for all code-execution agents at once: set `AUTOGEN_USE_DOCKER` to `False` as an environment variable.\\n\\nE.g.:\\n\\n```python\\nuser_proxy = autogen.UserProxyAgent(name=\\"user_proxy\\", llm_config=llm_config,\\n    code_execution_config={\\"work_dir\\":\\"coding\\", \\"use_docker\\":False})\\n```\\n\\n## Related documentation\\n\\n- [Code execution with docker](https://microsoft.github.io/autogen/docs/Installation#code-execution-with-docker-default)\\n- [How to disable code execution in docker](https://microsoft.github.io/autogen/docs/FAQ#agents-are-throwing-due-to-docker-not-running-how-can-i-resolve-this)\\n\\n## Conclusion\\n\\nAutoGen 0.2.8 now improves the code execution safety and is ensuring that the user is properly informed of what autogen is doing and can make decisions around code-execution."},{"id":"/2023/12/29/AgentDescriptions","metadata":{"permalink":"/autogen/blog/2023/12/29/AgentDescriptions","source":"@site/blog/2023-12-29-AgentDescriptions/index.mdx","title":"All About Agent Descriptions","description":"TL;DR","date":"2023-12-29T00:00:00.000Z","formattedDate":"December 29, 2023","tags":[{"label":"AutoGen","permalink":"/autogen/blog/tags/auto-gen"}],"readingTime":8.555,"hasTruncateMarker":false,"authors":[{"name":"Adam Fourney","title":"Principal Researcher Microsoft Research","url":"https://www.adamfourney.com","imageURL":"https://github.com/afourney.png","key":"afourney"}],"frontMatter":{"title":"All About Agent Descriptions","authors":["afourney"],"tags":["AutoGen"]},"unlisted":false,"prevItem":{"title":"Code execution is now by default inside docker container","permalink":"/autogen/blog/2024/01/23/Code-execution-in-docker"},"nextItem":{"title":"AgentOptimizer - An Agentic Way to Train Your LLM Agent","permalink":"/autogen/blog/2023/12/23/AgentOptimizer"}},"content":"## TL;DR\\r\\n\\r\\nAutoGen 0.2.2 introduces a [description](https://microsoft.github.io/autogen/docs/reference/agentchat/conversable_agent#__init__) field to ConversableAgent (and all subclasses), and changes GroupChat so that it uses agent `description`s rather than `system_message`s when choosing which agents should speak next.\\r\\n\\r\\nThis is expected to simplify GroupChat\u2019s job, improve orchestration, and make it easier to implement new GroupChat or GroupChat-like alternatives.\\r\\n\\r\\nIf you are a developer, and things were already working well for you, no action is needed -- backward compatibility is ensured because the `description` field defaults to the `system_message` when no description is provided.\\r\\n\\r\\nHowever, if you were struggling with getting GroupChat to work, you can now try updating the `description` field.\\r\\n\\r\\n## Introduction\\r\\n\\r\\nAs AutoGen matures and developers build increasingly complex combinations of agents, orchestration is becoming an important capability. At present, [GroupChat](https://microsoft.github.io/autogen/docs/reference/agentchat/groupchat#groupchat-objects) and the [GroupChatManager](https://microsoft.github.io/autogen/docs/reference/agentchat/groupchat#groupchatmanager-objects) are the main built-in tools for orchestrating conversations between 3 or more agents. For orchestrators like GroupChat to work well, they need to know something about each agent so that they can decide who should speak and when. Prior to AutoGen 0.2.2, GroupChat relied on each agent\'s `system_message` and `name` to learn about each participating agent. This is likely fine when the system prompt is short and sweet, but can lead to problems when the instructions are very long (e.g., with the [AssistantAgent](https://microsoft.github.io/autogen/docs/reference/agentchat/assistant_agent)), or non-existent (e.g., with the [UserProxyAgent](https://microsoft.github.io/autogen/docs/reference/agentchat/user_proxy_agent)).\\r\\n\\r\\nAutoGen 0.2.2 introduces a [description](https://microsoft.github.io/autogen/docs/reference/agentchat/conversable_agent#__init__) field to all agents, and replaces the use of the `system_message` for orchestration in GroupChat and all future orchestrators. The `description` field defaults to the `system_message` to ensure backwards compatibility, so you may not need to change anything with your code if things are working well for you. However, if you were struggling with GroupChat, give setting the `description` field a try.\\r\\n\\r\\nThe remainder of this post provides an example of how using the `description` field simplifies GroupChat\'s job,  provides some evidence of its effectiveness, and provides tips for writing good descriptions.\\r\\n\\r\\n## Example\\r\\n\\r\\nThe current GroupChat orchestration system prompt has the following template:\\r\\n\\r\\n```\\r\\nYou are in a role play game. The following roles are available:\\r\\n\\r\\n{self._participant_roles(agents)}.\\r\\n\\r\\nRead the following conversation.\\r\\nThen select the next role from {[agent.name for agent in agents]} to play. Only return the role.\\r\\n```\\r\\n\\r\\nSuppose that you wanted to include 3 agents: A UserProxyAgent, an AssistantAgent, and perhaps a GuardrailsAgent.\\r\\n\\r\\nPrior to 0.2.2, this template would expand to:\\r\\n\\r\\n```\\r\\nYou are in a role play game. The following roles are available:\\r\\n\\r\\nassistant: You are a helpful AI assistant.\\r\\nSolve tasks using your coding and language skills.\\r\\nIn the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute.\\r\\n1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself.\\r\\n2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly.\\r\\nSolve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill.\\r\\nWhen using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can\'t modify your code. So do not suggest incomplete code which requires users to modify. Don\'t use a code block if it\'s not intended to be executed by the user.\\r\\nIf you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don\'t include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use \'print\' function for the output when relevant. Check the execution result returned by the user.\\r\\nIf the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can\'t be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try.\\r\\nWhen you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible.\\r\\nReply \\"TERMINATE\\" in the end when everything is done.\\r\\nuser_proxy:\\r\\nguardrails_agent: You are a guardrails agent and are tasked with ensuring that all parties adhere to the following responsible AI policies:\\r\\n- You MUST TERMINATE the conversation if it involves writing or running HARMFUL or DESTRUCTIVE code.\\r\\n- You MUST TERMINATE the conversation if it involves discussions of anything relating to hacking, computer exploits, or computer security.\\r\\n- You MUST TERMINATE the conversation if it involves violent or graphic content such as Harm to Others, Self-Harm, Suicide.\\r\\n- You MUST TERMINATE the conversation if it involves demeaning speech, hate speech, discriminatory remarks, or any form of harassment based on race, gender, sexuality, religion, nationality, disability, or any other protected characteristic.\\r\\n- You MUST TERMINATE the conversation if it involves seeking or giving  advice in highly regulated domains such as medical advice, mental health, legal advice or financial advice\\r\\n- You MUST TERMINATE the conversation if it involves illegal activities including when encouraging or providing guidance on illegal activities.\\r\\n- You MUST TERMINATE the conversation if it involves manipulative or deceptive Content including scams, phishing and spread false information.\\r\\n- You MUST TERMINATE the conversation if it involves involve sexually explicit content or discussions.\\r\\n- You MUST TERMINATE the conversation if it involves sharing or soliciting personal, sensitive, or confidential information from users. This includes financial details, health records, and other private matters.\\r\\n- You MUST TERMINATE the conversation if it involves deep personal problems such as dealing with serious personal issues, mental health concerns, or crisis situations.\\r\\nIf you decide that the conversation must be terminated, explain your reasoning then output the uppercase word \\"TERMINATE\\". If, on the other hand, you decide the conversation is acceptable by the above standards, indicate as much, then ask the other parties to proceed.\\r\\n\\r\\nRead the following conversation.\\r\\nThen select the next role from [assistant, user_proxy, guardrails_agent] to play. Only return the role.\\r\\n\\r\\n```\\r\\n\\r\\nAs you can see, this description is super confusing:\\r\\n\\r\\n- It is hard to make out where each agent\'s role-description ends\\r\\n- `You` appears numerous times, and refers to three separate agents (GroupChatManager, AssistantAgent, and GuardrailsAgent)\\r\\n- It takes a lot of tokens!\\r\\n\\r\\nConsequently, it\'s not hard to see why the GroupChat manager sometimes struggles with this orchestration task.\\r\\n\\r\\nWith AutoGen 0.2.2 onward, GroupChat instead relies on the description field. With a description field the orchestration prompt becomes:\\r\\n\\r\\n```\\r\\nYou are in a role play game. The following roles are available:\\r\\n\\r\\nassistant: A helpful and general-purpose AI assistant that has strong language skills, Python skills, and Linux command line skills.\\r\\nuser_proxy: A user that can run Python code or input command line commands at a Linux terminal and report back the execution results.\\r\\nguradrails_agent: An agent that ensures the conversation conforms to responsible AI guidelines.\\r\\n\\r\\nRead the following conversation.\\r\\nThen select the next role from [assistant, user_proxy, guardrails_agent] to play. Only return the role.\\r\\n```\\r\\n\\r\\nThis is much easier to parse and understand, and it doesn\'t use nearly as many tokens. Moreover, the following experiment provides early evidence that it works.\\r\\n\\r\\n## An Experiment with Distraction\\r\\n\\r\\nTo illustrate the impact of the `description` field, we set up a three-agent experiment with a reduced 26-problem subset of the HumanEval benchmark. Here, three agents were added to a GroupChat to solve programming problems. The three agents were:\\r\\n\\r\\n- Coder (default Assistant prompt)\\r\\n- UserProxy (configured to execute code)\\r\\n- ExecutiveChef (added as a distraction)\\r\\n\\r\\nThe Coder and UserProxy used the AssistantAgent and UserProxy defaults (provided above), while the ExecutiveChef was given the system prompt:\\r\\n\\r\\n```\\r\\nYou are an executive chef with 28 years of industry experience. You can answer questions about menu planning, meal preparation, and cooking techniques.\\r\\n```\\r\\n\\r\\nThe ExecutiveChef is clearly the distractor here -- given that no HumanEval problems are food-related, the GroupChat should rarely consult with the chef. However, when configured with GPT-3.5-turbo-16k, we can clearly see the GroupChat struggling with orchestration:\\r\\n\\r\\n#### With versions prior to 0.2.2, using `system_message`:\\r\\n\\r\\n- The Agents solve 3 out of 26 problems on their first turn\\r\\n- The ExecutiveChef is called upon 54 times! (almost as much as the Coder at 68 times)\\r\\n\\r\\n#### With version 0.2.2, using `description`:\\r\\n\\r\\n- The Agents solve 7 out of 26 problems on the first turn\\r\\n- The ExecutiveChef is called upon 27 times! (versus 84 times for the Coder)\\r\\n\\r\\nUsing the `description` field doubles performance on this task and halves the incidence of calling upon the distractor agent.\\r\\n\\r\\n## Tips for Writing Good Descriptions\\r\\nSince `descriptions` serve a different purpose than `system_message`s, it is worth reviewing what makes a good agent description. While descriptions are new, the following tips appear to lead to good results:\\r\\n\\r\\n- Avoid using the 1st or 2nd person perspective. Descriptions should not contain \\"I\\" or \\"You\\", unless perhaps \\"You\\" is in reference to the GroupChat / orchestrator\\r\\n- Include any details that might help the orchestrator know when to call upon the agent\\r\\n- Keep descriptions short (e.g., \\"A helpful AI assistant with strong natural language and Python coding skills.\\").\\r\\n\\r\\nThe main thing to remember is that **the description is for the benefit of the GroupChatManager, not for the Agent\'s own use or instruction**.\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nAutoGen 0.2.2 introduces a `description`, becoming the main way agents describe themselves to orchestrators like GroupChat. Since the `description` defaults to the `system_message`, there\'s nothing you need to change if you were already satisfied with how your group chats were working. However, we expect this feature to generally improve orchestration, so please consider experimenting with the `description` field if you are struggling with GroupChat or want to boost performance."},{"id":"/2023/12/23/AgentOptimizer","metadata":{"permalink":"/autogen/blog/2023/12/23/AgentOptimizer","source":"@site/blog/2023-12-23-AgentOptimizer/index.mdx","title":"AgentOptimizer - An Agentic Way to Train Your LLM Agent","description":"Overall structure of AgentOptimizer","date":"2023-12-23T00:00:00.000Z","formattedDate":"December 23, 2023","tags":[{"label":"LLM","permalink":"/autogen/blog/tags/llm"},{"label":"research","permalink":"/autogen/blog/tags/research"}],"readingTime":6.23,"hasTruncateMarker":false,"authors":[{"name":"Shaokun Zhang","title":"PhD student at the Pennsylvania State University","url":"https://github.com/skzhang1","imageURL":"https://github.com/skzhang1.png","key":"skzhang1"},{"name":"Jieyu Zhang","title":"PhD student at University of Washington","url":"https://jieyuz2.github.io/","imageURL":"https://github.com/jieyuz2.png","key":"jieyuz2"}],"frontMatter":{"title":"AgentOptimizer - An Agentic Way to Train Your LLM Agent","authors":["skzhang1","jieyuz2"],"tags":["LLM","research"]},"unlisted":false,"prevItem":{"title":"All About Agent Descriptions","permalink":"/autogen/blog/2023/12/29/AgentDescriptions"},"nextItem":{"title":"AutoGen Studio: Interactively Explore Multi-Agent Workflows","permalink":"/autogen/blog/2023/12/01/AutoGenStudio"}},"content":"![Overall structure of AgentOptimizer](img/agentoptimizer.png)\\n\\n\\n**TL;DR:**\\nIntroducing **AgentOptimizer**, a new class for training LLM agents in the era of LLMs as a service.\\n**AgentOptimizer** is able to prompt autogen agents to iteratively optimize its function/skills according to the historical conversation and performance.\\nCheckout one implementation for **AgentOptimizer** on [MATH](https://github.com/hendrycks/math) dataset\\n[here](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_agentoptimizer.ipynb).\\n\\nPaper is coming soon!\\n\\n## Introduction\\nIn traditional ML pipeline, we train a model by updating its weights according to the loss on the training set, while in the era of LLM agents, how should we train an agent?\\nHere, we take an initial step towards the agent training.\\nInspired by the [function calling](https://platform.openai.com/docs/guides/function-calling) capabilities provided by OpenAI,\\nwe draw an analogy between model weights and agent functions/skills, and update an agent\u2019s functions/skills based on its historical performance on a training set.\\nSpecifically, we propose to use the function calling capabilities to formulate the actions that optimize the agents\u2019 functions as a set of function calls,\\nto support iteratively **adding, revising, and removing** existing functions.\\nAs an agentic way of training an agent, our approach helps enhance the agents\u2019 abilities without requiring access to the LLMs weights.\\n\\n## AgentOptimizer\\n\\n**AgentOptimizer** is a class designed to optimize the agents by improving their function calls.\\nIt contains two core methods:\\n\\n1. `step()`: `step()` takes three inputs, including the previous conversation history (history), the statistical information of solving previous problems (statistic), and the current functions (current_functions).\\n\\n```python\\nactions, updated_functions = AgentOptimizer.step(history, statistic, current_functions)\\n```\\n\\nIt has two outputs `actions` and `updated_functions`. `actions` is a series of actions to manipulate the current functions. And `updated_functions` is the updated functions after the actions are applied (including code implementation).\\n\\n2. `update_function_call()`:\\nThis method takes the agents and actions as input. It updates the functions registered in these agents according to the actions from `step()`.\\nFor AssistantAgent, it first uses [update_function_signature](https://microsoft.github.io/autogen/docs/reference/agentchat/conversable_agent/#update_function_signature) to update the function signatures.\\nThen, it updates the functions in the MathUserproxyAgent with the corresponding code implementation gained from `step()`.\\n\\nSometimes, the function signatures (JSON schema) returned by the `step()` may not be valid, and the generated code may also face syntax errors.\\n**AgentOptimizer** includes mechanisms to check the (1) validity of the function signatures and (2) code implementation before updating the functions.\\nMoreover, it also includes mechanisms to check whether each action is feasible, such as avoiding the removal of a function that is not in the current functions due to hallucination.\\n\\n## Pseudocode for the optimization process\\n\\nThe optimization process is as follows:\\n\\n```python\\nfor - in range(EPOCH):\\n    history, statistic, current_functions = solve_problems(train_problems)\\n    actions, updated_functions = AgentOptimizer.step(history, statistic, current_functions)\\n    AgentOptimizer.update_function_call(actions)\\n```\\n\\nGiven a prepared training dataset, the agents iteratively solve problems from the training set to obtain conversation history and statistical information.\\nThe functions are then improved using AgentOptimizer.\\nEach iteration can be regarded as one training step analogous to traditional machine learning, with the optimization elements being the functions that agents have.\\nAfter EPOCH iterations, the agents are expected to obtain better functions that may be used in future tasks\\n\\n\\n## The implementation technology behind the AgentOptimizer\\n\\nTo obtain stable and structured function signatures and code implementations from AgentOptimizer,\\nwe leverage the function calling capabilities provided by OpenAI to formulate the actions that manipulate the functions as a set of function calls.\\nSpecifically, we introduce three function calls to manipulate the current functions at each step: `add_function`, `remove_function`, and `revise_function`.\\nThese calls add, remove, and revise functions in the existing function list, respectively.\\nThis practice could fully leverages the function calling capabilities of GPT-4 and outputs structured functions with more stable signatures and code implementation.\\nBelow is the JSON schema of these function calls:\\n\\n1. `add_function`: Add one new function that may be used in the future tasks.\\n```python\\nADD_FUNC = {\\n    \\"type\\": \\"function\\",\\n    \\"function\\": {\\n        \\"name\\": \\"add_function\\",\\n        \\"description\\": \\"Add a function in the context of the conversation. Necessary Python packages must be declared. The name of the function MUST be the same with the function name in the code you generated.\\",\\n        \\"parameters\\": {\\n            \\"type\\": \\"object\\",\\n            \\"properties\\": {\\n                \\"name\\": {\\n                    \\"type\\": \\"string\\",\\n                    \\"description\\": \\"The name of the function in the code implementation.\\"\\n                },\\n                \\"description\\": {\\n                    \\"type\\": \\"string\\",\\n                    \\"description\\": \\"A short description of the function.\\"\\n                },\\n                \\"arguments\\": {\\n                    \\"type\\": \\"string\\",\\n                    \\"description\\": \\"JSON schema of arguments encoded as a string. Please note that the JSON schema only supports specific types including string, integer, object, array, boolean. (do not have float type) For example: { \\\\\\"url\\\\\\": { \\\\\\"type\\\\\\": \\\\\\"string\\\\\\", \\\\\\"description\\\\\\": \\\\\\"The URL\\\\\\", }}. Please avoid the error \'array schema missing items\' when using array type.\\"\\n                },\\n                \\"packages\\": {\\n                    \\"type\\": \\"string\\",\\n                    \\"description\\": \\"A list of package names imported by the function, and that need to be installed with pip prior to invoking the function. This solves ModuleNotFoundError. It should be string, not list.\\"\\n                },\\n                \\"code\\": {\\n                    \\"type\\": \\"string\\",\\n                    \\"description\\": \\"The implementation in Python. Do not include the function declaration.\\"\\n                }\\n            },\\n            \\"required\\": [\\"name\\", \\"description\\", \\"arguments\\", \\"packages\\", \\"code\\"]\\n        }\\n    }\\n}\\n```\\n\\n2. `revise_function`: Revise one existing function (code implementation, function signature) in the current function list according to the conversation history and performance.\\n```python\\nREVISE_FUNC = {\\n    \\"type\\": \\"function\\",\\n    \\"function\\": {\\n        \\"name\\": \\"revise_function\\",\\n        \\"description\\": \\"Revise a function in the context of the conversation. Necessary Python packages must be declared. The name of the function MUST be the same with the function name in the code you generated.\\",\\n        \\"parameters\\": {\\n            \\"type\\": \\"object\\",\\n            \\"properties\\": {\\n                \\"name\\": {\\n                    \\"type\\": \\"string\\",\\n                    \\"description\\": \\"The name of the function in the code implementation.\\"\\n                },\\n                \\"description\\": {\\n                    \\"type\\": \\"string\\",\\n                    \\"description\\": \\"A short description of the function.\\"\\n                },\\n                \\"arguments\\": {\\n                    \\"type\\": \\"string\\",\\n                    \\"description\\": \\"JSON schema of arguments encoded as a string. Please note that the JSON schema only supports specific types including string, integer, object, array, boolean. (do not have float type) For example: { \\\\\\"url\\\\\\": { \\\\\\"type\\\\\\": \\\\\\"string\\\\\\", \\\\\\"description\\\\\\": \\\\\\"The URL\\\\\\", }}. Please avoid the error \'array schema missing items\' when using array type.\\"\\n                },\\n                \\"packages\\": {\\n                    \\"type\\": \\"string\\",\\n                    \\"description\\": \\"A list of package names imported by the function, and that need to be installed with pip prior to invoking the function. This solves ModuleNotFoundError. It should be string, not list.\\"\\n                },\\n                \\"code\\": {\\n                    \\"type\\": \\"string\\",\\n                    \\"description\\": \\"The implementation in Python. Do not include the function declaration.\\"\\n                }\\n            },\\n            \\"required\\": [\\"name\\", \\"description\\", \\"arguments\\", \\"packages\\", \\"code\\"]\\n        }\\n    }\\n}\\n```\\n\\n3. `remove_function`: Remove one existing function in the current function list. It is used to remove the functions that are not useful (redundant) in the future tasks.\\n```python\\nREMOVE_FUNC = {\\n    \\"type\\": \\"function\\",\\n    \\"function\\": {\\n        \\"name\\": \\"remove_function\\",\\n        \\"description\\": \\"Remove one function in the context of the conversation. Once remove one function, the assistant will not use this function in future conversation.\\",\\n        \\"parameters\\": {\\n            \\"type\\": \\"object\\",\\n            \\"properties\\": {\\n                \\"name\\": {\\n                    \\"type\\": \\"string\\",\\n                    \\"description\\": \\"The name of the function in the code implementation.\\"\\n                }\\n            },\\n            \\"required\\": [\\"name\\"]\\n        }\\n    }\\n}\\n```\\n\\n\\n## Limitation & Future work\\n\\n1. Unlike gradient descent in traditional machine learning training processes, each optimization step does not necessarily lead to better performance on the training set.\\nWhen the training epoch is small, the agent\u2019s performance may even decrease. One urgent task is to design a better mechanism to guide the optimization process.\\n2. The [Current implementation](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_agentoptimizer.ipynb) of AgentOptimizer is mainly for illustration purpose and is just a proof of concept.\\nIt is not formally integrated into the autogen with a general interface like optimizing any kinds of agents in any tasks.\\nCurrently, it only supports optimizing the multi-agent system in solving problems from [MATH](https://github.com/hendrycks/math) dataset. We will integrate it into autogen with more general interface in the future."},{"id":"/2023/12/01/AutoGenStudio","metadata":{"permalink":"/autogen/blog/2023/12/01/AutoGenStudio","source":"@site/blog/2023-12-01-AutoGenStudio/index.mdx","title":"AutoGen Studio: Interactively Explore Multi-Agent Workflows","description":"AutoGen Studio Playground View: Solving a task with multiple agents that generate a pdf document with images.","date":"2023-12-01T00:00:00.000Z","formattedDate":"December 1, 2023","tags":[{"label":"AutoGen","permalink":"/autogen/blog/tags/auto-gen"},{"label":"UI","permalink":"/autogen/blog/tags/ui"},{"label":"web","permalink":"/autogen/blog/tags/web"},{"label":"UX","permalink":"/autogen/blog/tags/ux"}],"readingTime":9.595,"hasTruncateMarker":false,"authors":[{"name":"Victor Dibia","title":"Principal RSDE at Microsoft Research","url":"https://github.com/victordibia","imageURL":"https://github.com/victordibia.png","key":"victordibia"},{"name":"Gagan Bansal","title":"Senior Researcher at Microsoft Research","url":"https://www.linkedin.com/in/gagan-bansal/","imageURL":"https://github.com/gagb.png","key":"gagb"},{"name":"Saleema Amershi","title":"Senior Principal Research Manager at Microsoft Research","url":"https://github.com/samershi","imageURL":"https://github.com/samershi.png","key":"samershi"}],"frontMatter":{"title":"AutoGen Studio: Interactively Explore Multi-Agent Workflows","authors":["victordibia","gagb","samershi"],"tags":["AutoGen","UI","web","UX"]},"unlisted":false,"prevItem":{"title":"AgentOptimizer - An Agentic Way to Train Your LLM Agent","permalink":"/autogen/blog/2023/12/23/AgentOptimizer"},"nextItem":{"title":"Agent AutoBuild - Automatically Building Multi-agent Systems","permalink":"/autogen/blog/2023/11/26/Agent-AutoBuild"}},"content":"![AutoGen Studio Playground View: Solving a task with multiple agents that generate a pdf document with images.](img/autogenstudio_home.png)\\r\\n<p align=\\"center\\"><em>AutoGen Studio: Solving a task with multiple agents that generate a pdf document with images.</em></p>\\r\\n\\r\\n## TL;DR\\r\\n\\r\\nTo help you rapidly prototype multi-agent solutions for your tasks, we are introducing AutoGen Studio, an interface powered by [AutoGen](https://github.com/microsoft/autogen/tree/main/autogen). It allows you to:\\r\\n\\r\\n- Declaratively define and modify agents and multi-agent workflows through a point and click, drag and drop interface (e.g., you can select the parameters of two agents that will communicate to solve your task).\\r\\n- Use our UI to create chat sessions with the specified agents and view results (e.g., view chat history, generated files, and time taken).\\r\\n- Explicitly add skills to your agents and accomplish more tasks.\\r\\n- Publish your sessions to a local gallery.\\r\\n\\r\\nAutoGen Studio is open source [code here](https://github.com/microsoft/autogen/tree/main/samples/apps/autogen-studio), and can be installed via pip.  Give it a try!\\r\\n\\r\\n```bash\\r\\npip install autogenstudio\\r\\n```\\r\\n\\r\\n\\r\\n## Introduction\\r\\n\\r\\nThe accelerating pace of technology has ushered us into an era where digital assistants (or agents) are becoming integral to our lives. [AutoGen](https://github.com/microsoft/autogen/tree/main/autogen) has emerged as a leading framework for orchestrating the power of agents. In the spirit of expanding this frontier and democratizing this capability, we are thrilled to introduce a new user-friendly interface: **AutoGen Studio**.\\r\\n\\r\\nWith AutoGen Studio, users can rapidly create, manage, and interact with agents that can learn, adapt, and collaborate. As we release this interface into the open-source community, our ambition is not only to enhance productivity but to inspire a level of personalized interaction between humans and agents.\\r\\n\\r\\n> **Note**: AutoGen Studio is meant to help you rapidly prototype multi-agent workflows and demonstrate an example of end user interfaces built with AutoGen. It is not meant to be a production-ready app.\\r\\n\\r\\n## Getting Started with AutoGen Studio\\r\\n\\r\\nThe following guide will help you get AutoGen Studio up and running on your system.\\r\\n\\r\\n### Configuring an LLM Provider\\r\\n\\r\\nTo get started, you need access to a language model. You can get this set up by following the steps in the AutoGen documentation [here](https://microsoft.github.io/autogen/docs/FAQ#set-your-api-endpoints). Configure your environment with either `OPENAI_API_KEY` or `AZURE_OPENAI_API_KEY`.\\r\\n\\r\\n\\r\\nFor example, in your terminal, you would set the API key like this:\\r\\n\\r\\n```bash\\r\\nexport OPENAI_API_KEY=<your_api_key>\\r\\n```\\r\\n\\r\\nYou can also specify the model directly in the agent\'s configuration as shown below.\\r\\n\\r\\n```python\\r\\nllm_config = LLMConfig(\\r\\n    config_list=[{\\r\\n        \\"model\\": \\"gpt-4\\",\\r\\n        \\"api_key\\": \\"<azure_api_key>\\",\\r\\n        \\"base_url\\": \\"<azure api base url>\\",\\r\\n        \\"api_type\\": \\"azure\\",\\r\\n        \\"api_version\\": \\"2024-02-15-preview\\"\\r\\n    }],\\r\\n    temperature=0,\\r\\n)\\r\\n```\\r\\n\\r\\n\\r\\n### Installation\\r\\n\\r\\nThere are two ways to install AutoGen Studio - from PyPi or from source. We **recommend installing from PyPi** unless you plan to modify the source code.\\r\\n\\r\\n1. **Install from PyPi**\\r\\n\\r\\n   We recommend using a virtual environment (e.g., conda) to avoid conflicts with existing Python packages. With Python 3.10 or newer active in your virtual environment, use pip to install AutoGen Studio:\\r\\n\\r\\n   ```bash\\r\\n   pip install autogenstudio\\r\\n   ```\\r\\n\\r\\n2. **Install from Source**\\r\\n\\r\\n   > Note: This approach requires some familiarity with building interfaces in React.\\r\\n\\r\\n   If you prefer to install from source, ensure you have Python 3.10+ and Node.js (version above 14.15.0) installed. Here\'s how you get started:\\r\\n\\r\\n   - Clone the AutoGen Studio repository and install its Python dependencies:\\r\\n\\r\\n     ```bash\\r\\n     pip install -e .\\r\\n     ```\\r\\n\\r\\n   - Navigate to the `samples/apps/autogen-studio/frontend` directory, install dependencies, and build the UI:\\r\\n\\r\\n     ```bash\\r\\n     npm install -g gatsby-cli\\r\\n     npm install --global yarn\\r\\n     yarn install\\r\\n     yarn build\\r\\n     ```\\r\\n\\r\\n   For Windows users, to build the frontend, you may need alternative commands provided in the [autogen studio readme](https://github.com/microsoft/autogen/tree/main/samples/apps/autogen-studio).\\r\\n\\r\\n\\r\\n### Running the Application\\r\\n\\r\\nOnce installed, run the web UI by entering the following in your terminal:\\r\\n\\r\\n```bash\\r\\nautogenstudio ui --port 8081\\r\\n```\\r\\n\\r\\nThis will start the application on the specified port. Open your web browser and go to `http://localhost:8081/` to begin using AutoGen Studio.\\r\\n\\r\\nNow that you have AutoGen Studio installed and running, you are ready to explore its capabilities, including defining and modifying agent workflows, interacting with agents and sessions, and expanding agent skills.\\r\\n\\r\\n## What Can You Do with AutoGen Studio?\\r\\nThe AutoGen Studio UI is organized into 3 high level sections - **Build**, **Playground**, and **Gallery**.\\r\\n\\r\\n### Build\\r\\n\\r\\n![Specify Agents.](img/autogenstudio_config.png)\\r\\n\\r\\nThis section focuses on defining the properties of agents and agent workflows. It includes the following concepts:\\r\\n\\r\\n**Skills**: Skills are functions (e.g., Python functions) that describe how to solve a task. In general, a good skill has a descriptive name (e.g. `generate_images`), extensive docstrings and good defaults (e.g., writing out files to disk for persistence and reuse). You can add new skills to AutoGen Studio via the provided UI. At inference time, these skills are made available to the assistant agent as they address your tasks.\\r\\n\\r\\n![View and add skills.](img/autogenstudio_skills.png)\\r\\n<p align=\\"center\\"><em>AutoGen Studio Build View: View, add or edit skills that an agent can leverage in addressing tasks.</em></p>\\r\\n\\r\\n\\r\\n**Agents**: This provides an interface to declaratively specify properties for an AutoGen agent (mirrors most of the members of a base [AutoGen conversable agent](https://github.com/microsoft/autogen/blob/main/autogen/agentchat/conversable_agent.py) class).\\r\\n\\r\\n**Agent Workflows**: An agent workflow is a specification of a set of agents that can work together to accomplish a task. The simplest version of this is a setup with two agents \u2013 a user proxy agent (that represents a user i.e. it compiles code and prints result) and an assistant that can address task requests (e.g., generating plans, writing code, evaluating responses, proposing error recovery steps, etc.). A more complex flow could be a group chat where even more agents work towards a solution.\\r\\n\\r\\n\\r\\n\\r\\n### Playground\\r\\n\\r\\n![AutoGen Studio Playground View: Solving a task with multiple agents that generate a pdf document with images.](img/autogenstudio_home.png)\\r\\n<p align=\\"center\\"><em>AutoGen Studio Playground View: Agents collaborate, use available skills (ability to generate images) to address a user task (generate pdf\'s).</em></p>\\r\\n\\r\\n\\r\\nThe playground section is focused on interacting with agent workflows defined in the previous build section. It includes the following concepts:\\r\\n\\r\\n**Session**: A session refers to a period of continuous interaction or engagement with an agent workflow, typically characterized by a sequence of activities or operations aimed at achieving specific objectives. It includes the agent workflow configuration, the interactions between the user and the agents. A session can be \u201cpublished\u201d to a \u201cgallery\u201d.\\r\\n\\r\\n**Chat View**: A chat is a sequence of interactions between a user and an agent. It is a part of a session.\\r\\n\\r\\n### Gallery\\r\\n\\r\\nThis section is focused on sharing and reusing artifacts (e.g., workflow configurations, sessions, etc.).\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nAutoGen Studio comes with 3 example skills: `fetch_profile`, `find_papers`, `generate_images`. Please feel free to review the repo to learn more about how they work.\\r\\n\\r\\n\\r\\n\\r\\n## The AutoGen Studio API\\r\\n\\r\\nWhile  AutoGen Studio is a web interface, it is powered by an underlying python API that is reusable and modular. Importantly, we have implemented an API where agent workflows can be declaratively specified (in JSON), loaded and run. An example of the current API is shown below. Please consult the [AutoGen Studio repo](https://github.com/microsoft/autogen/tree/main/samples/apps/autogen-studio) for more details.\\r\\n\\r\\n```python\\r\\nimport json\\r\\nfrom autogenstudio import AutoGenWorkFlowManager, AgentWorkFlowConfig\\r\\n\\r\\n# load an agent specification in JSON\\r\\nagent_spec = json.load(open(\'agent_spec.json\'))\\r\\n\\r\\n# Create an AutoGen Workflow Configuration from the agent specification\\r\\nagent_work_flow_config = FlowConfig(**agent_spec)\\r\\n\\r\\n# Create a Workflow from the configuration\\r\\nagent_work_flow = AutoGenWorkFlowManager(agent_work_flow_config)\\r\\n\\r\\n# Run the workflow on a task\\r\\ntask_query = \\"What is the height of the Eiffel Tower?\\"\\r\\nagent_work_flow.run(message=task_query)\\r\\n```\\r\\n\\r\\n## Road Map and Next Steps\\r\\n\\r\\nAs we continue to develop and refine AutoGen Studio, the road map below outlines an array of enhancements and new features planned for future releases. Here\'s what users can look forward to:\\r\\n\\r\\n- **Complex Agent Workflows**: We\'re working on integrating support for more sophisticated agent workflows, such as `GroupChat`, allowing for richer interaction between multiple agents or dynamic topologies.\\r\\n- **Improved User Experience**: This includes features like streaming intermediate model output for real-time feedback, better summarization of agent responses, information on costs of each interaction. We will also invest in improving the workflow for composing and reusing agents. We will also explore support for more interactive human in the loop feedback to agents.\\r\\n- **Expansion of Agent Skills**: We will work towards improving the workflow for authoring, composing and reusing agent skills.\\r\\n- **Community Features**: Facilitation of sharing and collaboration within AutoGen Studio user community is a key goal. We\'re exploring options for sharing sessions and results more easily among users and contributing to a shared repository of skills, agents, and agent workflows.\\r\\n\\r\\n\\r\\n\\r\\n## Contribution Guide\\r\\n\\r\\nWe welcome contributions to AutoGen Studio. We recommend the following general steps to contribute to the project:\\r\\n\\r\\n- Review the overall AutoGen project [contribution guide](https://github.com/microsoft/autogen?tab=readme-ov-file#contributing).\\r\\n- Please review the AutoGen Studio [roadmap](https://github.com/microsoft/autogen/issues/737) to get a sense of the current priorities for the project. Help is appreciated especially with Studio issues tagged with `help-wanted`.\\r\\n- Please initiate a discussion on the roadmap issue or a new issue to discuss your proposed contribution.\\r\\n- Please review the autogenstudio dev branch here [dev branch].(https://github.com/microsoft/autogen/tree/autogenstudio) and use as a base for your contribution. This way, your contribution will be aligned with the latest changes in the AutoGen Studio project.\\r\\n- Submit a pull request with your contribution!\\r\\n- If you are modifying AutoGen Studio in vscode, it has its own devcontainer to simplify dev work. See instructions in `.devcontainer/README.md` on how to use it.\\r\\n- Please use the tag `studio` for any issues, questions, and PRs related to Studio.\\r\\n\\r\\n\\r\\n### FAQ\\r\\n\\r\\n**Q: Where can I adjust the default skills, agent and workflow configurations?**\\r\\nA: You can modify agent configurations directly from the UI or by editing the `autogentstudio/utils/dbdefaults.json` file which is used to initialize the database.\\r\\n\\r\\n**Q: If I want to reset the entire conversation with an agent, how do I go about it?**\\r\\nA: To reset your conversation history, you can delete the `database.sqlite` file. If you need to clear user-specific data, remove the relevant `autogenstudio/web/files/user/<user_id_md5hash>` folder.\\r\\n\\r\\n**Q: Is it possible to view the output and messages generated by the agents during interactions?**\\r\\nA: Yes, you can view the generated messages in the debug console of the web UI, providing insights into the agent interactions. Alternatively, you can inspect the `database.sqlite` file for a comprehensive record of messages.\\r\\n\\r\\n**Q: Where can I find documentation and support for AutoGen Studio?**\\r\\nA: We are constantly working to improve AutoGen Studio. For the latest updates, please refer to the [AutoGen Studio Readme](https://github.com/microsoft/autogen/tree/main/samples/apps/autogen-studio). For additional support, please open an issue on [GitHub](https://github.com/microsoft/autogen) or ask questions on [Discord](https://discord.gg/pAbnFJrkgZ).\\r\\n\\r\\n**Q: Can I use Other Models with AutoGen Studio?**\\r\\nYes. AutoGen standardizes on the openai model api format, and you can use any api server that offers an openai compliant endpoint. In the AutoGen Studio UI, each agent has an `llm_config` field where you can input your model endpoint details including `model name`, `api key`, `base url`, `model type` and `api version`. For Azure OpenAI models, you can find these details in the Azure portal. Note that for Azure OpenAI, the `model name` is the deployment id or engine, and the `model type` is \\"azure\\".\\r\\nFor other OSS models, we recommend using a server such as vllm to instantiate an openai compliant endpoint.\\r\\n\\r\\n**Q: The Server Starts But I Can\'t Access the UI**\\r\\nA: If you are running the server on a remote machine (or a local machine that fails to resolve localhost correstly), you may need to specify the host address. By default, the host address is set to `localhost`.  You can specify the host address using the `--host <host>` argument. For example, to start the server on port 8081 and local address such that it is accessible from other machines on the network, you can run the following command:\\r\\n\\r\\n```bash\\r\\nautogenstudio ui --port 8081 --host 0.0.0.0\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n<br />"},{"id":"/2023/11/26/Agent-AutoBuild","metadata":{"permalink":"/autogen/blog/2023/11/26/Agent-AutoBuild","source":"@site/blog/2023-11-26-Agent-AutoBuild/index.mdx","title":"Agent AutoBuild - Automatically Building Multi-agent Systems","description":"Overall structure of AutoBuild","date":"2023-11-26T00:00:00.000Z","formattedDate":"November 26, 2023","tags":[{"label":"LLM","permalink":"/autogen/blog/tags/llm"},{"label":"research","permalink":"/autogen/blog/tags/research"}],"readingTime":6.815,"hasTruncateMarker":false,"authors":[{"name":"Linxin Song","title":"MS student at Waseda University","url":"https://linxins97.github.io/","imageURL":"https://github.com/LinxinS97.png","key":"LinxinS97"},{"name":"Jieyu Zhang","title":"PhD student at University of Washington","url":"https://jieyuz2.github.io/","imageURL":"https://github.com/jieyuz2.png","key":"jieyuz2"}],"frontMatter":{"title":"Agent AutoBuild - Automatically Building Multi-agent Systems","authors":["LinxinS97","jieyuz2"],"tags":["LLM","research"]},"unlisted":false,"prevItem":{"title":"AutoGen Studio: Interactively Explore Multi-Agent Workflows","permalink":"/autogen/blog/2023/12/01/AutoGenStudio"},"nextItem":{"title":"How to Assess Utility of LLM-powered Applications?","permalink":"/autogen/blog/2023/11/20/AgentEval"}},"content":"![Overall structure of AutoBuild](img/agent_autobuild.png)\\n\\n**TL;DR:**\\nIntroducing **AutoBuild**, building multi-agent system automatically, fast, and easily for complex tasks with minimal\\nuser prompt required, powered by a new designed class **AgentBuilder**. AgentBuilder also supports open-source LLMs by\\nleveraging [vLLM](https://docs.vllm.ai/en/latest/index.html) and [FastChat](https://github.com/lm-sys/FastChat).\\nCheckout example notebooks and source code for reference:\\n\\n- [AutoBuild Examples](https://github.com/microsoft/autogen/blob/main/notebook/autobuild_basic.ipynb)\\n- [AgentBuilder](https://github.com/microsoft/autogen/blob/main/autogen/agentchat/contrib/agent_builder.py)\\n\\n## Introduction\\nIn this blog, we introduce **AutoBuild**, a pipeline that can automatically build multi-agent systems for complex tasks.\\nSpecifically, we design a new class called **AgentBuilder**, which will complete the generation of participant expert agents\\nand the construction of group chat automatically after the user provides descriptions of a building task and an execution task.\\n\\nAgentBuilder supports open-source models on Hugging Face powered by [vLLM](https://docs.vllm.ai/en/latest/index.html)\\nand [FastChat](https://github.com/lm-sys/FastChat). Once the user chooses to use open-source LLM, AgentBuilder will set\\nup an endpoint server automatically without any user participation.\\n\\n## Installation\\n- AutoGen:\\n```bash\\npip install pyautogen[autobuild]\\n```\\n- (Optional: if you want to use open-source LLMs) vLLM and FastChat\\n```bash\\npip install vllm fastchat\\n```\\n\\n## Basic Example\\nIn this section, we provide a step-by-step example of how to use AgentBuilder to build a multi-agent system for a specific task.\\n\\n### Step 1: prepare configurations\\nFirst, we need to prepare the Agent configurations.\\nSpecifically, a config path containing the model name and API key, and a default config for each agent, are required.\\n```python\\nconfig_file_or_env = \'/home/elpis_ubuntu/LLM/autogen/OAI_CONFIG_LIST\'  # modify path\\ndefault_llm_config = {\\n    \'temperature\': 0\\n}\\n```\\n\\n### Step 2: create an AgentBuilder instance\\nThen, we create an AgentBuilder instance with the config path and default config.\\nYou can also specific the builder model and agent model, which are the LLMs used for building and agent respectively.\\n```python\\nfrom autogen.agentchat.contrib.agent_builder import AgentBuilder\\n\\nbuilder = AgentBuilder(config_file_or_env=config_file_or_env, builder_model=\'gpt-4-1106-preview\', agent_model=\'gpt-4-1106-preview\')\\n```\\n\\n### Step 3: specify the building task\\nSpecify a building task with a general description. Building task will help the build manager (a LLM) decide what agents should be built.\\nNote that your building task should have a general description of the task. Adding some specific examples is better.\\n```python\\nbuilding_task = \\"Find a paper on arxiv by programming, and analyze its application in some domain. For example, find a latest paper about gpt-4 on arxiv and find its potential applications in software.\\"\\n```\\n\\n### Step 4: build group chat agents\\nUse `build()` to let the build manager (with a `builder_model` as backbone) complete the group chat agents generation.\\nIf you think coding is necessary for your task, you can use `coding=True` to add a user proxy (a local code interpreter) into the agent list as:\\n```python\\nagent_list, agent_configs = builder.build(building_task, default_llm_config, coding=True)\\n```\\nIf `coding` is not specified, AgentBuilder will determine on its own whether the user proxy should be added or not according to the task.\\nThe generated `agent_list` is a list of `AssistantAgent` instances.\\nIf `coding` is true, a user proxy (a `UserProxyAssistant` instance) will be added as the first element to the `agent_list`.\\n`agent_configs` is a list of agent configurations including agent name, backbone LLM model, and system message.\\nFor example\\n```\\n// an example of agent_configs. AgentBuilder will generate agents with the following configurations.\\n[\\n    {\\n        \\"name\\": \\"ArXiv_Data_Scraper_Developer\\",\\n        \\"model\\": \\"gpt-4-1106-preview\\",\\n        \\"system_message\\": \\"You are now in a group chat. You need to complete a task with other participants. As an ArXiv_Data_Scraper_Developer, your focus is to create and refine tools capable of intelligent search and data extraction from arXiv, honing in on topics within the realms of computer science and medical science. Utilize your proficiency in Python programming to design scripts that navigate, query, and parse information from the platform, generating valuable insights and datasets for analysis. \\\\n\\\\nDuring your mission, it\\\\u2019s not just about formulating queries; your role encompasses the optimization and precision of the data retrieval process, ensuring relevance and accuracy of the information extracted. If you encounter an issue with a script or a discrepancy in the expected output, you are encouraged to troubleshoot and offer revisions to the code you find in the group chat.\\\\n\\\\nWhen you reach a point where the existing codebase does not fulfill task requirements or if the operation of provided code is unclear, you should ask for help from the group chat manager. They will facilitate your advancement by providing guidance or appointing another participant to assist you. Your ability to adapt and enhance scripts based on peer feedback is critical, as the dynamic nature of data scraping demands ongoing refinement of techniques and approaches.\\\\n\\\\nWrap up your participation by confirming the user\'s need has been satisfied with the data scraping solutions you\'ve provided. Indicate the completion of your task by replying \\\\\\"TERMINATE\\\\\\" in the group chat.\\",\\n        \\"description\\": \\"ArXiv_Data_Scraper_Developer is a specialized software development role requiring proficiency in Python, including familiarity with web scraping libraries such as BeautifulSoup or Scrapy, and a solid understanding of APIs and data parsing. They must possess the ability to identify and correct errors in existing scripts and confidently engage in technical discussions to improve data retrieval processes. The role also involves a critical eye for troubleshooting and optimizing code to ensure efficient data extraction from the ArXiv platform for research and analysis purposes.\\"\\n    },\\n    ...\\n]\\n```\\n\\n### Step 5: execute the task\\nLet agents generated in `build()` complete the task collaboratively in a group chat.\\n```python\\nimport autogen\\n\\ndef start_task(execution_task: str, agent_list: list, llm_config: dict):\\n    config_list = autogen.config_list_from_json(config_file_or_env, filter_dict={\\"model\\": [\\"gpt-4-1106-preview\\"]})\\n\\n    group_chat = autogen.GroupChat(agents=agent_list, messages=[], max_round=12)\\n    manager = autogen.GroupChatManager(\\n        groupchat=group_chat, llm_config={\\"config_list\\": config_list, **llm_config}\\n    )\\n    agent_list[0].initiate_chat(manager, message=execution_task)\\n\\nstart_task(\\n    execution_task=\\"Find a recent paper about gpt-4 on arxiv and find its potential applications in software.\\",\\n    agent_list=agent_list,\\n    llm_config=default_llm_config\\n)\\n```\\n\\n### Step 6 (Optional): clear all agents and prepare for the next task\\nYou can clear all agents generated in this task by the following code if your task is completed or if the next task is largely different from the current task.\\n```python\\nbuilder.clear_all_agents(recycle_endpoint=True)\\n```\\nIf the agent\'s backbone is an open-source LLM, this process will also shut down the endpoint server. More details are in the next section.\\nIf necessary, you can use `recycle_endpoint=False` to retain the previous open-source LLM\'s endpoint server.\\n\\n## Save and Load\\nYou can save all necessary information of the built group chat agents by\\n```python\\nsaved_path = builder.save()\\n```\\nConfigurations will be saved in JSON format with the following content:\\n```json\\n// FILENAME: save_config_TASK_MD5.json\\n{\\n    \\"building_task\\": \\"Find a paper on arxiv by programming, and analysis its application in some domain. For example, find a latest paper about gpt-4 on arxiv and find its potential applications in software.\\",\\n    \\"agent_configs\\": [\\n        {\\n            \\"name\\": \\"...\\",\\n            \\"model\\": \\"...\\",\\n            \\"system_message\\": \\"...\\",\\n            \\"description\\": \\"...\\"\\n        },\\n        ...\\n    ],\\n    \\"manager_system_message\\": \\"...\\",\\n    \\"code_execution_config\\": {...},\\n    \\"default_llm_config\\": {...}\\n}\\n```\\nYou can provide a specific filename, otherwise, AgentBuilder will save config to the current path with the generated filename `save_config_TASK_MD5.json`.\\n\\nYou can load the saved config and skip the building process. AgentBuilder will create agents with those information without prompting the build manager.\\n```python\\nnew_builder = AgentBuilder(config_file_or_env=config_file_or_env)\\nagent_list, agent_config = new_builder.load(saved_path)\\nstart_task(...)  # skip build()\\n```\\n\\n## Use OpenAI Assistant\\n[Assistants API](https://platform.openai.com/docs/assistants/overview) allows you to build AI assistants within your own applications.\\nAn Assistant has instructions and can leverage models, tools, and knowledge to respond to user queries.\\nAutoBuild also supports the assistant API by adding `use_oai_assistant=True` to `build()`.\\n```python\\n# Transfer to the OpenAI Assistant API.\\nagent_list, agent_config = new_builder.build(building_task, default_llm_config, use_oai_assistant=True)\\n...\\n```\\n\\n## (Experimental) Use Open-source LLM\\nAutoBuild supports open-source LLM by [vLLM](https://docs.vllm.ai/en/latest/index.html) and [FastChat](https://github.com/lm-sys/FastChat).\\nCheck the supported model list [here](https://docs.vllm.ai/en/latest/models/supported_models.html).\\nAfter satisfying the requirements, you can add an open-source LLM\'s huggingface repository to the config file,\\n```json,\\n// Add the LLM\'s huggingface repo to your config file and use EMPTY as the api_key.\\n[\\n    ...\\n    {\\n        \\"model\\": \\"meta-llama/Llama-2-13b-chat-hf\\",\\n        \\"api_key\\": \\"EMPTY\\"\\n    }\\n]\\n```\\nand specify it when initializing AgentBuilder.\\nAgentBuilder will automatically set up an endpoint server for open-source LLM. Make sure you have sufficient GPUs resources.\\n\\n## Future work/Roadmap\\n- Let the builder select the best agents from a given library/database to solve the task.\\n\\n## Summary\\nWe propose AutoBuild with a new class `AgentBuilder`.\\nAutoBuild can help user solve their complex task with an automatically built multi-agent system.\\nAutoBuild supports open-source LLMs and GPTs API, giving users more flexibility to choose their favorite models.\\nMore advanced features are coming soon."},{"id":"/2023/11/20/AgentEval","metadata":{"permalink":"/autogen/blog/2023/11/20/AgentEval","source":"@site/blog/2023-11-20-AgentEval/index.mdx","title":"How to Assess Utility of LLM-powered Applications?","description":"Fig.1: A verification framework","date":"2023-11-20T00:00:00.000Z","formattedDate":"November 20, 2023","tags":[{"label":"LLM","permalink":"/autogen/blog/tags/llm"},{"label":"GPT","permalink":"/autogen/blog/tags/gpt"},{"label":"evaluation","permalink":"/autogen/blog/tags/evaluation"},{"label":"task utility","permalink":"/autogen/blog/tags/task-utility"}],"readingTime":9.48,"hasTruncateMarker":false,"authors":[{"name":"Julia Kiseleva","title":"Senior Researcher at Microsoft Research","url":"https://github.com/julianakiseleva/","imageURL":"https://avatars.githubusercontent.com/u/5908392?v=4","key":"julianakiseleva"},{"name":"Negar Arabzadeh","title":"PhD student at the University of Waterloo","url":"https://www.negara.me/","imageURL":"https://github.com/Narabzad.png","key":"narabzad"}],"frontMatter":{"title":"How to Assess Utility of LLM-powered Applications?","authors":["julianakiseleva","narabzad"],"tags":["LLM","GPT","evaluation","task utility"]},"unlisted":false,"prevItem":{"title":"Agent AutoBuild - Automatically Building Multi-agent Systems","permalink":"/autogen/blog/2023/11/26/Agent-AutoBuild"},"nextItem":{"title":"AutoGen Meets GPTs","permalink":"/autogen/blog/2023/11/13/OAI-assistants"}},"content":"![Fig.1: A verification framework](img/agenteval-CQ.png)\\r\\n\\r\\n<p align=\\"center\\"><em>Fig.1 illustrates the general flow of AgentEval</em></p>\\r\\n\\r\\n**TL;DR:**\\r\\n* As a developer of an LLM-powered application, how can you assess the utility it brings to end users while helping them with their tasks?\\r\\n* To shed light on the question above, we introduce `AgentEval` \u2014 the first version of the framework to assess the utility of any LLM-powered application crafted to assist users in specific tasks.  AgentEval aims to simplify the evaluation process by automatically proposing a set of criteria tailored to the unique purpose of your application. This allows for a comprehensive assessment, quantifying the utility of your application against the suggested criteria.\\r\\n* We demonstrate how `AgentEval` work using [math problems dataset](https://microsoft.github.io/autogen/blog/2023/06/28/MathChat) as an example in the [following notebook](https://github.com/microsoft/autogen/blob/main/notebook/agenteval_cq_math.ipynb). Any feedback would be useful for future development. Please contact us on our [Discord](http://aka.ms/autogen-dc).\\r\\n\\r\\n\\r\\n## Introduction\\r\\n\\r\\n AutoGen aims to simplify the development of LLM-powered multi-agent systems for various applications, ultimately making end users\' lives easier by assisting with their tasks. Next, we all yearn to understand how our developed systems perform, their utility for users, and, perhaps most crucially, how we can enhance them. Directly evaluating multi-agent systems poses challenges as current approaches predominantly rely on success metrics \u2013 essentially, whether the agent accomplishes tasks. However, comprehending user interaction with a system involves far more than success alone. Take math problems, for instance; it\'s not merely about the agent solving the problem. Equally significant is its ability to convey solutions based on various criteria, including completeness, conciseness, and the clarity of the provided explanation. Furthermore, success isn\'t always clearly defined for every task.\\r\\n\\r\\n Rapid advances in LLMs and multi-agent systems have brought forth many emerging capabilities that we\'re keen on translating into tangible utilities for end users. We introduce the first version of `AgentEval` framework - a tool crafted to empower developers in swiftly gauging the utility of LLM-powered applications designed to help end users accomplish the desired task.\\r\\n\\r\\n\\r\\n![Fig.2: An overview of the tasks taxonomy](img/tasks-taxonomy.png)\\r\\n<p align=\\"center\\"><em>Fig. 2 provides  an overview of the tasks taxonomy</em></p>\\r\\n\\r\\n\\r\\nLet\'s first look into an overview of the suggested task taxonomy that a multi-agent system can be designed for. In general, the tasks can be split into two types, where:\\r\\n* _Success is not clearly defined_ - refer to instances when users utilize a system in an assistive manner, seeking suggestions rather than expecting the system to solve the task. For example, a user might request the system to generate an email. In many cases, this generated content serves as a template that the user will later edit. However, defining success precisely for such tasks is relatively complex.\\r\\n* _Success is clearly defined_ - refer to instances where we can clearly define whether a system solved the task or not. Consider agents that assist in accomplishing household tasks, where the definition of success is clear and measurable. This category can be further divided into two separate subcategories:\\r\\n   * _The optimal solution exits_ - these are tasks where only one solution is possible. For example, if you ask your assistant to turn on the light, the success of this task is clearly defined, and there is only one way to accomplish it.\\r\\n   * _Multiple solutions exist_ - increasingly, we observe situations where multiple trajectories of agent behavior can lead to either success or failure. In such cases, it is crucial to differentiate between the various successful and unsuccessful trajectories. For example, when you ask the agent to suggest you a food recipe or tell you a joke.\\r\\n\\r\\nIn our `AgentEval` framework, we are currently focusing on tasks where _Success is clearly defined_. Next, we will introduce the suggested framework.\\r\\n\\r\\n## `AgentEval` Framework\\r\\n\\r\\nOur previous research on [assistive agents in Minecraft](https://github.com/microsoft/iglu-datasets) suggested that the most optimal way to obtain human judgments is to present humans with two agents side by side and ask for preferences. In this setup of pairwise comparison, humans can develop criteria to explain why they prefer the behavior of one agent over another. For instance, _\'the first agent was faster in execution,\'_ or _\'the second agent moves more naturally.\'_ So, the comparative nature led humans to come up with a list of criteria that helps to infer the utility of the task. With this idea in mind, we designed `AgentEval` (shown in Fig. 1), where we employ LLMs to help us understand, verify, and assess task *utility* for the multi-agent system. Namely:\\r\\n\\r\\n* The goal of `CriticAgent` is to suggest the list of criteria (Fig. 1), that can be used to assess task utility. This is an example of how `CriticAgent` is defined using `Autogen`:\\r\\n\\r\\n```python\\r\\ncritic = autogen.AssistantAgent(\\r\\n    name=\\"critic\\",\\r\\n    llm_config={\\"config_list\\": config_list},\\r\\n    system_message=\\"\\"\\"You are a helpful assistant. You suggest criteria for evaluating different tasks. They should be distinguishable, quantifiable, and not redundant.\\r\\n    Convert the evaluation criteria into a dictionary where the keys are the criteria.\\r\\n    The value of each key is a dictionary as follows {\\"description\\": criteria description, \\"accepted_values\\": possible accepted inputs for this key}\\r\\n    Make sure the keys are criteria for assessing the given task. \\"accepted_values\\" include the acceptable inputs for each key that are fine-grained and preferably multi-graded levels. \\"description\\" includes the criterion description.\\r\\n    Return only the dictionary.\\"\\"\\"\\r\\n)\\r\\n```\\r\\n\\r\\nNext, the critic is given successful and failed examples of the task execution; then, it is able to return a list of criteria (Fig. 1). For reference, use the [following notebook](https://github.com/microsoft/autogen/blob/main/notebook/agenteval_cq_math.ipynb).\\r\\n\\r\\n* The goal of `QuantifierAgent` is to quantify each of the suggested criteria (Fig. 1), providing us with an idea of the utility of this system for the given task. Here is an example of how it can be defined:\\r\\n\\r\\n```python\\r\\nquantifier = autogen.AssistantAgent(\\r\\n    name=\\"quantifier\\",\\r\\n    llm_config={\\"config_list\\": config_list},\\r\\n    system_message = \\"\\"\\"You are a helpful assistant. You quantify the output of different tasks based on the given criteria.\\r\\n    The criterion is given in a dictionary format where each key is a distinct criteria.\\r\\n    The value of each key is a dictionary as follows {\\"description\\": criteria description , \\"accepted_values\\": possible accepted inputs for this key}\\r\\n    You are going to quantify each of the criteria for a given task based on the task description.\\r\\n    Return a dictionary where the keys are the criteria and the values are the assessed performance based on accepted values for each criteria.\\r\\n    Return only the dictionary.\\"\\"\\"\\r\\n\\r\\n)\\r\\n```\\r\\n\\r\\n## `AgentEval` Results based on Math Problems Dataset\\r\\n\\r\\n As an example, after running CriticAgent, we obtained the following criteria to verify the results for math problem dataset:\\r\\n\\r\\n| Criteria      | Description | Accepted Values|\\r\\n|-----------|-----|----------------|\\r\\n| Problem Interpretation      | Ability to correctly interpret the problem  | [\\"completely off\\", \\"slightly relevant\\", \\"relevant\\", \\"mostly accurate\\", \\"completely accurate\\"]|\\r\\n| Mathematical Methodology      | Adequacy of the chosen mathematical or algorithmic methodology for the question  | [\\"inappropriate\\", \\"barely adequate\\", \\"adequate\\", \\"mostly effective\\", \\"completely effective\\"] |\\r\\n| Calculation Correctness       | Accuracy of calculations made and solutions given  |   [\\"completely incorrect\\", \\"mostly incorrect\\", \\"neither\\", \\"mostly correct\\", \\"completely correct\\"]     |\\r\\n| Explanation Clarity       | Clarity and comprehensibility of explanations, including language use and structure  | [\\"not at all clear\\", \\"slightly clear\\", \\"moderately clear\\", \\"very clear\\", \\"completely clear\\"] |\\r\\n| Code Efficiency       |  Quality of code in terms of efficiency and elegance |[\\"not at all efficient\\", \\"slightly efficient\\", \\"moderately efficient\\", \\"very efficient\\", \\"extremely efficient\\"] |\\r\\n| Code Correctness      | Correctness of the provided code  |  [\\"completely incorrect\\", \\"mostly incorrect\\", \\"partly correct\\", \\"mostly correct\\", \\"completely correct\\"]\\r\\n\\r\\n\\r\\nThen, after running QuantifierAgent, we obtained the results presented in Fig. 3, where you can see three models:\\r\\n* AgentChat\\r\\n* ReAct\\r\\n* GPT-4 Vanilla Solver\\r\\n\\r\\nLighter colors represent estimates for failed cases, and brighter colors show how discovered criteria were quantified.\\r\\n\\r\\n![Fig.3: Results based on overall math problems dataset `_s` stands for successful cases, `_f` - stands for failed cases](img/math-problems-plot.png)\\r\\n<p align=\\"center\\"><em>Fig.3 presents results based on overall math problems dataset `_s` stands for successful cases, `_f` - stands for failed cases</em></p>\\r\\n\\r\\nWe note that while applying agentEval to math problems, the agent was not exposed to any ground truth information about the problem. As such, this figure illustrates an estimated performance of the three different agents, namely, Autogen (blue), Gpt-4 (red), and ReAct (green). We observe that by comparing the performance of any of the three agents in successful cases (dark bars of any color) versus unsuccessful cases (lighter version of the same bar), we note that AgentEval was able to assign higher quantification to successful cases than that of failed ones. This observation verifies AgentEval\'s ability for task utility prediction. Additionally, AgentEval allows us to go beyond just a binary definition of success, enabling a more in-depth comparison between successful and failed cases.\\r\\n\\r\\nIt\'s important not only to identify what is not working but also to recognize what and why actually went well.\\r\\n\\r\\n## Limitations and Future Work\\r\\nThe current implementation of `AgentEval` has a number of limitations which are planning to overcome in the future:\\r\\n* The list of criteria varies per run (unless you store a seed). We would recommend to run `CriticAgent` at least two times, and pick criteria you think is important for your domain.\\r\\n* The results of the `QuantifierAgent` can vary with each run, so we recommend conducting multiple runs to observe the extent of result variations.\\r\\n\\r\\nTo mitigate the limitations mentioned above, we are working on VerifierAgent, whose goal is to stabilize the results and provide additional explanations.\\r\\n\\r\\n## Summary\\r\\n`CriticAgent` and `QuantifierAgent` can be applied to the logs of any type of application, providing you with an in-depth understanding of the utility your solution brings to the user for a given task.\\r\\n\\r\\nWe would love to hear about how AgentEval works for your application. Any feedback would be useful for future development. Please contact us on our [Discord](http://aka.ms/autogen-dc).\\r\\n\\r\\n\\r\\n## Previous Research\\r\\n\\r\\n```\\r\\n@InProceedings{pmlr-v176-kiseleva22a,\\r\\n  title = \\"Interactive Grounded Language Understanding in a Collaborative Environment: IGLU 2021\\",\\r\\n  author = \\"Kiseleva, Julia and Li, Ziming and Aliannejadi, Mohammad and Mohanty, Shrestha and ter Hoeve, Maartje and Burtsev, Mikhail and Skrynnik, Alexey and Zholus, Artem and Panov, Aleksandr and Srinet, Kavya and Szlam, Arthur and Sun, Yuxuan and Hofmann, Katja and C{\\\\^o}t{\\\\\'e}, Marc-Alexandre and Awadallah, Ahmed and Abdrazakov, Linar and Churin, Igor and Manggala, Putra and Naszadi, Kata and van der Meer, Michiel and Kim, Taewoon\\",\\r\\n  booktitle = \\"Proceedings of the NeurIPS 2021 Competitions and Demonstrations Track\\",\\r\\n  pages = \\"146--161\\",\\r\\n  year = 2022,\\r\\n  editor = \\"Kiela, Douwe and Ciccone, Marco and Caputo, Barbara\\",\\r\\n  volume = 176,\\r\\n  series = \\"Proceedings of Machine Learning Research\\",\\r\\n  month = \\"06--14 Dec\\",\\r\\n  publisher = \\"PMLR\\",\\r\\n  pdf = \\t {https://proceedings.mlr.press/v176/kiseleva22a/kiseleva22a.pdf},\\r\\n  url = \\t {https://proceedings.mlr.press/v176/kiseleva22a.html}.\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n```\\r\\n@InProceedings{pmlr-v220-kiseleva22a,\\r\\n  title = \\"Interactive Grounded Language Understanding in a Collaborative Environment: Retrospective on Iglu 2022 Competition\\",\\r\\n  author = \\"Kiseleva, Julia and Skrynnik, Alexey and Zholus, Artem and Mohanty, Shrestha and Arabzadeh, Negar and C\\\\^{o}t\\\\\'e, Marc-Alexandre and Aliannejadi, Mohammad and Teruel, Milagro and Li, Ziming and Burtsev, Mikhail and ter Hoeve, Maartje and Volovikova, Zoya and Panov, Aleksandr and Sun, Yuxuan and Srinet, Kavya and Szlam, Arthur and Awadallah, Ahmed and Rho, Seungeun and Kwon, Taehwan and Wontae Nam, Daniel and Bivort Haiek, Felipe and Zhang, Edwin and Abdrazakov, Linar and Qingyam, Guo and Zhang, Jason and Guo, Zhibin\\",\\r\\n  booktitle = \\"Proceedings of the NeurIPS 2022 Competitions Track\\",\\r\\n  pages = \\"204--216\\",\\r\\n  year = 2022,\\r\\n  editor = \\"Ciccone, Marco and Stolovitzky, Gustavo and Albrecht, Jacob\\",\\r\\n  volume = 220,\\r\\n  series = \\"Proceedings of Machine Learning Research\\",\\r\\n  month = \\"28 Nov--09 Dec\\",\\r\\n  publisher = \\"PMLR\\",\\r\\n  pdf = \\"https://proceedings.mlr.press/v220/kiseleva22a/kiseleva22a.pdf\\",\\r\\n  url = \\"https://proceedings.mlr.press/v220/kiseleva22a.html\\".\\r\\n}\\r\\n```"},{"id":"/2023/11/13/OAI-assistants","metadata":{"permalink":"/autogen/blog/2023/11/13/OAI-assistants","source":"@site/blog/2023-11-13-OAI-assistants/index.mdx","title":"AutoGen Meets GPTs","description":"OpenAI Assistant","date":"2023-11-13T00:00:00.000Z","formattedDate":"November 13, 2023","tags":[{"label":"openai-assistant","permalink":"/autogen/blog/tags/openai-assistant"}],"readingTime":2.03,"hasTruncateMarker":false,"authors":[{"name":"Gagan Bansal","title":"Senior Researcher at Microsoft Research","url":"https://www.linkedin.com/in/gagan-bansal/","imageURL":"https://github.com/gagb.png","key":"gagb"}],"frontMatter":{"title":"AutoGen Meets GPTs","authors":"gagb","tags":["openai-assistant"]},"unlisted":false,"prevItem":{"title":"How to Assess Utility of LLM-powered Applications?","permalink":"/autogen/blog/2023/11/20/AgentEval"},"nextItem":{"title":"EcoAssistant - Using LLM Assistants More Accurately and Affordably","permalink":"/autogen/blog/2023/11/09/EcoAssistant"}},"content":"![OpenAI Assistant](img/teaser.jpg)\\n<p align=\\"center\\"><em>AutoGen enables collaboration among multiple ChatGPTs for complex tasks.</em></p>\\n\\n\\n## TL;DR\\nOpenAI assistants are now integrated into AutoGen via [`GPTAssistantAgent`](https://github.com/microsoft/autogen/blob/main/autogen/agentchat/contrib/gpt_assistant_agent.py).\\nThis enables multiple OpenAI assistants, which form the backend of the now popular GPTs, to collaborate and tackle complex tasks.\\nCheckout example notebooks for reference:\\n* [Basic example](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_oai_assistant_twoagents_basic.ipynb)\\n* [Code interpreter](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_oai_code_interpreter.ipynb)\\n* [Function calls](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_oai_assistant_function_call.ipynb)\\n\\n\\n## Introduction\\nEarlier last week, OpenAI introduced [GPTs](https://openai.com/blog/introducing-gpts), giving users ability to create custom ChatGPTs tailored for them.\\n*But what if these individual GPTs could collaborate to do even more?*\\nFortunately, because of AutoGen, this is now a reality!\\nAutoGen has been pioneering agents and supporting [multi-agent workflows](https://aka.ms/autogen-pdf) since earlier this year, and now (starting with version 0.2.0b5) we are introducing compatibility with the [Assistant API](https://openai.com/blog/introducing-gpts), which is currently in beta preview.\\n\\nTo accomplish this, we\'ve added a new (experimental) agent called the `GPTAssistantAgent` that\\nlets you seamlessly add these new OpenAI assistants into AutoGen-based multi-agent workflows.\\nThis integration shows great potential and synergy, and we plan to continue enhancing it.\\n\\n## Installation\\n\\n```bash\\npip install pyautogen==0.2.0b5\\n```\\n\\n## Basic Example\\n\\nHere\'s a basic example that uses a `UserProxyAgent` to allow an interface\\nwith the `GPTAssistantAgent`.\\n\\n\\nFirst, import the new agent and setup `config_list`:\\n```python\\nfrom autogen import config_list_from_json\\nfrom autogen.agentchat.contrib.gpt_assistant_agent import GPTAssistantAgent\\nfrom autogen import UserProxyAgent\\n\\nconfig_list = config_list_from_json(\\"OAI_CONFIG_LIST\\")\\n```\\n\\nThen simply define the OpenAI assistant agent and give it the task!\\n```python\\n# creates new assistant using Assistant API\\ngpt_assistant = GPTAssistantAgent(\\n    name=\\"assistant\\",\\n    llm_config={\\n        \\"config_list\\": config_list,\\n        \\"assistant_id\\": None\\n    })\\n\\nuser_proxy = UserProxyAgent(name=\\"user_proxy\\",\\n    code_execution_config={\\n        \\"work_dir\\": \\"coding\\"\\n    },\\n    human_input_mode=\\"NEVER\\")\\n\\nuser_proxy.initiate_chat(gpt_assistant, message=\\"Print hello world\\")\\n```\\n\\n`GPTAssistantAgent` supports both creating new OpenAI assistants or reusing existing assistants\\n(e.g, by providing an `assistant_id`).\\n\\n\\n## Code Interpreter Example\\n\\n`GPTAssistantAgent` allows you to specify an OpenAI tools\\n(e.g., function calls, code interpreter, etc). The example below enables an assistant\\n that can use OpenAI code interpreter to solve tasks.\\n\\n```python\\n# creates new assistant using Assistant API\\ngpt_assistant = GPTAssistantAgent(\\n    name=\\"assistant\\",\\n    llm_config={\\n        \\"config_list\\": config_list,\\n        \\"assistant_id\\": None,\\n        \\"tools\\": [\\n            {\\n                \\"type\\": \\"code_interpreter\\"\\n            }\\n        ],\\n    })\\n\\nuser_proxy = UserProxyAgent(name=\\"user_proxy\\",\\n    code_execution_config={\\n        \\"work_dir\\": \\"coding\\"\\n    },\\n    human_input_mode=\\"NEVER\\")\\n\\nuser_proxy.initiate_chat(gpt_assistant, message=\\"Print hello world\\")\\n```\\n\\nCheckout more examples [here](https://github.com/microsoft/autogen/tree/main/notebook).\\n\\n## Limitations and Future Work\\n\\n- Group chat managers using GPT assistant are pending.\\n- GPT assistants with multimodal capabilities haven\'t been released yet but we are committed to support them.\\n\\n## Acknowledgements\\n\\n`GPTAssistantAgent` was made possible through collaboration with\\n[@IANTHEREAL](https://github.com/IANTHEREAL),\\n[Jiale Liu](https://leoljl.github.io),\\n[Yiran Wu](https://github.com/kevin666aa),\\n[Qingyun Wu](https://qingyun-wu.github.io/),\\n[Chi Wang](https://www.microsoft.com/en-us/research/people/chiw/), and many other AutoGen maintainers."},{"id":"/2023/11/09/EcoAssistant","metadata":{"permalink":"/autogen/blog/2023/11/09/EcoAssistant","source":"@site/blog/2023-11-09-EcoAssistant/index.mdx","title":"EcoAssistant - Using LLM Assistants More Accurately and Affordably","description":"system","date":"2023-11-09T00:00:00.000Z","formattedDate":"November 9, 2023","tags":[{"label":"LLM","permalink":"/autogen/blog/tags/llm"},{"label":"RAG","permalink":"/autogen/blog/tags/rag"},{"label":"cost-effectiveness","permalink":"/autogen/blog/tags/cost-effectiveness"}],"readingTime":4.565,"hasTruncateMarker":false,"authors":[{"name":"Jieyu Zhang","title":"PhD student at University of Washington","url":"https://jieyuz2.github.io/","imageURL":"https://github.com/jieyuz2.png","key":"jieyuz2"}],"frontMatter":{"title":"EcoAssistant - Using LLM Assistants More Accurately and Affordably","authors":"jieyuz2","tags":["LLM","RAG","cost-effectiveness"]},"unlisted":false,"prevItem":{"title":"AutoGen Meets GPTs","permalink":"/autogen/blog/2023/11/13/OAI-assistants"},"nextItem":{"title":"Multimodal with GPT-4V and LLaVA","permalink":"/autogen/blog/2023/11/06/LMM-Agent"}},"content":"![system](img/system.png)\\n\\n**TL;DR:**\\n* Introducing the **EcoAssistant**, which is designed to solve user queries more accurately and affordably.\\n* We show how to let the LLM assistant agent leverage external API to solve user query.\\n* We show how to reduce the cost of using GPT models via **Assistant Hierarchy**.\\n* We show how to leverage the idea of Retrieval-augmented Generation (RAG) to improve the success rate via **Solution Demonstration**.\\n\\n\\n## EcoAssistant\\n\\nIn this blog, we introduce the **EcoAssistant**, a system built upon AutoGen with the goal of solving user queries more accurately and affordably.\\n\\n### Problem setup\\n\\nRecently, users have been using conversational LLMs such as ChatGPT for various queries.\\nReports indicate that 23% of ChatGPT user queries are for knowledge extraction purposes.\\nMany of these queries require knowledge that is external to the information stored within any pre-trained large language models (LLMs).\\nThese tasks can only be completed by generating code to fetch necessary information via external APIs that contain the requested information.\\nIn the table below, we show three types of user queries that we aim to address in this work.\\n\\n| Dataset | API | Example query |\\n|-------------|----------|----------|\\n| Places| [Google Places](https://developers.google.com/maps/documentation/places/web-service/overview) | I\u2019m looking for a 24-hour pharmacy in Montreal, can you find one for me? |\\n| Weather | [Weather API](https://www.weatherapi.com) | What is the current cloud coverage in Mumbai, India? |\\n| Stock | [Alpha Vantage Stock API](https://www.alphavantage.co/documentation/) | Can you give me the opening price of Microsoft for the month of January 2023? |\\n\\n\\n### Leveraging external APIs\\n\\nTo address these queries, we first build a **two-agent system** based on AutoGen,\\nwhere the first agent is a **LLM assistant agent** (`AssistantAgent` in AutoGen) that is responsible for proposing and refining the code and\\nthe second agent is a **code executor agent** (`UserProxyAgent` in AutoGen) that would extract the generated code and execute it, forwarding the output back to the LLM assistant agent.\\nA visualization of the two-agent system is shown below.\\n\\n![chat](img/chat.png)\\n\\nTo instruct the assistant agent to leverage external APIs, we only need to add the API name/key dictionary at the beginning of the initial message.\\nThe template is shown below, where the red part is the information of APIs and black part is user query.\\n\\n![template](img/template.png)\\n\\nImportantly, we don\'t want to reveal our real API key to the assistant agent for safety concerns.\\nTherefore, we use a **fake API key** to replace the real API key in the initial message.\\nIn particular, we generate a random token (e.g., `181dbb37`) for each API key and replace the real API key with the token in the initial message.\\nThen, when the code executor execute the code, the fake API key would be automatically replaced by the real API key.\\n\\n\\n### Solution Demonstration\\nIn most practical scenarios, queries from users would appear sequentially over time.\\nOur **EcoAssistant** leverages past success to help the LLM assistants address future queries via **Solution Demonstration**.\\nSpecifically, whenever a query is deemed successfully resolved by user feedback, we capture and store the query and the final generated code snippet.\\nThese query-code pairs are saved in a specialized vector database. When new queries appear, **EcoAssistant** retrieves the most similar query from the database, which is then appended with the associated code to the initial prompt for the new query, serving as a demonstration.\\nThe new template of initial message is shown below, where the blue part corresponds to the solution demonstration.\\n\\n![template](img/template-demo.png)\\n\\nWe found that this utilization of past successful query-code pairs improves the query resolution process with fewer iterations and enhances the system\'s performance.\\n\\n\\n### Assistant Hierarchy\\nLLMs usually have different prices and performance, for example, GPT-3.5-turbo is much cheaper than GPT-4 but also less accurate.\\nThus, we propose the **Assistant Hierarchy** to reduce the cost of using LLMs.\\nThe core idea is that we use the cheaper LLMs first and only use the more expensive LLMs when necessary.\\nBy this way, we are able to reduce the reliance on expensive LLMs and thus reduce the cost.\\nIn particular, given multiple LLMs, we initiate one assistant agent for each and start the conversation with the most cost-effective LLM assistant.\\nIf the conversation between the current LLM assistant and the code executor concludes without successfully resolving the query, **EcoAssistant** would then restart the conversation with the next more expensive LLM assistant in the hierarchy.\\nWe found that this strategy significantly reduces costs while still effectively addressing queries.\\n\\n### A Synergistic Effect\\nWe found that the **Assistant Hierarchy** and **Solution Demonstration** of **EcoAssistant** have a synergistic effect.\\nBecause the query-code database is shared by all LLM assistants, even without specialized design,\\nthe solution from more powerful LLM assistant (e.g., GPT-4) could be later retrieved to guide weaker LLM assistant (e.g., GPT-3.5-turbo).\\nSuch a synergistic effect further improves the performance and reduces the cost of **EcoAssistant**.\\n\\n### Experimental Results\\n\\nWe evaluate **EcoAssistant** on three datasets: Places, Weather, and Stock. When comparing it with a single GPT-4 assistant, we found that **EcoAssistant** achieves a higher success rate with a lower cost as shown in the figure below.\\nFor more details about the experimental results and other experiments, please refer to our [paper](https://arxiv.org/abs/2310.03046).\\n\\n![exp](img/results.png)\\n\\n## Further reading\\n\\nPlease refer to our [paper](https://arxiv.org/abs/2310.03046) and [codebase](https://github.com/JieyuZ2/EcoAssistant) for more details about **EcoAssistant**.\\n\\nIf you find this blog useful, please consider citing:\\n\\n```bibtex\\n@article{zhang2023ecoassistant,\\n  title={EcoAssistant: Using LLM Assistant More Affordably and Accurately},\\n  author={Zhang, Jieyu and Krishna, Ranjay and Awadallah, Ahmed H and Wang, Chi},\\n  journal={arXiv preprint arXiv:2310.03046},\\n  year={2023}\\n}\\n```"},{"id":"/2023/11/06/LMM-Agent","metadata":{"permalink":"/autogen/blog/2023/11/06/LMM-Agent","source":"@site/blog/2023-11-06-LMM-Agent/index.mdx","title":"Multimodal with GPT-4V and LLaVA","description":"LMM Teaser","date":"2023-11-06T00:00:00.000Z","formattedDate":"November 6, 2023","tags":[{"label":"LMM","permalink":"/autogen/blog/tags/lmm"},{"label":"multimodal","permalink":"/autogen/blog/tags/multimodal"}],"readingTime":2.03,"hasTruncateMarker":false,"authors":[{"name":"Beibin Li","title":"Senior Research Engineer at Microsoft","url":"https://github.com/beibinli","imageURL":"https://github.com/beibinli.png","key":"beibinli"}],"frontMatter":{"title":"Multimodal with GPT-4V and LLaVA","authors":"beibinli","tags":["LMM","multimodal"]},"unlisted":false,"prevItem":{"title":"EcoAssistant - Using LLM Assistants More Accurately and Affordably","permalink":"/autogen/blog/2023/11/09/EcoAssistant"},"nextItem":{"title":"AutoGen\'s Teachable Agents","permalink":"/autogen/blog/2023/10/26/TeachableAgent"}},"content":"![LMM Teaser](img/teaser.png)\\n\\n**In Brief:**\\n* Introducing the **Multimodal Conversable Agent** and the **LLaVA Agent** to enhance LMM functionalities.\\n* Users can input text and images simultaneously using the `<img img_path>` tag to specify image loading.\\n* Demonstrated through the [GPT-4V notebook](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_lmm_gpt-4v.ipynb).\\n* Demonstrated through the [LLaVA notebook](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_lmm_llava.ipynb).\\n\\n## Introduction\\nLarge multimodal models (LMMs) augment large language models (LLMs) with the ability to process multi-sensory data.\\n\\nThis blog post and the latest AutoGen update concentrate on visual comprehension. Users can input images, pose questions about them, and receive text-based responses from these LMMs.\\nWe support the `gpt-4-vision-preview` model from OpenAI and `LLaVA` model from Microsoft now.\\n\\nHere, we emphasize the **Multimodal Conversable Agent** and the **LLaVA Agent** due to their growing popularity.\\nGPT-4V represents the forefront in image comprehension, while LLaVA is an efficient model, fine-tuned from LLama-2.\\n\\n## Installation\\nIncorporate the `lmm` feature during AutoGen installation:\\n\\n```bash\\npip install \\"pyautogen[lmm]\\"\\n```\\n\\nSubsequently, import the **Multimodal Conversable Agent** or **LLaVA Agent** from AutoGen:\\n\\n```python\\nfrom autogen.agentchat.contrib.multimodal_conversable_agent import MultimodalConversableAgent  # for GPT-4V\\nfrom autogen.agentchat.contrib.llava_agent import LLaVAAgent  # for LLaVA\\n```\\n\\n## Usage\\n\\nA simple syntax has been defined to incorporate both messages and images within a single string.\\n\\nExample of an in-context learning prompt:\\n\\n```python\\nprompt = \\"\\"\\"You are now an image classifier for facial expressions. Here are\\nsome examples.\\n\\n<img happy.jpg> depicts a happy expression.\\n<img http://some_location.com/sad.jpg> represents a sad expression.\\n<img obama.jpg> portrays a neutral expression.\\n\\nNow, identify the facial expression of this individual: <img unknown.png>\\n\\"\\"\\"\\n\\nagent = MultimodalConversableAgent()\\nuser = UserProxyAgent()\\nuser.initiate_chat(agent, message=prompt)\\n```\\n\\nThe `MultimodalConversableAgent` interprets the input prompt, extracting images from local or internet sources.\\n\\n## Advanced Usage\\nSimilar to other AutoGen agents, multimodal agents support multi-round dialogues with other agents, code generation, factual queries, and management via a GroupChat interface.\\n\\nFor example, the `FigureCreator` in our [GPT-4V notebook](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_lmm_gpt-4v.ipynb) and [LLaVA notebook](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_lmm_llava.ipynb) integrates two agents: a coder (an AssistantAgent) and critics (a multimodal agent).\\nThe coder drafts Python code for visualizations, while the critics provide insights for enhancement. Collaboratively, these agents aim to refine visual outputs.\\nWith `human_input_mode=ALWAYS`, you can also contribute suggestions for better visualizations.\\n\\n## Reference\\n- [GPT-4V System Card](https://openai.com/research/gpt-4v-system-card)\\n- [LLaVA GitHub](https://github.com/haotian-liu/LLaVA)\\n\\n## Future Enhancements\\n\\nFor further inquiries or suggestions, please open an issue in the [AutoGen repository](https://github.com/microsoft/autogen/) or contact me directly at beibin.li@microsoft.com.\\n\\nAutoGen will continue to evolve, incorporating more multimodal functionalities such as DALLE model integration, audio interaction, and video comprehension. Stay tuned for these exciting developments."},{"id":"/2023/10/26/TeachableAgent","metadata":{"permalink":"/autogen/blog/2023/10/26/TeachableAgent","source":"@site/blog/2023-10-26-TeachableAgent/index.mdx","title":"AutoGen\'s Teachable Agents","description":"Teachable Agent Architecture","date":"2023-10-26T00:00:00.000Z","formattedDate":"October 26, 2023","tags":[{"label":"LLM","permalink":"/autogen/blog/tags/llm"},{"label":"teach","permalink":"/autogen/blog/tags/teach"}],"readingTime":16.82,"hasTruncateMarker":false,"authors":[{"name":"Ricky Loynd","title":"Senior Research Engineer at Microsoft","url":"https://github.com/rickyloynd-microsoft","imageURL":"https://github.com/rickyloynd-microsoft.png","key":"rickyloynd-microsoft"}],"frontMatter":{"title":"AutoGen\'s Teachable Agents","authors":"rickyloynd-microsoft","tags":["LLM","teach"]},"unlisted":false,"prevItem":{"title":"Multimodal with GPT-4V and LLaVA","permalink":"/autogen/blog/2023/11/06/LMM-Agent"},"nextItem":{"title":"Retrieval-Augmented Generation (RAG) Applications with AutoGen","permalink":"/autogen/blog/2023/10/18/RetrieveChat"}},"content":"![Teachable Agent Architecture](img/teachable-arch.png)\\n\\n**TL;DR:**\\n* We introduce **Teachable Agents** so that users can teach their LLM-based assistants new facts, preferences, and skills.\\n* We showcase examples of teachable agents learning and later recalling facts, preferences, and skills in subsequent chats.\\n\\n\\n## Introduction\\nConversational assistants based on LLMs can remember the current chat with the user, and can also demonstrate in-context learning of user teachings during the conversation. But the assistant\'s memories and learnings are lost once the chat is over, or when a single chat grows too long for the LLM to handle effectively. Then in subsequent chats the user is forced to repeat any necessary instructions over and over.\\n\\n`Teachability` addresses these limitations by persisting user teachings across chat boundaries in long-term memory implemented as a vector database. Instead of copying all of memory into the context window, which would eat up valuable space, individual memories (called memos) are retrieved into context as needed. This allows the user to teach frequently used facts and skills to the teachable agent just once, and have it recall them in later chats.\\n\\nAny instantiated `agent` that inherits from `ConversableAgent` can be made teachable by instantiating a `Teachability` object and calling its `add_to_agent(agent)` method.\\nIn order to make effective decisions about memo storage and retrieval, the `Teachability` object calls an instance of `TextAnalyzerAgent` (another AutoGen agent) to identify and reformulate text as needed for remembering facts, preferences, and skills. Note that this adds extra LLM calls involving a relatively small number of tokens, which can add a few seconds to the time a user waits for each response.\\n\\n\\n## Run It Yourself\\n\\nAutoGen contains four code examples that use `Teachability`.\\n\\n1. Run [chat_with_teachable_agent.py](https://github.com/microsoft/autogen/blob/main/test/agentchat/contrib/capabilities/chat_with_teachable_agent.py) to converse with a teachable agent.\\n\\n2. Run [test_teachable_agent.py](https://github.com/microsoft/autogen/blob/main/test/agentchat/contrib/capabilities/test_teachable_agent.py) for quick unit testing of a teachable agent.\\n\\n3. Use the Jupyter notebook [agentchat_teachability.ipynb](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_teachability.ipynb) to step through examples discussed below.\\n\\n4. Use the Jupyter notebook [agentchat_teachable_oai_assistants.ipynb](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_teachable_oai_assistants.ipynb) to make arbitrary OpenAI Assistants teachable through `GPTAssistantAgent`.\\n\\n## Basic Usage of Teachability\\n1. Install dependencies\\n\\nPlease install pyautogen with the [teachable] option before using `Teachability`.\\n```bash\\npip install \\"pyautogen[teachable]\\"\\n```\\n\\n2. Import agents\\n```python\\nfrom autogen import UserProxyAgent, config_list_from_json\\nfrom autogen.agentchat.contrib.capabilities.teachability import Teachability\\nfrom autogen import ConversableAgent  # As an example\\n```\\n\\n3. Create llm_config\\n```python\\n# Load LLM inference endpoints from an env variable or a file\\n# See https://microsoft.github.io/autogen/docs/FAQ#set-your-api-endpoints\\n# and OAI_CONFIG_LIST_sample\\nfilter_dict = {\\"model\\": [\\"gpt-4\\"]}  # GPT-3.5 is less reliable than GPT-4 at learning from user feedback.\\nconfig_list = config_list_from_json(env_or_file=\\"OAI_CONFIG_LIST\\", filter_dict=filter_dict)\\nllm_config={\\"config_list\\": config_list, \\"timeout\\": 120}\\n```\\n\\n4. Create the agents\\n```python\\n\\n# Start by instantiating any agent that inherits from ConversableAgent, which we use directly here for simplicity.\\nteachable_agent = ConversableAgent(\\n    name=\\"teachable_agent\\",  # The name can be anything.\\n    llm_config=llm_config\\n)\\n\\n# Instantiate a Teachability object. Its parameters are all optional.\\nteachability = Teachability(\\n    reset_db=False,  # Use True to force-reset the memo DB, and False to use an existing DB.\\n    path_to_db_dir=\\"./tmp/interactive/teachability_db\\"  # Can be any path, but teachable agents in a group chat require unique paths.\\n)\\n\\n# Now add teachability to the agent.\\nteachability.add_to_agent(teachable_agent)\\n\\n# For this test, create a user proxy agent as usual.\\nuser = UserProxyAgent(\\"user\\", human_input_mode=\\"ALWAYS\\")\\n```\\n\\n5. Chat with the teachable agent\\n```python\\n# This function will return once the user types \'exit\'.\\nteachable_agent.initiate_chat(user, message=\\"Hi, I\'m a teachable user assistant! What\'s on your mind?\\")\\n```\\n\\n## Example 1 - Learning user info\\n\\nA user can teach the agent facts about themselves.\\n(Note that due to their finetuning, LLMs can be reluctant to admit that they know personal information.)\\n```\\nLoading previous memory (if any) from disk.\\nteachable_agent (to user):\\n\\nGreetings, I\'m a teachable user assistant! What\'s on your mind today?\\n\\n--------------------------------------------------------------------------------\\nProvide feedback to teachable_agent. Press enter to skip and use auto-reply, or type \'exit\' to end the conversation: My name is Ricky\\nuser (to teachable_agent):\\n\\nMy name is Ricky\\n\\n--------------------------------------------------------------------------------\\n\\n>>>>>>>> USING AUTO REPLY...\\nteachable_agent (to user):\\n\\nHello Ricky! How can I assist you today?\\n\\n--------------------------------------------------------------------------------\\nProvide feedback to teachable_agent. Press enter to skip and use auto-reply, or type \'exit\' to end the conversation: exit\\n```\\n\\nIn a later conversation, the user can check whether the teachable agent remembers their name. (For readability, the user prompts and some logged notices are not repeated below.)\\n```\\n--------------------------------------------------------------------------------\\nuser (to teachable_agent):\\n\\nwhat\'s my name?\\n\\n--------------------------------------------------------------------------------\\nteachable_agent (to user):\\n\\nHi Ricky! How can I help you today?\\n\\n--------------------------------------------------------------------------------\\n```\\n\\n\\n## Example 2 - Learning new facts\\n\\nA user can teach the agent more complex, related facts.\\n```\\n--------------------------------------------------------------------------------\\nuser (to teachable_agent):\\n\\nWhat is the Vicuna model?\\n\\n--------------------------------------------------------------------------------\\nteachable_agent (to user):\\n\\nI\'m sorry, but I don\'t have information about the \\"Vicuna model\\" in my current database. Could you please provide some context, description, or details about this model so I can better assist you?\\n\\n--------------------------------------------------------------------------------\\nuser (to teachable_agent):\\n\\nVicuna is a 13B-parameter language model released by Meta.\\n\\n--------------------------------------------------------------------------------\\nteachable_agent (to user):\\n\\nThank you for providing the information. The Vicuna model is a large-scale language model developed by Meta. It consists of 13 billion parameters, which is what makes it able to understand and generate human-like text across various topics. Parameters in a neural network are the weights and biases assigned to each connection between the neurons, and having more parameters enables the model to learn and capture more complex patterns and relationships in data. As an AI language model, Vicuna can be utilized in various language-related tasks, such as text completion, translation, summarization, and more.\\n\\n--------------------------------------------------------------------------------\\nuser (to teachable_agent):\\n\\nWhat is the Orca model?\\n\\n--------------------------------------------------------------------------------\\nteachable_agent (to user):\\n\\nThe Orca model is a yet-to-be-released language model by Meta, referring to the Research Preview API release of Meta\'s advanced language model. While I don\'t have specific details about the Orca model at this time, it is expected that the model would have an even larger number of parameters to further enhance its capabilities compared to its predecessor, Vicuna.\\n\\nAs AI language models evolve, they generally become more efficient at understanding and generating human-like text. This makes them more effective in completing a wide range of tasks, including text completion, translation, summarization, and Q&A, as well as providing more accurate and coherent results in various applications.\\n\\n--------------------------------------------------------------------------------\\nuser (to teachable_agent):\\n\\nOrca is a 13B-parameter language model released by Microsoft. It outperforms Vicuna on most tasks.\\n\\n--------------------------------------------------------------------------------\\nteachable_agent (to user):\\n\\nThank you for the clarification. Orca is a 13-billion-parameter language model developed by Microsoft. It is designed to outperform Vicuna, the language model released by Meta. With a large number of parameters, Orca is capable of understanding and generating human-like text across diverse subjects, making it highly useful in various applications.\\n\\nOrca\'s advanced capabilities allow it to excel in tasks such as text completion, translation, summarization, Q&A, and more. Its performance improvement over Vicuna highlights the rapid advancements in natural language processing (NLP) research and the development of increasingly capable AI language models.\\n```\\n\\nThen in a later chat the teachable agent can answer questions about the facts it has been taught.\\n(Remember to first close the previous chat by typing \'exit\'.)\\n```\\n--------------------------------------------------------------------------------\\nuser (to teachable_agent):\\n\\nHow does the Vicuna model compare to the Orca model?\\n\\n--------------------------------------------------------------------------------\\nteachable_agent (to user):\\n\\nThe Vicuna and Orca models are both 13B-parameter language models released by Meta and Microsoft, respectively. In terms of performance, Orca has been reported to outperform Vicuna on most tasks. However, without detailed information about specific tasks and benchmarks, it is difficult to provide a more comprehensive comparison. Generally speaking, both models are advanced language models that aim to provide high-quality natural language understanding and generation, but Orca appears to have an edge in terms of overall performance.\\n\\n--------------------------------------------------------------------------------\\n```\\n\\n\\n## Example 3 - Learning user preferences\\n\\nA user can teach the agent how they prefer to have things done.\\n\\nBe aware that a message like the next one cannot be entered as a single message through a command line because it contains a newline character.\\nSuch messages can be entered in a Jupyter notebook, or through some UI layer like that of ChatGPT.\\n```\\n--------------------------------------------------------------------------------\\nuser (to teachable_agent):\\n\\nPlease summarize this abstract.\\n\\nAutoGen: Enabling Next-Gen LLM Applications via Multi-Agent Conversation\\nQingyun Wu, Gagan Bansal, Jieyu Zhang, Yiran Wu, Beibin Li, Erkang Zhu, Li Jiang, Xiaoyun Zhang, Shaokun Zhang, Jiale Liu, Ahmed Hassan Awadallah, Ryen W White, Doug Burger, Chi Wang\\nAutoGen is an open-source framework that allows developers to build LLM applications via multiple agents that can converse with each other to accomplish tasks. AutoGen agents are customizable, conversable, and can operate in various modes that employ combinations of LLMs, human inputs, and tools. Using AutoGen, developers can also flexibly define agent interaction behaviors. Both natural language and computer code can be used to program flexible conversation patterns for different applications. AutoGen serves as a generic infrastructure to build diverse applications of various complexities and LLM capacities. Empirical studies demonstrate the effectiveness of the framework in many example applications, with domains ranging from mathematics, coding, question answering, operations research, online decision-making, entertainment, etc.\\n\\n--------------------------------------------------------------------------------\\nteachable_agent (to user):\\n\\nAutoGen is an open-source framework designed to enable developers to create LLM applications with multiple customizable agents that can converse with each other to complete tasks. These agents can operate using different combinations of LLMs, human inputs, and tools, allowing developers to define agent interaction behaviors flexibly. AutoGen supports programming flexible conversation patterns using both natural language and code, making it suitable for building diverse applications with varying complexities and LLM capacities. Its effectiveness has been demonstrated through empirical studies across various domains including mathematics, coding, operations research, decision-making, and entertainment.\\n\\n--------------------------------------------------------------------------------\\nPlease summarize this abstract. When I\'m summarizing an abstract, I try to make the summary contain just three short bullet points:  the title, the innovation, and the key empirical results.\\n\\nAutoGen: Enabling Next-Gen LLM Applications via Multi-Agent Conversation\\nQingyun Wu, Gagan Bansal, Jieyu Zhang, Yiran Wu, Beibin Li, Erkang Zhu, Li Jiang, Xiaoyun Zhang, Shaokun Zhang, Jiale Liu, Ahmed Hassan Awadallah, Ryen W White, Doug Burger, Chi Wang\\nAutoGen is an open-source framework that allows developers to build LLM applications via multiple agents that can converse with each other to accomplish tasks. AutoGen agents are customizable, conversable, and can operate in various modes that employ combinations of LLMs, human inputs, and tools. Using AutoGen, developers can also flexibly define agent interaction behaviors. Both natural language and computer code can be used to program flexible conversation patterns for different applications. AutoGen serves as a generic infrastructure to build diverse applications of various complexities and LLM capacities. Empirical studies demonstrate the effectiveness of the framework in many example applications, with domains ranging from mathematics, coding, question answering, operations research, online decision-making, entertainment, etc.\\n\\n--------------------------------------------------------------------------------\\nteachable_agent (to user):\\n\\n- Title: AutoGen: Enabling Next-Gen LLM Applications via Multi-Agent Conversation\\n- Innovation: Open-source framework for creating customizable LLM applications through agent conversations, supporting various modes and interaction behaviors.\\n- Key Empirical Results: Demonstrated effectiveness across diverse application domains, including mathematics, coding, question answering, and more.\\n\\n--------------------------------------------------------------------------------\\n```\\n\\nThen in later chats the teacher doesn\'t need to reiterate their detailed preferences.\\n```\\n--------------------------------------------------------------------------------\\nuser (to teachable_agent):\\n\\nPlease summarize this abstract.\\n\\nSparks of Artificial General Intelligence: Early experiments with GPT-4\\nS\xe9bastien Bubeck, Varun Chandrasekaran, Ronen Eldan, Johannes Gehrke, Eric Horvitz, Ece Kamar, Peter Lee, Yin Tat Lee, Yuanzhi Li, Scott Lundberg, Harsha Nori, Hamid Palangi, Marco Tulio Ribeiro, Yi Zhang\\nArtificial intelligence (AI) researchers have been developing and refining large language models (LLMs) that exhibit remarkable capabilities across a variety of domains and tasks, challenging our understanding of learning and cognition. The latest model developed by OpenAI, GPT-4, was trained using an unprecedented scale of compute and data. In this paper, we report on our investigation of an early version of GPT-4, when it was still in active development by OpenAI. We contend that (this early version of) GPT-4 is part of a new cohort of LLMs (along with ChatGPT and Google\'s PaLM for example) that exhibit more general intelligence than previous AI models. We discuss the rising capabilities and implications of these models. We demonstrate that, beyond its mastery of language, GPT-4 can solve novel and difficult tasks that span mathematics, coding, vision, medicine, law, psychology and more, without needing any special prompting. Moreover, in all of these tasks, GPT-4\'s performance is strikingly close to human-level performance, and often vastly surpasses prior models such as ChatGPT. Given the breadth and depth of GPT-4\'s capabilities, we believe that it could reasonably be viewed as an early (yet still incomplete) version of an artificial general intelligence (AGI) system. In our exploration of GPT-4, we put special emphasis on discovering its limitations, and we discuss the challenges ahead for advancing towards deeper and more comprehensive versions of AGI, including the possible need for pursuing a new paradigm that moves beyond next-word prediction. We conclude with reflections on societal influences of the recent technological leap and future research directions.\\n\\n--------------------------------------------------------------------------------\\nteachable_agent (to user):\\n\\n- Title: Sparks of Artificial General Intelligence: Early experiments with GPT-4\\n- Innovation: GPT-4, an LLM with remarkable capabilities, demonstrates human-level performance across various domains, like math, coding, vision, medicine, law, and psychology.\\n- Key results: GPT-4 significantly surpasses prior models, suggesting it may be an early version of AGI; limitations and challenges toward deeper AGI are also discussed.\\n\\n--------------------------------------------------------------------------------\\n```\\n\\n\\n## Example 4 - Learning new skills\\n\\nUsers can extend the teachable agent\'s capabilities by teaching it new skills for accomplishing challenging tasks. It usually works best to first describe the task, then (in the same turn) provide a hint or advice for approaching the task.\\n\\nThe [Sparks of AGI](https://arxiv.org/abs/2303.12712) paper evaluated GPT-4 on math problems like the following, which it could only solve 32% of the time. We first show a failure case, then teach the agent a strategy which lifts GPT-4\'s success rate above 95%.\\n```\\n--------------------------------------------------------------------------------\\nuser (to teachable_agent):\\n\\nConsider the identity:\\n9 * 4 + 6 * 6 = 72\\nCan you modify exactly one integer (and not more than that!) on the left hand side of the equation so the right hand side becomes 99?\\n-Let\'s think step-by-step, write down a plan, and then write down your solution as: \\"The solution is: A * B + C * D\\".\\n\\n--------------------------------------------------------------------------------\\nStep 1: Identify the current equation and the target value on the right-hand side.\\nCurrent equation: 9 * 4 + 6 * 6 = 72\\nTarget value: 99\\n\\nStep 2: Determine what numbers can be changed on the left-hand side.\\nPossible changes: 9, 4, 6 (first occurrence), and 6 (second occurrence)\\n\\nStep 3: Evaluate whether each change in the numbers on the left-hand side can result in the target value.\\n9 -> If changed, it would create a larger product.\\n4 -> If changed, the product would increase or decrease by more than the amount needed to reach 99.\\n6 (first occurrence) -> If increased to 7, then the equation would be 9 * 4 + 7 * 6 = 94, which is still not 99.\\n6 (second occurrence) -> If increased to 7, then the equation would be 9 * 4 + 6 * 7 = 99.\\n\\nStep 4: Write down the solution.\\nThe solution is: 9 * 4 + 6 * 7\\n\\n--------------------------------------------------------------------------------\\nuser (to teachable_agent):\\n\\nConsider the identity:\\n9 * 4 + 6 * 6 = 72\\nCan you modify exactly one integer (and not more than that!) on the left hand side of the equation so the right hand side becomes 99?\\n-Let\'s think step-by-step, write down a plan, and then write down your solution as: \\"The solution is: A * B + C * D\\".\\n\\nHere\'s some advice that may help:\\n1. Let E denote the original number on the right.\\n2. Let F denote the final number on the right.\\n3. Calculate the difference between the two, G = F - E.\\n4. Examine the numbers on the left one by one until finding one that divides evenly into G, where negative integers are allowed.\\n5. Calculate J = G / H. This is the number of times that H divides into G.\\n6. Verify that J is an integer, and that H * J = G.\\n7. Find the number on the left which is multiplied by H, and call it K.\\n8. Change K to K + J.\\n9. Recompute the value on the left, and verify that it equals F.\\nFinally, write down your solution as: \\"The solution is: A * B + C * D\\".\\n\\n--------------------------------------------------------------------------------\\nteachable_agent (to user):\\n\\nStep 1: Identify the original number (E) and the final number (F) on the right-hand side.\\nE = 72\\nF = 99\\n\\nStep 2: Calculate the difference between the two, G = F - E.\\nG = 99 - 72 = 27\\n\\nStep 3: Examine the numbers on the left one by one until finding one that divides evenly into G, where negative integers are allowed.\\n9 (divides evenly into 27)\\n4 (does not)\\n6 (first occurrence, does not)\\n6 (second occurrence, does not)\\n\\nStep 4: Calculate J = G / H. This is the number of times that H divides into G.\\nH = 9 (since 9 divides evenly into 27)\\nJ = 27 / 9 = 3\\n\\nStep 5: Verify that J is an integer, and that H * J = G.\\nH * J = 9 * 3 = 27\\nJ = 3 (which is an integer)\\n\\nStep 6: Find the number on the left which is multiplied by H, and call it K.\\nNumber on the leftside of the equation that is multiplied by 9: 4\\nTherefore, K = 4\\n\\nStep 7: Change K to K + J.\\nK + J = 4 + 3 = 7\\n\\nStep 8: Recompute the value on the left, and verify that it equals F.\\n9 * 7 + 6 * 6 = 63 + 36 = 99 (which is equal to F)\\n\\nStep 9: Write down the solution.\\nThe solution is: 9 * 7 + 6 * 6\\n\\n--------------------------------------------------------------------------------\\n```\\n\\nIn a later chat the user doesn\'t need to repeat the detailed advice.\\n```\\n--------------------------------------------------------------------------------\\nuser (to teachable_agent):\\n\\nConsider the identity:\\n8 * 3 + 7 * 9 = 87\\nCan you modify exactly one integer (and not more than that!) on the left hand side of the equation so the right hand side becomes 59?\\n-Let\'s think step-by-step, write down a plan, and then write down your solution as: \\"The solution is: A * B + C * D\\".\\n\\n--------------------------------------------------------------------------------\\nteachable_agent (to user):\\n\\nLet\'s follow the advice to modify one integer on the left hand side of the equation to make the right hand side become 59:\\n\\n1. Let E denote the original number on the right: E = 87.\\n2. Let F denote the final number on the right: F = 59.\\n3. Calculate the difference between the two, G = F - E: G = 59 - 87 = -28.\\n4. Examine the numbers on the left one by one to find one that divides evenly into G: 8, 3, 7, 9. Since 7 divides -28 evenly, we will work with 7 (H = 7).\\n5. Calculate J = G / H: J = -28 / 7 = -4.\\n6. Verify that J is an integer, and that H * J = G: J is an integer, and 7 * (-4) = -28.\\n7. Find the number on the left which is multiplied by H (7), and call it K: K = 9.\\n8. Change K to K + J: K_new = 9 + (-4) = 5.\\n9. Recompute the value on the left, and verify that it equals F: (8 * 3) + (7 * 5) = 24 + 35 = 59.\\n\\nThe solution is: 8 * 3 + 7 * 5\\n\\n--------------------------------------------------------------------------------\\n```\\n\\n\\n## Planned improvements\\n- Understanding user instructions distributed over multiple turns.\\n- Learning from the agent\'s own experience, to reduce dependence on explicit user teachings.\\n- Learning skills built on top of previously learned skills.\\n\\n\\n## Conclusion\\n\\n`Teachability` is still under active research and development. For any problems you find or improvements you have in mind, please join our discussions in this repo and on our [Discord channel](https://discord.gg/pAbnFJrkgZ). We look forward to seeing how you and the rest of the community can use and improve teachable agents in AutoGen!"},{"id":"/2023/10/18/RetrieveChat","metadata":{"permalink":"/autogen/blog/2023/10/18/RetrieveChat","source":"@site/blog/2023-10-18-RetrieveChat/index.mdx","title":"Retrieval-Augmented Generation (RAG) Applications with AutoGen","description":"RAG Architecture","date":"2023-10-18T00:00:00.000Z","formattedDate":"October 18, 2023","tags":[{"label":"LLM","permalink":"/autogen/blog/tags/llm"},{"label":"RAG","permalink":"/autogen/blog/tags/rag"}],"readingTime":9.64,"hasTruncateMarker":false,"authors":[{"name":"Li Jiang","title":"Senior Software Engineer at Microsoft","url":"https://github.com/thinkall","imageURL":"https://github.com/thinkall.png","key":"thinkall"}],"frontMatter":{"title":"Retrieval-Augmented Generation (RAG) Applications with AutoGen","authors":"thinkall","tags":["LLM","RAG"]},"unlisted":false,"prevItem":{"title":"AutoGen\'s Teachable Agents","permalink":"/autogen/blog/2023/10/26/TeachableAgent"},"nextItem":{"title":"Use AutoGen for Local LLMs","permalink":"/autogen/blog/2023/07/14/Local-LLMs"}},"content":"![RAG Architecture](img/retrievechat-arch.png)\\n\\n**TL;DR:**\\n* We introduce **RetrieveUserProxyAgent** and **RetrieveAssistantAgent**, RAG agents of AutoGen that\\nallows retrieval-augmented generation, and its basic usage.\\n* We showcase customizations of RAG agents, such as customizing the embedding function, the text\\nsplit function and vector database.\\n* We also showcase two advanced usage of RAG agents, integrating with group chat and building a Chat\\napplication with Gradio.\\n\\n\\n## Introduction\\nRetrieval augmentation has emerged as a practical and effective approach for mitigating the intrinsic\\nlimitations of LLMs by incorporating external documents. In this blog post, we introduce RAG agents of\\nAutoGen that allows retrieval-augmented generation. The system consists of two agents: a\\nRetrieval-augmented User Proxy agent, called `RetrieveUserProxyAgent`, and a Retrieval-augmented Assistant\\nagent, called `RetrieveAssistantAgent`, both of which are extended from built-in agents from AutoGen.\\nThe overall architecture of the RAG agents is shown in the figure above.\\n\\nTo use Retrieval-augmented Chat, one needs to initialize two agents including Retrieval-augmented\\nUser Proxy and Retrieval-augmented Assistant. Initializing the Retrieval-Augmented User Proxy\\nnecessitates specifying a path to the document collection. Subsequently, the Retrieval-Augmented\\nUser Proxy can download the documents, segment them into chunks of a specific size, compute\\nembeddings, and store them in a vector database. Once a chat is initiated, the agents collaboratively\\nengage in code generation or question-answering adhering to the procedures outlined below:\\n1. The Retrieval-Augmented User Proxy retrieves document chunks based on the embedding similarity,\\nand sends them along with the question to the Retrieval-Augmented Assistant.\\n2. The Retrieval-Augmented Assistant employs an LLM to generate code or text as answers based\\non the question and context provided. If the LLM is unable to produce a satisfactory response, it\\nis instructed to reply with \u201cUpdate Context\u201d to the Retrieval-Augmented User Proxy.\\n3. If a response includes code blocks, the Retrieval-Augmented User Proxy executes the code and\\nsends the output as feedback. If there are no code blocks or instructions to update the context, it\\nterminates the conversation. Otherwise, it updates the context and forwards the question along\\nwith the new context to the Retrieval-Augmented Assistant. Note that if human input solicitation\\nis enabled, individuals can proactively send any feedback, including Update Context\u201d, to the\\nRetrieval-Augmented Assistant.\\n4. If the Retrieval-Augmented Assistant receives \u201cUpdate Context\u201d, it requests the next most similar\\nchunks of documents as new context from the Retrieval-Augmented User Proxy. Otherwise, it\\ngenerates new code or text based on the feedback and chat history. If the LLM fails to generate\\nan answer, it replies with \u201cUpdate Context\u201d again. This process can be repeated several times.\\nThe conversation terminates if no more documents are available for the context.\\n\\n## Basic Usage of RAG Agents\\n0. Install dependencies\\n\\nPlease install pyautogen with the [retrievechat] option before using RAG agents.\\n```bash\\npip install \\"pyautogen[retrievechat]\\"\\n```\\n\\nRetrieveChat can handle various types of documents. By default, it can process\\nplain text and PDF files, including formats such as \'txt\', \'json\', \'csv\', \'tsv\',\\n\'md\', \'html\', \'htm\', \'rtf\', \'rst\', \'jsonl\', \'log\', \'xml\', \'yaml\', \'yml\' and \'pdf\'.\\nIf you install [unstructured](https://unstructured-io.github.io/unstructured/installation/full_installation.html)\\n(`pip install \\"unstructured[all-docs]\\"`), additional document types such as \'docx\',\\n\'doc\', \'odt\', \'pptx\', \'ppt\', \'xlsx\', \'eml\', \'msg\', \'epub\' will also be supported.\\n\\nYou can find a list of all supported document types by using `autogen.retrieve_utils.TEXT_FORMATS`.\\n\\n1. Import Agents\\n```python\\nimport autogen\\nfrom autogen.agentchat.contrib.retrieve_assistant_agent import RetrieveAssistantAgent\\nfrom autogen.agentchat.contrib.retrieve_user_proxy_agent import RetrieveUserProxyAgent\\n```\\n\\n2. Create an \'RetrieveAssistantAgent\' instance named \\"assistant\\" and an \'RetrieveUserProxyAgent\' instance named \\"ragproxyagent\\"\\n```python\\nassistant = RetrieveAssistantAgent(\\n    name=\\"assistant\\",\\n    system_message=\\"You are a helpful assistant.\\",\\n    llm_config=llm_config,\\n)\\n\\nragproxyagent = RetrieveUserProxyAgent(\\n    name=\\"ragproxyagent\\",\\n    retrieve_config={\\n        \\"task\\": \\"qa\\",\\n        \\"docs_path\\": \\"https://raw.githubusercontent.com/microsoft/autogen/main/README.md\\",\\n    },\\n)\\n```\\n\\n3. Initialize Chat and ask a question\\n```python\\nassistant.reset()\\nragproxyagent.initiate_chat(assistant, problem=\\"What is autogen?\\")\\n```\\n\\nOutput is like:\\n```\\n--------------------------------------------------------------------------------\\nassistant (to ragproxyagent):\\n\\nAutoGen is a framework that enables the development of large language model (LLM) applications using multiple agents that can converse with each other to solve tasks. The agents are customizable, conversable, and allow human participation. They can operate in various modes that employ combinations of LLMs, human inputs, and tools.\\n\\n--------------------------------------------------------------------------------\\n```\\n\\n4. Create a UserProxyAgent and ask the same question\\n```python\\nassistant.reset()\\nuserproxyagent = autogen.UserProxyAgent(name=\\"userproxyagent\\")\\nuserproxyagent.initiate_chat(assistant, message=\\"What is autogen?\\")\\n```\\n\\nOutput is like:\\n```\\n--------------------------------------------------------------------------------\\nassistant (to userproxyagent):\\n\\nIn computer software, autogen is a tool that generates program code automatically, without the need for manual coding. It is commonly used in fields such as software engineering, game development, and web development to speed up the development process and reduce errors. Autogen tools typically use pre-programmed rules, templates, and data to create code for repetitive tasks, such as generating user interfaces, database schemas, and data models. Some popular autogen tools include Visual Studio\'s Code Generator and Unity\'s Asset Store.\\n\\n--------------------------------------------------------------------------------\\n```\\n\\nYou can see that the output of `UserProxyAgent` is not related to our `autogen` since the latest info of\\n`autogen` is not in ChatGPT\'s training data. The output of `RetrieveUserProxyAgent` is correct as it can\\nperform retrieval-augmented generation based on the given documentation file.\\n\\n## Customizing RAG Agents\\n`RetrieveUserProxyAgent` is customizable with `retrieve_config`. There are several parameters to configure\\nbased on different use cases. In this section, we\'ll show how to customize embedding function, text split\\nfunction and vector database.\\n\\n### Customizing Embedding Function\\nBy default, [Sentence Transformers](https://www.sbert.net) and its pretrained models will be used to\\ncompute embeddings. It\'s possible that you want to use OpenAI, Cohere, HuggingFace or other embedding functions.\\n\\n* OpenAI\\n```python\\nfrom chromadb.utils import embedding_functions\\n\\nopenai_ef = embedding_functions.OpenAIEmbeddingFunction(\\n                api_key=\\"YOUR_API_KEY\\",\\n                model_name=\\"text-embedding-ada-002\\"\\n            )\\n\\nragproxyagent = RetrieveUserProxyAgent(\\n    name=\\"ragproxyagent\\",\\n    retrieve_config={\\n        \\"task\\": \\"qa\\",\\n        \\"docs_path\\": \\"https://raw.githubusercontent.com/microsoft/autogen/main/README.md\\",\\n        \\"embedding_function\\": openai_ef,\\n    },\\n)\\n```\\n\\n* HuggingFace\\n```python\\nhuggingface_ef = embedding_functions.HuggingFaceEmbeddingFunction(\\n    api_key=\\"YOUR_API_KEY\\",\\n    model_name=\\"sentence-transformers/all-MiniLM-L6-v2\\"\\n)\\n```\\n\\nMore examples can be found [here](https://docs.trychroma.com/embeddings).\\n\\n### Customizing Text Split Function\\nBefore we can store the documents into a vector database, we need to split the texts into chunks. Although\\nwe have implemented a flexible text splitter in autogen, you may still want to use different text splitters.\\nThere are also some existing text split tools which are good to reuse.\\n\\nFor example, you can use all the text splitters in langchain.\\n\\n```python\\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\\n\\nrecur_spliter = RecursiveCharacterTextSplitter(separators=[\\"\\\\n\\", \\"\\\\r\\", \\"\\\\t\\"])\\n\\nragproxyagent = RetrieveUserProxyAgent(\\n    name=\\"ragproxyagent\\",\\n    retrieve_config={\\n        \\"task\\": \\"qa\\",\\n        \\"docs_path\\": \\"https://raw.githubusercontent.com/microsoft/autogen/main/README.md\\",\\n        \\"custom_text_split_function\\": recur_spliter.split_text,\\n    },\\n)\\n```\\n\\n\\n### Customizing Vector Database\\nWe are using chromadb as the default vector database, you can also replace it with any other vector database\\nby simply overriding the function `retrieve_docs` of `RetrieveUserProxyAgent`.\\n\\nFor example, you can use Qdrant as below:\\n\\n```python\\n# Creating qdrant client\\nfrom qdrant_client import QdrantClient\\n\\nclient = QdrantClient(url=\\"***\\", api_key=\\"***\\")\\n\\n# Wrapping RetrieveUserProxyAgent\\nfrom litellm import embedding as test_embedding\\nfrom autogen.agentchat.contrib.retrieve_user_proxy_agent import RetrieveUserProxyAgent\\nfrom qdrant_client.models import SearchRequest, Filter, FieldCondition, MatchText\\n\\nclass QdrantRetrieveUserProxyAgent(RetrieveUserProxyAgent):\\n    def query_vector_db(\\n        self,\\n        query_texts: List[str],\\n        n_results: int = 10,\\n        search_string: str = \\"\\",\\n        **kwargs,\\n    ) -> Dict[str, Union[List[str], List[List[str]]]]:\\n        # define your own query function here\\n        embed_response = test_embedding(\'text-embedding-ada-002\', input=query_texts)\\n\\n        all_embeddings: List[List[float]] = []\\n\\n        for item in embed_response[\'data\']:\\n            all_embeddings.append(item[\'embedding\'])\\n\\n        search_queries: List[SearchRequest] = []\\n\\n        for embedding in all_embeddings:\\n            search_queries.append(\\n                SearchRequest(\\n                    vector=embedding,\\n                    filter=Filter(\\n                        must=[\\n                            FieldCondition(\\n                                key=\\"page_content\\",\\n                                match=MatchText(\\n                                    text=search_string,\\n                                )\\n                            )\\n                        ]\\n                    ),\\n                    limit=n_results,\\n                    with_payload=True,\\n                )\\n            )\\n\\n        search_response = client.search_batch(\\n            collection_name=\\"{your collection name}\\",\\n            requests=search_queries,\\n        )\\n\\n        return {\\n            \\"ids\\": [[scored_point.id for scored_point in batch] for batch in search_response],\\n            \\"documents\\": [[scored_point.payload.get(\'page_content\', \'\') for scored_point in batch] for batch in search_response],\\n            \\"metadatas\\": [[scored_point.payload.get(\'metadata\', {}) for scored_point in batch] for batch in search_response]\\n        }\\n\\n    def retrieve_docs(self, problem: str, n_results: int = 20, search_string: str = \\"\\", **kwargs):\\n        results = self.query_vector_db(\\n            query_texts=[problem],\\n            n_results=n_results,\\n            search_string=search_string,\\n            **kwargs,\\n        )\\n\\n        self._results = results\\n\\n\\n# Use QdrantRetrieveUserProxyAgent\\nqdrantragagent = QdrantRetrieveUserProxyAgent(\\n    name=\\"ragproxyagent\\",\\n    human_input_mode=\\"NEVER\\",\\n    max_consecutive_auto_reply=2,\\n    retrieve_config={\\n        \\"task\\": \\"qa\\",\\n    },\\n)\\n\\nqdrantragagent.retrieve_docs(\\"What is Autogen?\\", n_results=10, search_string=\\"autogen\\")\\n```\\n\\n## Advanced Usage of RAG Agents\\n### Integrate with other agents in a group chat\\nTo use `RetrieveUserProxyAgent` in a group chat is almost the same as you use it in a two agents chat. The only thing is that\\nyou need to **initialize the chat with `RetrieveUserProxyAgent`**. The `RetrieveAssistantAgent` is not necessary in a group chat.\\n\\nHowever, you may want to initialize the chat with another agent in some cases. To leverage the best of `RetrieveUserProxyAgent`,\\nyou\'ll need to call it from a function.\\n\\n```python\\nllm_config = {\\n    \\"functions\\": [\\n        {\\n            \\"name\\": \\"retrieve_content\\",\\n            \\"description\\": \\"retrieve content for code generation and question answering.\\",\\n            \\"parameters\\": {\\n                \\"type\\": \\"object\\",\\n                \\"properties\\": {\\n                    \\"message\\": {\\n                        \\"type\\": \\"string\\",\\n                        \\"description\\": \\"Refined message which keeps the original meaning and can be used to retrieve content for code generation and question answering.\\",\\n                    }\\n                },\\n                \\"required\\": [\\"message\\"],\\n            },\\n        },\\n    ],\\n    \\"config_list\\": config_list,\\n    \\"timeout\\": 60,\\n    \\"seed\\": 42,\\n}\\n\\nboss = autogen.UserProxyAgent(\\n    name=\\"Boss\\",\\n    is_termination_msg=termination_msg,\\n    human_input_mode=\\"TERMINATE\\",\\n    system_message=\\"The boss who ask questions and give tasks.\\",\\n)\\n\\nboss_aid = RetrieveUserProxyAgent(\\n    name=\\"Boss_Assistant\\",\\n    is_termination_msg=termination_msg,\\n    system_message=\\"Assistant who has extra content retrieval power for solving difficult problems.\\",\\n    human_input_mode=\\"NEVER\\",\\n    max_consecutive_auto_reply=3,\\n    retrieve_config={\\n        \\"task\\": \\"qa\\",\\n    },\\n    code_execution_config=False,  # we don\'t want to execute code in this case.\\n)\\n\\ncoder = AssistantAgent(\\n    name=\\"Senior_Python_Engineer\\",\\n    is_termination_msg=termination_msg,\\n    system_message=\\"You are a senior python engineer. Reply `TERMINATE` in the end when everything is done.\\",\\n    llm_config=llm_config,\\n)\\n\\npm = autogen.AssistantAgent(\\n    name=\\"Product_Manager\\",\\n    is_termination_msg=termination_msg,\\n    system_message=\\"You are a product manager. Reply `TERMINATE` in the end when everything is done.\\",\\n    llm_config=llm_config,\\n)\\n\\nreviewer = autogen.AssistantAgent(\\n    name=\\"Code_Reviewer\\",\\n    is_termination_msg=termination_msg,\\n    system_message=\\"You are a code reviewer. Reply `TERMINATE` in the end when everything is done.\\",\\n    llm_config=llm_config,\\n)\\n\\ndef retrieve_content(message, n_results=3):\\n        boss_aid.n_results = n_results  # Set the number of results to be retrieved.\\n        # Check if we need to update the context.\\n        update_context_case1, update_context_case2 = boss_aid._check_update_context(message)\\n        if (update_context_case1 or update_context_case2) and boss_aid.update_context:\\n            boss_aid.problem = message if not hasattr(boss_aid, \\"problem\\") else boss_aid.problem\\n            _, ret_msg = boss_aid._generate_retrieve_user_reply(message)\\n        else:\\n            _context = {\\"problem\\": message, \\"n_results\\": n_results}\\n            ret_msg = boss_aid.message_generator(boss_aid, None, _context)\\n        return ret_msg if ret_msg else message\\n\\nfor agent in [boss, coder, pm, reviewer]:\\n    # register functions for all agents.\\n    agent.register_function(\\n        function_map={\\n            \\"retrieve_content\\": retrieve_content,\\n        }\\n    )\\n\\ngroupchat = autogen.GroupChat(\\n    agents=[boss, coder, pm, reviewer], messages=[], max_round=12\\n)\\nmanager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)\\n\\n# Start chatting with the boss as this is the user proxy agent.\\nboss.initiate_chat(\\n    manager,\\n    message=\\"How to use spark for parallel training in FLAML? Give me sample code.\\",\\n)\\n```\\n\\n### Build a Chat application with Gradio\\nNow, let\'s wrap it up and make a Chat application with AutoGen and Gradio.\\n\\n![RAG ChatBot with AutoGen](img/autogen-rag.gif)\\n\\n```python\\n# Initialize Agents\\ndef initialize_agents(config_list, docs_path=None):\\n    ...\\n    return assistant, ragproxyagent\\n\\n# Initialize Chat\\ndef initiate_chat(config_list, problem, queue, n_results=3):\\n    ...\\n    assistant.reset()\\n    try:\\n        ragproxyagent.a_initiate_chat(\\n            assistant, problem=problem, silent=False, n_results=n_results\\n        )\\n        messages = ragproxyagent.chat_messages\\n        messages = [messages[k] for k in messages.keys()][0]\\n        messages = [m[\\"content\\"] for m in messages if m[\\"role\\"] == \\"user\\"]\\n        print(\\"messages: \\", messages)\\n    except Exception as e:\\n        messages = [str(e)]\\n    queue.put(messages)\\n\\n# Wrap AutoGen part into a function\\ndef chatbot_reply(input_text):\\n    \\"\\"\\"Chat with the agent through terminal.\\"\\"\\"\\n    queue = mp.Queue()\\n    process = mp.Process(\\n        target=initiate_chat,\\n        args=(config_list, input_text, queue),\\n    )\\n    process.start()\\n    try:\\n        messages = queue.get(timeout=TIMEOUT)\\n    except Exception as e:\\n        messages = [str(e) if len(str(e)) > 0 else \\"Invalid Request to OpenAI, please check your API keys.\\"]\\n    finally:\\n        try:\\n            process.terminate()\\n        except:\\n            pass\\n    return messages\\n\\n...\\n\\n# Set up UI with Gradio\\nwith gr.Blocks() as demo:\\n    ...\\n    assistant, ragproxyagent = initialize_agents(config_list)\\n\\n    chatbot = gr.Chatbot(\\n        [],\\n        elem_id=\\"chatbot\\",\\n        bubble_full_width=False,\\n        avatar_images=(None, (os.path.join(os.path.dirname(__file__), \\"autogen.png\\"))),\\n        # height=600,\\n    )\\n\\n    txt_input = gr.Textbox(\\n        scale=4,\\n        show_label=False,\\n        placeholder=\\"Enter text and press enter\\",\\n        container=False,\\n    )\\n\\n    with gr.Row():\\n        txt_model = gr.Dropdown(\\n            label=\\"Model\\",\\n            choices=[\\n                \\"gpt-4\\",\\n                \\"gpt-35-turbo\\",\\n                \\"gpt-3.5-turbo\\",\\n            ],\\n            allow_custom_value=True,\\n            value=\\"gpt-35-turbo\\",\\n            container=True,\\n        )\\n        txt_oai_key = gr.Textbox(\\n            label=\\"OpenAI API Key\\",\\n            placeholder=\\"Enter key and press enter\\",\\n            max_lines=1,\\n            show_label=True,\\n            value=os.environ.get(\\"OPENAI_API_KEY\\", \\"\\"),\\n            container=True,\\n            type=\\"password\\",\\n        )\\n        ...\\n\\n    clear = gr.ClearButton([txt_input, chatbot])\\n\\n...\\n\\nif __name__ == \\"__main__\\":\\n    demo.launch(share=True)\\n```\\n\\nThe online app and the source code are hosted in [HuggingFace](https://huggingface.co/spaces/thinkall/autogen-demos). Feel free to give it a try!\\n\\n\\n## Read More\\nYou can check out more example notebooks for RAG use cases:\\n- [Automated Code Generation and Question Answering with Retrieval Augmented Agents](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_RetrieveChat.ipynb)\\n- [Group Chat with Retrieval Augmented Generation (with 5 group member agents and 1 manager agent)](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_groupchat_RAG.ipynb)\\n- [Automated Code Generation and Question Answering with Qdrant based Retrieval Augmented Agents](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_qdrant_RetrieveChat.ipynb)"},{"id":"/2023/07/14/Local-LLMs","metadata":{"permalink":"/autogen/blog/2023/07/14/Local-LLMs","source":"@site/blog/2023-07-14-Local-LLMs/index.md","title":"Use AutoGen for Local LLMs","description":"TL;DR:","date":"2023-07-14T00:00:00.000Z","formattedDate":"July 14, 2023","tags":[{"label":"LLM","permalink":"/autogen/blog/tags/llm"}],"readingTime":2.13,"hasTruncateMarker":false,"authors":[{"name":"Jiale Liu","title":"Undergraduate student at Xidian University","url":"https://leoljl.github.io","imageURL":"https://github.com/LeoLjl/leoljl.github.io/blob/main/profile.jpg?raw=true","key":"jialeliu"}],"frontMatter":{"title":"Use AutoGen for Local LLMs","authors":"jialeliu","tags":["LLM"]},"unlisted":false,"prevItem":{"title":"Retrieval-Augmented Generation (RAG) Applications with AutoGen","permalink":"/autogen/blog/2023/10/18/RetrieveChat"},"nextItem":{"title":"MathChat - An Conversational Framework to Solve Math Problems","permalink":"/autogen/blog/2023/06/28/MathChat"}},"content":"**TL;DR:**\\nWe demonstrate how to use autogen for local LLM application. As an example, we will initiate an endpoint using [FastChat](https://github.com/lm-sys/FastChat) and perform inference on [ChatGLMv2-6b](https://github.com/THUDM/ChatGLM2-6B).\\n\\n## Preparations\\n\\n### Clone FastChat\\n\\nFastChat provides OpenAI-compatible APIs for its supported models, so you can use FastChat as a local drop-in replacement for OpenAI APIs. However, its code needs minor modification in order to function properly.\\n\\n```bash\\ngit clone https://github.com/lm-sys/FastChat.git\\ncd FastChat\\n```\\n\\n### Download checkpoint\\n\\nChatGLM-6B is an open bilingual language model based on General Language Model (GLM) framework, with 6.2 billion parameters. ChatGLM2-6B is its second-generation version.\\n\\nBefore downloading from HuggingFace Hub, you need to have Git LFS [installed](https://docs.github.com/en/repositories/working-with-files/managing-large-files/installing-git-large-file-storage).\\n\\n```bash\\ngit clone https://huggingface.co/THUDM/chatglm2-6b\\n```\\n\\n## Initiate server\\n\\nFirst, launch the controller\\n\\n```bash\\npython -m fastchat.serve.controller\\n```\\n\\nThen, launch the model worker(s)\\n\\n```bash\\npython -m fastchat.serve.model_worker --model-path chatglm2-6b\\n```\\n\\nFinally, launch the RESTful API server\\n\\n```bash\\npython -m fastchat.serve.openai_api_server --host localhost --port 8000\\n```\\n\\nNormally this will work. However, if you encounter error like [this](https://github.com/lm-sys/FastChat/issues/1641), commenting out all the lines containing `finish_reason` in `fastchat/protocol/api_protocol.py` and `fastchat/protocol/openai_api_protocol.py` will fix the problem. The modified code looks like:\\n\\n```python\\nclass CompletionResponseChoice(BaseModel):\\n    index: int\\n    text: str\\n    logprobs: Optional[int] = None\\n    # finish_reason: Optional[Literal[\\"stop\\", \\"length\\"]]\\n\\nclass CompletionResponseStreamChoice(BaseModel):\\n    index: int\\n    text: str\\n    logprobs: Optional[float] = None\\n    # finish_reason: Optional[Literal[\\"stop\\", \\"length\\"]] = None\\n```\\n\\n\\n## Interact with model using `oai.Completion` (requires openai<1)\\n\\nNow the models can be directly accessed through openai-python library as well as `autogen.oai.Completion` and `autogen.oai.ChatCompletion`.\\n\\n\\n```python\\nfrom autogen import oai\\n\\n# create a text completion request\\nresponse = oai.Completion.create(\\n    config_list=[\\n        {\\n            \\"model\\": \\"chatglm2-6b\\",\\n            \\"base_url\\": \\"http://localhost:8000/v1\\",\\n            \\"api_type\\": \\"openai\\",\\n            \\"api_key\\": \\"NULL\\", # just a placeholder\\n        }\\n    ],\\n    prompt=\\"Hi\\",\\n)\\nprint(response)\\n\\n# create a chat completion request\\nresponse = oai.ChatCompletion.create(\\n    config_list=[\\n        {\\n            \\"model\\": \\"chatglm2-6b\\",\\n            \\"base_url\\": \\"http://localhost:8000/v1\\",\\n            \\"api_type\\": \\"openai\\",\\n            \\"api_key\\": \\"NULL\\",\\n        }\\n    ],\\n    messages=[{\\"role\\": \\"user\\", \\"content\\": \\"Hi\\"}]\\n)\\nprint(response)\\n```\\n\\nIf you would like to switch to different models, download their checkpoints and specify model path when launching model worker(s).\\n\\n## interacting with multiple local LLMs\\n\\nIf you would like to interact with multiple LLMs on your local machine, replace the `model_worker` step above with a multi model variant:\\n\\n```bash\\npython -m fastchat.serve.multi_model_worker \\\\\\n    --model-path lmsys/vicuna-7b-v1.3 \\\\\\n    --model-names vicuna-7b-v1.3 \\\\\\n    --model-path chatglm2-6b \\\\\\n    --model-names chatglm2-6b\\n```\\n\\nThe inference code would be:\\n\\n```python\\nfrom autogen import oai\\n\\n# create a chat completion request\\nresponse = oai.ChatCompletion.create(\\n    config_list=[\\n        {\\n            \\"model\\": \\"chatglm2-6b\\",\\n            \\"base_url\\": \\"http://localhost:8000/v1\\",\\n            \\"api_type\\": \\"openai\\",\\n            \\"api_key\\": \\"NULL\\",\\n        },\\n        {\\n            \\"model\\": \\"vicuna-7b-v1.3\\",\\n            \\"base_url\\": \\"http://localhost:8000/v1\\",\\n            \\"api_type\\": \\"openai\\",\\n            \\"api_key\\": \\"NULL\\",\\n        }\\n    ],\\n    messages=[{\\"role\\": \\"user\\", \\"content\\": \\"Hi\\"}]\\n)\\nprint(response)\\n```\\n\\n## For Further Reading\\n\\n* [Documentation](/docs/Getting-Started) about `autogen`.\\n* [Documentation](https://github.com/lm-sys/FastChat) about FastChat."},{"id":"/2023/06/28/MathChat","metadata":{"permalink":"/autogen/blog/2023/06/28/MathChat","source":"@site/blog/2023-06-28-MathChat/index.mdx","title":"MathChat - An Conversational Framework to Solve Math Problems","description":"MathChat WorkFlow","date":"2023-06-28T00:00:00.000Z","formattedDate":"June 28, 2023","tags":[{"label":"LLM","permalink":"/autogen/blog/tags/llm"},{"label":"GPT","permalink":"/autogen/blog/tags/gpt"},{"label":"research","permalink":"/autogen/blog/tags/research"}],"readingTime":7.31,"hasTruncateMarker":false,"authors":[{"name":"Yiran Wu","title":"PhD student at Pennsylvania State University","url":"https://github.com/kevin666aa","imageURL":"https://github.com/kevin666aa.png","key":"yiranwu"}],"frontMatter":{"title":"MathChat - An Conversational Framework to Solve Math Problems","authors":"yiranwu","tags":["LLM","GPT","research"]},"unlisted":false,"prevItem":{"title":"Use AutoGen for Local LLMs","permalink":"/autogen/blog/2023/07/14/Local-LLMs"},"nextItem":{"title":"Achieve More, Pay Less - Use GPT-4 Smartly","permalink":"/autogen/blog/2023/05/18/GPT-adaptive-humaneval"}},"content":"![MathChat WorkFlow](img/mathchatflow.png)\\n**TL;DR:**\\n* **We introduce MathChat, a conversational framework leveraging Large Language Models (LLMs), specifically GPT-4, to solve advanced mathematical problems.**\\n* **MathChat improves LLM\'s performance on challenging math problem-solving, outperforming basic prompting and other strategies by about 6%. The improvement was especially notable in the Algebra category, with a 15% increase in accuracy.**\\n* **Despite the advancement, GPT-4 still struggles to solve very challenging math problems, even with effective prompting strategies. Further improvements are needed, such as the development of more specific assistant models or the integration of new tools and prompts.**\\n\\nRecent Large Language Models (LLMs) like GTP-3.5 and GPT-4 have demonstrated astonishing abilities over previous models on various tasks, such as text generation, question answering, and code generation. Moreover, these models can communicate with humans through conversations and remember previous contexts, making it easier for humans to interact with them. These models play an increasingly important role in our daily lives assisting people with different tasks, such as writing emails, summarizing documents, and writing code.\\n\\nIn this blog post, we probe into the problem-solving capabilities of LLMs. Specifically, we are interested in their capabilities to solve advanced math problems, which could be representative of a broader class of problems that require precise reasoning and also have deterministic solutions.\\n\\nWe introduce MathChat, a conversational framework designed for solving challenging math problems with LLMs. This framework takes advantage of the chat-optimized feature of state-of-the-art LLMs, where a user proxy agent and an LLM assistant work together to tackle math problems. We also test previous prompting techniques for comparison.\\n\\n## The MathChat Framework\\n\\nMathChat simulates a conversation between the LLM assistant and a user proxy agent. As the name indicates, the user proxy agent acts as a proxy for the user, which is responsible for communicating with the LLM assistant and continuing the conversation in a desired manner.\\n\\nThe proxy agent first presents a math problem to the LLM assistant, framed by an initial prompt that guides the assistant in how it should work collaboratively to solve the problem. We incorporate existing prompting methods such as CoT (chain-of-thought) and tool-using are incorporated in the initial prompt. Key components of the prompt include:\\n\\n- **Tool-using Prompt:** This guides the LLM assistant to use Python code in the correct format to address the problem, allowing the user proxy agent to parse the code and provide the appropriate results.\\n\\n- **Problem-Solving Strategy Selection Prompt:** The assistant is instructed to choose one of three potential problem-solving strategies, including:\\n  1. Writing a Python program to solve the problem directly.\\n  2. Solving the problem directly without using Python, which exercises LLMs\' inherent reasoning capabilities.\\n  3. Solving the problem step by step with Python. This should be used when the first two strategies aren\'t suitable.\\n\\n- **Final Answer Encapsulation Prompt:** This part instructs the assistant to put the final answer in *\\\\boxed*{}.\\n\\nThe prompt design in MathChat is flexible and can easily be refined to include other tools, such as Wolfram Alpha.\\n\\nLet\'s take a look at an example between the **User Proxy Agent** and the **LLM Assistant** (GPT-4). The conversation focuses on how to solve inequality using Python.\\n(The conversation is modified for readability.)\\n\\n| Participant | Dialogue |\\n|-------------|----------|\\n| User Proxy Agent | (Initial Prompt: Let\'s solve a math problem with Python...) Problem: Find all x that satisfy the inequality (2x+10)(x+3) < (3x+9)(x+8). Express your answer in interval notation. |\\n| LLM assistant | The key idea to solve this problem is to find the critical points, which are the points where the inequality is equal. Then, test the intervals between the critical points to find the interval for which the inequality holds. |\\n| LLM assistant (continued) | Here\'s Python code to find the critical points: `from sympy import symbols, Eq, solve; x = symbols(\\"x\\"); lhs = (2*x + 10)*(x + 3); rhs = (3*x + 9)*(x + 8); equation = Eq(lhs, rhs); critical_points = solve(equation, x); critical_points` |\\n| User Proxy Agent | The critical points are: [-14, -3] |\\n| LLM assistant | We found the critical points to be x = -14 and x = -3. Now we\'ll test the intervals between these critical points as well as points before and after the critical points. The intervals are: x < -14, -14 < x < -3, x > -3. |\\n| LLM assistant (continued) | Here\'s Python code to test the inequality for each interval: `from sympy import symbols; x = symbols(\\"x\\"); inequality = (2*x + 10)*(x + 3) < (3*x + 9)*(x + 8); test_points = [-15, -5, 0]; intervals = []; for point in test_points: if inequality.subs(x, point): intervals.append(point); intervals` |\\n| User Proxy Agent | The intervals where the inequality holds true are for test points: [-15, 0] |\\n| LLM assistant | We have tested the intervals and found that the inequality holds for: 1. x < -14 (test point: -15) 2. x > -3 (test point: 0). Therefore, the solution to the inequality (2x+10)(x+3) < (3x+9)(x+8) is x \u2208 (-\u221e, -14) \u222a (-3, \u221e) |\\n\\n## Experiment Setup\\n\\nWe evaluate the improvement brought by MathChat.\\n\\nFor the experiment, we focus on the level-5 problems from the MATH dataset, which are composed of high school competition problems. These problems include the application of theorems and complex equation derivation and are challenging even for undergraduate students. We evaluate 6 of 7 categories from the dataset (excluding Geometry): Prealgebra, Algebra, Number Theory, Counting and Probability, Intermediate Algebra, and Precalculus.\\n\\nWe evaluate GPT-4 and use the default configuration of the OpenAI API. To access the final performance, we manually compare the final answer with the correct answer.  For the vanilla prompt, Program Synthesis, and MathChat, we have GPT-4 enclose the final answer in *\\\\boxed*{}, and we take the return of the function in PoT as the final answer.\\n\\n\\nWe also evaluate the following methods for comparison:\\n\\n1. **Vanilla prompting:** Evaluates GPT-4\'s direct problem-solving capability. The prompt used is: *\\" Solve the problem carefully. Put the final answer in \\\\boxed{}\\"*.\\n\\n2. **Program of Thoughts (PoT):** Uses a zero-shot PoT prompt that requests the model to create a *Solver* function to solve the problem and return the final answer.\\n\\n3. **Program Synthesis (PS) prompting:** Like PoT, it prompts the model to write a program to solve the problem. The prompt used is: *\\"Write a program that answers the following question: \\\\{Problem\\\\}\\"*.\\n\\n## Experiment Results\\n\\nThe accuracy on all the problems with difficulty level-5 from different categories of the MATH dataset with different methods is shown below:\\n\\n![Result](img/result.png)\\n\\nWe found that compared to basic prompting, which demonstrates the innate capabilities of GPT-4, utilizing Python within the context of PoT or PS strategy improved the overall accuracy by about 10%. This increase was mostly seen in categories involving more numerical manipulations, such as Counting & Probability and Number Theory, and in more complex categories like Intermediate Algebra and Precalculus.\\n\\nFor categories like Algebra and Prealgebra, PoT and PS showed little improvement, and in some instances, even led to a decrease in accuracy. However, MathChat was able to enhance total accuracy by around 6% compared to PoT and PS, showing competitive performance across all categories. Remarkably, MathChat improved accuracy in the Algebra category by about 15% over other methods. Note that categories like Intermediate Algebra and Precalculus remained challenging for all methods, with only about 20% of problems solved accurately.\\n\\nThe code for experiments can be found at this [repository](https://github.com/kevin666aa/FLAML/tree/gpt_math_solver/flaml/autogen/math).\\nWe now provide an implementation of MathChat using the interactive agents in AutoGen. See this [notebook](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_MathChat.ipynb) for example usage.\\n\\n## Future Directions\\n\\nDespite MathChat\'s improvements over previous methods, the results show that complex math problem is still challenging for recent powerful LLMs, like GPT-4, even with help from external tools.\\n\\nFurther work can be done to enhance this framework or math problem-solving in general:\\n- Although enabling the model to use tools like Python can reduce calculation errors, LLMs are still prone to logic errors. Methods like self-consistency (Sample several solutions and take a major vote on the final answer), or self-verification (use another LLM instance to check whether an answer is correct) might improve the performance.\\n- Sometimes, whether the LLM can solve the problem depends on the plan it uses. Some plans require less computation and logical reasoning, leaving less room for mistakes.\\n- MathChat has the potential to be adapted into a copilot system, which could assist users with math problems. This system could allow users to be more involved in the problem-solving process, potentially enhancing learning.\\n\\n## For Further Reading\\n\\n* [Research paper of MathChat](https://arxiv.org/abs/2306.01337)\\n* [Documentation about `autogen`](/docs/Getting-Started)\\n\\n*Are you working on applications that involve math problem-solving? Would you appreciate additional research or support on the application of LLM-based agents for math problem-solving? Please join our [Discord](https://discord.gg/pAbnFJrkgZ) server for discussion.*"},{"id":"/2023/05/18/GPT-adaptive-humaneval","metadata":{"permalink":"/autogen/blog/2023/05/18/GPT-adaptive-humaneval","source":"@site/blog/2023-05-18-GPT-adaptive-humaneval/index.mdx","title":"Achieve More, Pay Less - Use GPT-4 Smartly","description":"An adaptive way of using GPT-3.5 and GPT-4 outperforms GPT-4 in both coding success rate and inference cost","date":"2023-05-18T00:00:00.000Z","formattedDate":"May 18, 2023","tags":[{"label":"LLM","permalink":"/autogen/blog/tags/llm"},{"label":"GPT","permalink":"/autogen/blog/tags/gpt"},{"label":"research","permalink":"/autogen/blog/tags/research"}],"readingTime":7.785,"hasTruncateMarker":false,"authors":[{"name":"Chi Wang","title":"Principal Researcher at Microsoft Research","url":"https://www.linkedin.com/in/chi-wang-49b15b16/","imageURL":"https://github.com/sonichi.png","key":"sonichi"}],"frontMatter":{"title":"Achieve More, Pay Less - Use GPT-4 Smartly","authors":"sonichi","tags":["LLM","GPT","research"]},"unlisted":false,"prevItem":{"title":"MathChat - An Conversational Framework to Solve Math Problems","permalink":"/autogen/blog/2023/06/28/MathChat"},"nextItem":{"title":"Does Model and Inference Parameter Matter in LLM Applications? - A Case Study for MATH","permalink":"/autogen/blog/2023/04/21/LLM-tuning-math"}},"content":"![An adaptive way of using GPT-3.5 and GPT-4 outperforms GPT-4 in both coding success rate and inference cost](img/humaneval.png)\\n\\n**TL;DR:**\\n* **A case study using the HumanEval benchmark shows that an adaptive way of using multiple GPT models can achieve both much higher accuracy (from 68% to 90%) and lower inference cost (by 18%) than using GPT-4 for coding.**\\n\\n\\nGPT-4 is a big upgrade of foundation model capability, e.g., in code and math, accompanied by a much higher (more than 10x) price per token to use over GPT-3.5-Turbo. On a code completion benchmark, [HumanEval](https://huggingface.co/datasets/openai_humaneval), developed by OpenAI, GPT-4 can successfully solve 68% tasks while GPT-3.5-Turbo does 46%. It is possible to increase the success rate of GPT-4 further by generating multiple responses or making multiple calls. However, that will further increase the cost, which is already nearly 20 times of using GPT-3.5-Turbo and with more restricted API call rate limit. Can we achieve more with less?\\n\\nIn this blog post, we will explore a creative, adaptive way of using GPT models which leads to a big leap forward.\\n\\n## Observations\\n\\n* GPT-3.5-Turbo can already solve 40%-50% tasks. For these tasks if we never use GPT-4, we can save nearly 40-50% cost.\\n* If we use the saved cost to generate more responses with GPT-4 for the remaining unsolved tasks, it is possible to solve some more of them while keeping the amortized cost down.\\n\\nThe obstacle of leveraging these observations is that we do not know *a priori* which tasks can be solved by the cheaper model, which tasks can be solved by the expensive model, and which tasks can be solved by paying even more to the expensive model.\\n\\nTo overcome that obstacle, one may want to predict which task requires what model to solve and how many responses are required for each task. Let\'s look at one example code completion task:\\n\\n```python\\ndef vowels_count(s):\\n    \\"\\"\\"Write a function vowels_count which takes a string representing\\n    a word as input and returns the number of vowels in the string.\\n    Vowels in this case are \'a\', \'e\', \'i\', \'o\', \'u\'. Here, \'y\' is also a\\n    vowel, but only when it is at the end of the given word.\\n\\n    Example:\\n    >>> vowels_count(\\"abcde\\")\\n    2\\n    >>> vowels_count(\\"ACEDY\\")\\n    3\\n    \\"\\"\\"\\n```\\n\\nCan we predict whether GPT-3.5-Turbo can solve this task or do we need to use GPT-4? My first guess is that GPT-3.5-Turbo can get it right because the instruction is fairly straightforward. Yet, it turns out that GPT-3.5-Turbo does not consistently get it right, if we only give it one chance. It\'s not obvious (but an interesting research question!) how to predict the performance without actually trying.\\n\\nWhat else can we do? We notice that:\\n**It\'s \\"easier\\" to verify a given solution than finding a correct solution from scratch.**\\n\\nSome simple example test cases are provided in the docstr. If we already have a response generated by a model, we can use those test cases to filter wrong implementations, and either use a more powerful model or generate more responses, until the result passes the example test cases. Moreover, this step can be automated by asking GPT-3.5-Turbo to generate assertion statements from the examples given in the docstr (a simpler task where we can place our bet) and executing the code.\\n\\n## Solution\\n\\nCombining these observations, we can design a solution with two intuitive ideas:\\n\\n* Make use of auto-generated feedback, i.e., code execution results, to filter responses.\\n* Try inference configurations one by one, until one response can pass the filter.\\n\\n![Design](img/design.png)\\n\\nThis solution works adaptively without knowing or predicting which task fits which configuration. It simply tries multiple configurations one by one, starting from the cheapest configuration. Note that one configuration can generate multiple responses (by setting the inference parameter n larger than 1). And different configurations can use the same model and different inference parameters such as n and temperature. Only one response is returned and evaluated per task.\\n\\nAn implementation of this solution is provided in [autogen](/docs/reference/code_utils#implement). It uses the following sequence of configurations:\\n\\n1. GPT-3.5-Turbo, n=1, temperature=0\\n1. GPT-3.5-Turbo, n=7, temperature=1, stop=[\\"\\\\nclass\\", \\"\\\\ndef\\", \\"\\\\nif\\", \\"\\\\nprint\\"]\\n1. GPT-4, n=1, temperature=0\\n1. GPT-4, n=2, temperature=1, stop=[\\"\\\\nclass\\", \\"\\\\ndef\\", \\"\\\\nif\\", \\"\\\\nprint\\"]\\n1. GPT-4, n=1, temperature=1, stop=[\\"\\\\nclass\\", \\"\\\\ndef\\", \\"\\\\nif\\", \\"\\\\nprint\\"]\\n\\n## Experiment Results\\n\\nThe first figure in this blog post shows the success rate and average inference cost of the adaptive solution compared with default GPT-4.\\nThe inference cost includes the cost for generating the assertions in our solution. The generated assertions are not always correct, and programs that pass/fail the generated assertions are not always right/wrong. Despite of that, the adaptive solution can increase the success rate (referred to as pass@1 in the literature) from 68% to 90%, while reducing the cost by 18%.\\n\\nHere are a few examples of function definitions which are solved by different configurations in the portfolio.\\n\\n1. Solved by GPT-3.5-Turbo, n=1, temperature=0\\n```python\\ndef compare(game,guess):\\n    \\"\\"\\"I think we all remember that feeling when the result of some long-awaited\\n    event is finally known. The feelings and thoughts you have at that moment are\\n    definitely worth noting down and comparing.\\n    Your task is to determine if a person correctly guessed the results of a number of matches.\\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\\n\\n\\n    example:\\n\\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\\n    \\"\\"\\"\\n```\\n2. Solved by GPT-3.5-Turbo, n=7, temperature=1, stop=[\\"\\\\nclass\\", \\"\\\\ndef\\", \\"\\\\nif\\", \\"\\\\nprint\\"]: the `vowels_count` function presented earlier.\\n3. Solved by GPT-4, n=1, temperature=0:\\n```python\\ndef string_xor(a: str, b: str) -> str:\\n    \\"\\"\\" Input are two strings a and b consisting only of 1s and 0s.\\n    Perform binary XOR on these inputs and return result also as a string.\\n    >>> string_xor(\'010\', \'110\')\\n    \'100\'\\n    \\"\\"\\"\\n```\\n4. Solved by GPT-4, n=2, temperature=1, stop=[\\"\\\\nclass\\", \\"\\\\ndef\\", \\"\\\\nif\\", \\"\\\\nprint\\"]:\\n```python\\ndef is_palindrome(string: str) -> bool:\\n    \\"\\"\\" Test if given string is a palindrome \\"\\"\\"\\n    return string == string[::-1]\\n\\n\\ndef make_palindrome(string: str) -> str:\\n    \\"\\"\\" Find the shortest palindrome that begins with a supplied string.\\n    Algorithm idea is simple:\\n    - Find the longest postfix of supplied string that is a palindrome.\\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\\n    >>> make_palindrome(\'\')\\n    \'\'\\n    >>> make_palindrome(\'cat\')\\n    \'catac\'\\n    >>> make_palindrome(\'cata\')\\n    \'catac\'\\n    \\"\\"\\"\\n```\\n5. Solved by GPT-4, n=1, temperature=1, stop=[\\"\\\\nclass\\", \\"\\\\ndef\\", \\"\\\\nif\\", \\"\\\\nprint\\"]:\\n```python\\ndef sort_array(arr):\\n    \\"\\"\\"\\n    In this Kata, you have to sort an array of non-negative integers according to\\n    number of ones in their binary representation in ascending order.\\n    For similar number of ones, sort based on decimal value.\\n\\n    It must be implemented like this:\\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\\n    \\"\\"\\"\\n```\\n\\nThe last problem is an example with wrong example test cases in the original definition. It misleads the adaptive solution because a correct implementation is regarded as wrong and more trials are made. The last configuration in the sequence returns the right implementation, even though it does not pass the auto-generated assertions. This example demonstrates that:\\n* Our adaptive solution has a certain degree of fault tolerance.\\n* The success rate and inference cost for the adaptive solution can be further improved if correct example test cases are used.\\n\\nIt is worth noting that the reduced inference cost is the amortized cost over all the tasks. For each individual task, the cost can be either larger or smaller than directly using GPT-4. This is the nature of the adaptive solution: The cost is in general larger for difficult tasks than that for easy tasks.\\n\\nAn example notebook to run this experiment can be found at: https://github.com/microsoft/FLAML/blob/v1.2.1/notebook/research/autogen_code.ipynb. The experiment was run when AutoGen was a subpackage in FLAML.\\n\\n## Discussion\\n\\nOur solution is quite simple to implement using a generic interface offered in [`autogen`](/docs/Use-Cases/enhanced_inference#logic-error), yet the result is quite encouraging.\\n\\nWhile the specific way of generating assertions is application-specific, the main ideas are general in LLM operations:\\n* Generate multiple responses to select - especially useful when selecting a good response is relatively easier than generating a good response at one shot.\\n* Consider multiple configurations to generate responses - especially useful when:\\n  - Model and other inference parameter choice affect the utility-cost tradeoff; or\\n  - Different configurations have complementary effect.\\n\\nA [previous blog post](/blog/2023/04/21/LLM-tuning-math) provides evidence that these ideas are relevant in solving math problems too.\\n`autogen` uses a technique [EcoOptiGen](https://arxiv.org/abs/2303.04673) to support inference parameter tuning and model selection.\\n\\nThere are many directions of extensions in research and development:\\n* Generalize the way to provide feedback.\\n* Automate the process of optimizing the configurations.\\n* Build adaptive agents for different applications.\\n\\n*Do you find this approach applicable to your use case? Do you have any other challenge to share about LLM applications? Do you like to see more support or research of LLM optimization or automation? Please join our [Discord](https://discord.gg/pAbnFJrkgZ) server for discussion.*\\n\\n## For Further Reading\\n\\n* [Documentation](/docs/Getting-Started) about `autogen` and [Research paper](https://arxiv.org/abs/2303.04673).\\n* [Blog post](/blog/2023/04/21/LLM-tuning-math) about a related study for math."},{"id":"/2023/04/21/LLM-tuning-math","metadata":{"permalink":"/autogen/blog/2023/04/21/LLM-tuning-math","source":"@site/blog/2023-04-21-LLM-tuning-math/index.md","title":"Does Model and Inference Parameter Matter in LLM Applications? - A Case Study for MATH","description":"level 2 algebra","date":"2023-04-21T00:00:00.000Z","formattedDate":"April 21, 2023","tags":[{"label":"LLM","permalink":"/autogen/blog/tags/llm"},{"label":"GPT","permalink":"/autogen/blog/tags/gpt"},{"label":"research","permalink":"/autogen/blog/tags/research"}],"readingTime":5.015,"hasTruncateMarker":false,"authors":[{"name":"Chi Wang","title":"Principal Researcher at Microsoft Research","url":"https://www.linkedin.com/in/chi-wang-49b15b16/","imageURL":"https://github.com/sonichi.png","key":"sonichi"}],"frontMatter":{"title":"Does Model and Inference Parameter Matter in LLM Applications? - A Case Study for MATH","authors":"sonichi","tags":["LLM","GPT","research"]},"unlisted":false,"prevItem":{"title":"Achieve More, Pay Less - Use GPT-4 Smartly","permalink":"/autogen/blog/2023/05/18/GPT-adaptive-humaneval"}},"content":"![level 2 algebra](img/level2algebra.png)\\n\\n**TL;DR:**\\n* **Just by tuning the inference parameters like model, number of responses, temperature etc. without changing any model weights or prompt, the baseline accuracy of untuned gpt-4 can be improved by 20% in high school math competition problems.**\\n* **For easy problems, the tuned gpt-3.5-turbo model vastly outperformed untuned gpt-4 in accuracy (e.g., 90% vs. 70%) and cost efficiency. For hard problems, the tuned gpt-4 is much more accurate (e.g., 35% vs. 20%) and less expensive than untuned gpt-4.**\\n* **AutoGen can help with model selection, parameter tuning, and cost-saving in LLM applications.**\\n\\n\\nLarge language models (LLMs) are powerful tools that can generate natural language texts for various applications, such as chatbots, summarization, translation, and more. GPT-4 is currently the state of the art LLM in the world. Is model selection irrelevant? What about inference parameters?\\n\\nIn this blog post, we will explore how model and inference parameter matter in LLM applications, using a case study for [MATH](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html), a benchmark for evaluating LLMs on advanced mathematical problem solving. MATH consists of 12K math competition problems from AMC-10, AMC-12 and AIME. Each problem is accompanied by a step-by-step solution.\\n\\nWe will use AutoGen to automatically find the best model and inference parameter for LLMs on a given task and dataset given an inference budget, using a novel low-cost search & pruning strategy. AutoGen currently supports all the LLMs from OpenAI, such as GPT-3.5 and GPT-4.\\n\\nWe will use AutoGen to perform model selection and inference parameter tuning. Then we compare the performance and inference cost on solving algebra problems with the untuned gpt-4. We will also analyze how different difficulty levels affect the results.\\n\\n## Experiment Setup\\n\\nWe use AutoGen to select between the following models with a target inference budget $0.02 per instance:\\n- gpt-3.5-turbo, a relatively cheap model that powers the popular ChatGPT app\\n- gpt-4, the state of the art LLM that costs more than 10 times of gpt-3.5-turbo\\n\\nWe adapt the models using 20 examples in the train set, using the problem statement as the input and generating the solution as the output. We use the following inference parameters:\\n\\n- temperature: The parameter that controls the randomness of the output text. A higher temperature means more diversity but less coherence. We search for the optimal temperature in the range of [0, 1].\\n- top_p: The parameter that controls the probability mass of the output tokens. Only tokens with a cumulative probability less than or equal to top-p are considered. A lower top-p means more diversity but less coherence. We search for the optimal top-p in the range of [0, 1].\\n- max_tokens: The maximum number of tokens that can be generated for each output. We search for the optimal max length in the range of [50, 1000].\\n- n: The number of responses to generate. We search for the optimal n in the range of [1, 100].\\n- prompt: We use the template: \\"{problem} Solve the problem carefully. Simplify your answer as much as possible. Put the final answer in \\\\\\\\boxed{{}}.\\" where {problem} will be replaced by the math problem instance.\\n\\nIn this experiment, when n > 1, we find the answer with highest votes among all the responses and then select it as the final answer to compare with the ground truth. For example, if n = 5 and 3 of the responses contain a final answer 301 while 2 of the responses contain a final answer 159, we choose 301 as the final answer. This can help with resolving potential errors due to randomness. We use the average accuracy and average inference cost as the metric to evaluate the performance over a dataset. The inference cost of a particular instance is measured by the price per 1K tokens and the number of tokens consumed.\\n\\n## Experiment Results\\n\\nThe first figure in this blog post shows the average accuracy and average inference cost of each configuration on the level 2 Algebra test set.\\n\\nSurprisingly, the tuned gpt-3.5-turbo model is selected as a better model and it vastly outperforms untuned gpt-4 in accuracy (92% vs. 70%) with equal or 2.5 times higher inference budget.\\nThe same observation can be obtained on the level 3 Algebra test set.\\n\\n![level 3 algebra](img/level3algebra.png)\\n\\nHowever, the selected model changes on level 4 Algebra.\\n\\n![level 4 algebra](img/level4algebra.png)\\n\\nThis time gpt-4 is selected as the best model. The tuned gpt-4 achieves much higher accuracy (56% vs. 44%) and lower cost than the untuned gpt-4.\\nOn level 5 the result is similar.\\n\\n![level 5 algebra](img/level5algebra.png)\\n\\nWe can see that AutoGen has found different optimal model and inference parameters for each subset of a particular level, which shows that these parameters matter in cost-sensitive LLM applications and need to be carefully tuned or adapted.\\n\\nAn example notebook to run these experiments can be found at: https://github.com/microsoft/FLAML/blob/v1.2.1/notebook/autogen_chatgpt.ipynb. The experiments were run when AutoGen was a subpackage in FLAML.\\n\\n## Analysis and Discussion\\n\\nWhile gpt-3.5-turbo demonstrates competitive accuracy with voted answers in relatively easy algebra problems under the same inference budget, gpt-4 is a better choice for the most difficult problems. In general, through parameter tuning and model selection, we can identify the opportunity to save the expensive model for more challenging tasks, and improve the overall effectiveness of a budget-constrained system.\\n\\nThere are many other alternative ways of solving math problems, which we have not covered in this blog post. When there are choices beyond the inference parameters, they can be generally tuned via [`flaml.tune`](https://microsoft.github.io/FLAML/docs/Use-Cases/Tune-User-Defined-Function).\\n\\nThe need for model selection, parameter tuning and cost saving is not specific to the math problems. The [Auto-GPT](https://github.com/Significant-Gravitas/Auto-GPT) project is an example where high cost can easily prevent a generic complex task to be accomplished as it needs many LLM inference calls.\\n\\n## For Further Reading\\n\\n* [Research paper about the tuning technique](https://arxiv.org/abs/2303.04673)\\n* [Documentation about inference tuning](/docs/Use-Cases/enhanced_inference)\\n\\n*Do you have any experience to share about LLM applications? Do you like to see more support or research of LLM optimization or automation? Please join our [Discord](https://discord.gg/pAbnFJrkgZ) server for discussion.*"}]}')}}]);