"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[455],{25551:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var a=t(85893),o=t(11151);const r={custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat_RAG.ipynb",description:"Implement and manage a multi-agent chat system using AutoGen, where AI assistants retrieve information, generate code, and interact collaboratively to solve complex tasks, especially in areas not covered by their training data.",source_notebook:"/notebook/agentchat_groupchat_RAG.ipynb",tags:["group chat","orchestration","RAG"],title:"Group Chat with Retrieval Augmented Generation"},s="Group Chat with Retrieval Augmented Generation",i={id:"notebooks/agentchat_groupchat_RAG",title:"Group Chat with Retrieval Augmented Generation",description:"Implement and manage a multi-agent chat system using AutoGen, where AI assistants retrieve information, generate code, and interact collaboratively to solve complex tasks, especially in areas not covered by their training data.",source:"@site/docs/notebooks/agentchat_groupchat_RAG.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_groupchat_RAG",permalink:"/autogen/docs/notebooks/agentchat_groupchat_RAG",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat_RAG.ipynb",tags:[{label:"group chat",permalink:"/autogen/docs/tags/group-chat"},{label:"orchestration",permalink:"/autogen/docs/tags/orchestration"},{label:"RAG",permalink:"/autogen/docs/tags/rag"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat_RAG.ipynb",description:"Implement and manage a multi-agent chat system using AutoGen, where AI assistants retrieve information, generate code, and interact collaboratively to solve complex tasks, especially in areas not covered by their training data.",source_notebook:"/notebook/agentchat_groupchat_RAG.ipynb",tags:["group chat","orchestration","RAG"],title:"Group Chat with Retrieval Augmented Generation"},sidebar:"notebooksSidebar",previous:{title:"Group Chat",permalink:"/autogen/docs/notebooks/agentchat_groupchat"},next:{title:"Group Chat with Customized Speaker Selection Method",permalink:"/autogen/docs/notebooks/agentchat_groupchat_customized"}},l={},u=[{value:"Set your API Endpoint",id:"set-your-api-endpoint",level:2},{value:"Construct Agents",id:"construct-agents",level:2},{value:"Start Chat",id:"start-chat",level:2},{value:"UserProxyAgent doesn\u2019t get the correct code",id:"userproxyagent-doesnt-get-the-correct-code",level:3},{value:"RetrieveUserProxyAgent get the correct code",id:"retrieveuserproxyagent-get-the-correct-code",level:3},{value:"Call RetrieveUserProxyAgent while init chat with another user proxy agent",id:"call-retrieveuserproxyagent-while-init-chat-with-another-user-proxy-agent",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"group-chat-with-retrieval-augmented-generation",children:"Group Chat with Retrieval Augmented Generation"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_groupchat_RAG.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_groupchat_RAG.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["AutoGen supports conversable agents powered by LLMs, tools, or humans,\nperforming tasks collectively via automated chat. This framework allows\ntool use and human participation through multi-agent conversation.\nPlease find documentation about this feature\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/Use-Cases/agent_chat",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsx)(n.p,{children:"Some extra dependencies are needed for this notebook, which can be installed via pip:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen[retrievechat]\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,a.jsx)(n.h2,{id:"set-your-api-endpoint",children:"Set your API Endpoint"}),"\n",(0,a.jsxs)(n.p,{children:["The\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/reference/oai/openai_utils#config_list_from_json",children:(0,a.jsx)(n.code,{children:"config_list_from_json"})}),"\nfunction loads a list of configurations from an environment variable or\na json file."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typing_extensions import Annotated\nimport chromadb\n\nimport autogen\nfrom autogen import AssistantAgent\nfrom autogen.agentchat.contrib.retrieve_user_proxy_agent import RetrieveUserProxyAgent\n\nconfig_list = autogen.config_list_from_json("OAI_CONFIG_LIST")\n\nprint("LLM models: ", [config_list[i]["model"] for i in range(len(config_list))])\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"LLM models:  ['gpt-4-1106-preview', 'gpt-4-turbo-preview', 'gpt-4-0613', 'gpt-35-turbo-0613', 'gpt-35-turbo-1106']\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about configuring LLMs for agents ",(0,a.jsx)(n.a,{href:"/docs/topics/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"construct-agents",children:"Construct Agents"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'llm_config = {\n    "timeout": 60,\n    "temperature": 0,\n    "config_list": config_list,\n}\n\n\ndef termination_msg(x):\n    return isinstance(x, dict) and "TERMINATE" == str(x.get("content", ""))[-9:].upper()\n\n\nboss = autogen.UserProxyAgent(\n    name="Boss",\n    is_termination_msg=termination_msg,\n    human_input_mode="NEVER",\n    code_execution_config=False,  # we don\'t want to execute code in this case.\n    default_auto_reply="Reply `TERMINATE` if the task is done.",\n    description="The boss who ask questions and give tasks.",\n)\n\nboss_aid = RetrieveUserProxyAgent(\n    name="Boss_Assistant",\n    is_termination_msg=termination_msg,\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=3,\n    retrieve_config={\n        "task": "code",\n        "docs_path": "https://raw.githubusercontent.com/microsoft/FLAML/main/website/docs/Examples/Integrate%20-%20Spark.md",\n        "chunk_token_size": 1000,\n        "model": config_list[0]["model"],\n        "client": chromadb.PersistentClient(path="/tmp/chromadb"),\n        "collection_name": "groupchat",\n        "get_or_create": True,\n    },\n    code_execution_config=False,  # we don\'t want to execute code in this case.\n    description="Assistant who has extra content retrieval power for solving difficult problems.",\n)\n\ncoder = AssistantAgent(\n    name="Senior_Python_Engineer",\n    is_termination_msg=termination_msg,\n    system_message="You are a senior python engineer, you provide python code to answer questions. Reply `TERMINATE` in the end when everything is done.",\n    llm_config=llm_config,\n    description="Senior Python Engineer who can write code to solve problems and answer questions.",\n)\n\npm = autogen.AssistantAgent(\n    name="Product_Manager",\n    is_termination_msg=termination_msg,\n    system_message="You are a product manager. Reply `TERMINATE` in the end when everything is done.",\n    llm_config=llm_config,\n    description="Product Manager who can design and plan the project.",\n)\n\nreviewer = autogen.AssistantAgent(\n    name="Code_Reviewer",\n    is_termination_msg=termination_msg,\n    system_message="You are a code reviewer. Reply `TERMINATE` in the end when everything is done.",\n    llm_config=llm_config,\n    description="Code Reviewer who can review the code.",\n)\n\nPROBLEM = "How to use spark for parallel training in FLAML? Give me sample code."\n\n\ndef _reset_agents():\n    boss.reset()\n    boss_aid.reset()\n    coder.reset()\n    pm.reset()\n    reviewer.reset()\n\n\ndef rag_chat():\n    _reset_agents()\n    groupchat = autogen.GroupChat(\n        agents=[boss_aid, pm, coder, reviewer], messages=[], max_round=12, speaker_selection_method="round_robin"\n    )\n    manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)\n\n    # Start chatting with boss_aid as this is the user proxy agent.\n    boss_aid.initiate_chat(\n        manager,\n        message=boss_aid.message_generator,\n        problem=PROBLEM,\n        n_results=3,\n    )\n\n\ndef norag_chat():\n    _reset_agents()\n    groupchat = autogen.GroupChat(\n        agents=[boss, pm, coder, reviewer],\n        messages=[],\n        max_round=12,\n        speaker_selection_method="auto",\n        allow_repeat_speaker=False,\n    )\n    manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)\n\n    # Start chatting with the boss as this is the user proxy agent.\n    boss.initiate_chat(\n        manager,\n        message=PROBLEM,\n    )\n\n\ndef call_rag_chat():\n    _reset_agents()\n\n    # In this case, we will have multiple user proxy agents and we don\'t initiate the chat\n    # with RAG user proxy agent.\n    # In order to use RAG user proxy agent, we need to wrap RAG agents in a function and call\n    # it from other agents.\n    def retrieve_content(\n        message: Annotated[\n            str,\n            "Refined message which keeps the original meaning and can be used to retrieve content for code generation and question answering.",\n        ],\n        n_results: Annotated[int, "number of results"] = 3,\n    ) -> str:\n        boss_aid.n_results = n_results  # Set the number of results to be retrieved.\n        # Check if we need to update the context.\n        update_context_case1, update_context_case2 = boss_aid._check_update_context(message)\n        if (update_context_case1 or update_context_case2) and boss_aid.update_context:\n            boss_aid.problem = message if not hasattr(boss_aid, "problem") else boss_aid.problem\n            _, ret_msg = boss_aid._generate_retrieve_user_reply(message)\n        else:\n            _context = {"problem": message, "n_results": n_results}\n            ret_msg = boss_aid.message_generator(boss_aid, None, _context)\n        return ret_msg if ret_msg else message\n\n    boss_aid.human_input_mode = "NEVER"  # Disable human input for boss_aid since it only retrieves content.\n\n    for caller in [pm, coder, reviewer]:\n        d_retrieve_content = caller.register_for_llm(\n            description="retrieve content for code generation and question answering.", api_style="function"\n        )(retrieve_content)\n\n    for executor in [boss, pm]:\n        executor.register_for_execution()(d_retrieve_content)\n\n    groupchat = autogen.GroupChat(\n        agents=[boss, pm, coder, reviewer],\n        messages=[],\n        max_round=12,\n        speaker_selection_method="round_robin",\n        allow_repeat_speaker=False,\n    )\n\n    manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)\n\n    # Start chatting with the boss as this is the user proxy agent.\n    boss.initiate_chat(\n        manager,\n        message=PROBLEM,\n    )\n'})}),"\n",(0,a.jsx)(n.h2,{id:"start-chat",children:"Start Chat"}),"\n",(0,a.jsx)(n.h3,{id:"userproxyagent-doesnt-get-the-correct-code",children:"UserProxyAgent doesn\u2019t get the correct code"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/microsoft/FLAML",children:"FLAML"})," was open sourced in 2020, so\nChatGPT is familiar with it. However, Spark-related APIs were added in\n2022, so they were not in ChatGPT\u2019s training data. As a result, we end\nup with invalid code."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"norag_chat()\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'Boss (to chat_manager):\n\nHow to use spark for parallel training in FLAML? Give me sample code.\n\n--------------------------------------------------------------------------------\nSenior_Python_Engineer (to chat_manager):\n\nTo use Apache Spark for parallel training in FLAML, you need to use the `flaml.tune.run` function. Here is a sample code:\n\n```python\nfrom flaml import tune\n\n# Define your training function\ndef training_function(config):\n    # your training code here\n    pass\n\n# Define your search space\nsearch_space = {\n    "lr": tune.loguniform(1e-4, 1e-1),\n    "momentum": tune.uniform(0.1, 0.9),\n}\n\n# Use SparkTrials for parallelization\nfrom ray.tune import SparkTrials\n\nspark_trials = SparkTrials(parallelism=2)\n\nanalysis = tune.run(\n    training_function,\n    config=search_space,\n    num_samples=10,\n    scheduler=tune.schedulers.FIFOScheduler(),\n    progress_reporter=tune.JupyterNotebookReporter(overwrite=True),\n    trial_executor=spark_trials,\n)\n\nprint("Best config: ", analysis.get_best_config(metric="accuracy", mode="max"))\n\n# Get a dataframe for analyzing trial results.\ndf = analysis.results_df\n```\n\nIn this code, `training_function` is your training function, which should take a `config` argument. This `config` argument is a dictionary that includes hyperparameters for your model. The `search_space` is a dictionary that defines the search space for your hyperparameters.\n\nThe `tune.run` function is used to start the hyperparameter tuning. The `config` argument is your search space, `num_samples` is the number of times to sample from the search space, and `scheduler` is the scheduler for the trials. The `trial_executor` argument is set to `spark_trials` to use Spark for parallelization.\n\nThe `analysis.get_best_config` function is used to get the best hyperparameters found during the tuning. The `analysis.results_df` gives a dataframe that contains the results of all trials.\n\nPlease note that you need to have Apache Spark and Ray installed and properly configured in your environment to run this code.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(n.h3,{id:"retrieveuserproxyagent-get-the-correct-code",children:"RetrieveUserProxyAgent get the correct code"}),"\n",(0,a.jsx)(n.p,{children:"Since RetrieveUserProxyAgent can perform retrieval-augmented generation\nbased on the given documentation file, ChatGPT can generate the correct\ncode for us!"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"rag_chat()\n# type exit to terminate the chat\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'doc_ids:  [[\'doc_0\', \'doc_1\', \'doc_122\']]\nAdding doc_id doc_0 to context.\nAdding doc_id doc_1 to context.\nAdding doc_id doc_122 to context.\nBoss_Assistant (to chat_manager):\n\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: How to use spark for parallel training in FLAML? Give me sample code.\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n# Creating a dictionary\ndata = {"Square_Feet": [800, 1200, 1800, 1500, 850],\n      "Age_Years": [20, 15, 10, 7, 25],\n      "Price": [100000, 200000, 300000, 240000, 120000]}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n```python\nfrom pyspark.ml.feature import VectorAssembler\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n#### Model List\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performes parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n```python\nimport flaml\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True, # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n\n2684,4/26/2011,2,0,4,17,0,2,1,1,0.68,0.6364,0.61,0.3582,521\n2685,4/26/2011,2,0,4,18,0,2,1,1,0.68,0.6364,0.65,0.4478,528\n2686,4/26/2011,2,0,4,19,0,2,1,1,0.64,0.6061,0.73,0.4179,328\n2687,4/26/2011,2,0,4,20,0,2,1,1,0.64,0.6061,0.73,0.3582,234\n2688,4/26/2011,2,0,4,21,0,2,1,1,0.62,0.5909,0.78,0.2836,195\n2689,4/26/2011,2,0,4,22,0,2,1,2,0.6,0.5606,0.83,0.194,148\n2690,4/26/2011,2,0,4,23,0,2,1,2,0.6,0.5606,0.83,0.2239,78\n2691,4/27/2011,2,0,4,0,0,3,1,1,0.6,0.5606,0.83,0.2239,27\n2692,4/27/2011,2,0,4,1,0,3,1,1,0.6,0.5606,0.83,0.2537,17\n2693,4/27/2011,2,0,4,2,0,3,1,1,0.58,0.5455,0.88,0.2537,5\n2694,4/27/2011,2,0,4,3,0,3,1,2,0.58,0.5455,0.88,0.2836,7\n2695,4/27/2011,2,0,4,4,0,3,1,1,0.56,0.5303,0.94,0.2239,6\n2696,4/27/2011,2,0,4,5,0,3,1,2,0.56,0.5303,0.94,0.2537,17\n2697,4/27/2011,2,0,4,6,0,3,1,1,0.56,0.5303,0.94,0.2537,84\n2698,4/27/2011,2,0,4,7,0,3,1,2,0.58,0.5455,0.88,0.2836,246\n2699,4/27/2011,2,0,4,8,0,3,1,2,0.58,0.5455,0.88,0.3284,444\n2700,4/27/2011,2,0,4,9,0,3,1,2,0.6,0.5455,0.88,0.4179,181\n2701,4/27/2011,2,0,4,10,0,3,1,2,0.62,0.5758,0.83,0.2836,92\n2702,4/27/2011,2,0,4,11,0,3,1,2,0.64,0.5909,0.78,0.2836,156\n2703,4/27/2011,2,0,4,12,0,3,1,1,0.66,0.6061,0.78,0.3284,173\n2704,4/27/2011,2,0,4,13,0,3,1,1,0.64,0.5909,0.78,0.2985,150\n2705,4/27/2011,2,0,4,14,0,3,1,1,0.68,0.6364,0.74,0.2836,148\n\n\n\n--------------------------------------------------------------------------------\nProduct_Manager (to chat_manager):\n\nTo use Spark for parallel training in FLAML, you can follow these steps:\n\n1. Prepare your data in the required format using the `to_pandas_on_spark` function from the `flaml.automl.spark.utils` module. This function converts your data into a pandas-on-spark dataframe, which is required by Spark estimators. Here is an example code snippet:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Creating a dictionary\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000]\n}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\n2. Format your data appropriately for Spark ML models. Use the `VectorAssembler` from `pyspark.ml.feature` to merge all feature columns into a single vector column. Here is an example:\n\n```python\nfrom pyspark.ml.feature import VectorAssembler\n\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\n3. Use the Spark ML models in FLAML\'s AutoML. Include the models you want to try in the `estimator_list` argument to `flaml.AutoML()`. FLAML will start trying configurations for these models. Here is an example code snippet:\n\n```python\nimport flaml\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],\n    "task": "regression"\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings\n)\n```\n\n4. To enable parallel Spark jobs during parallel tuning, set the `use_spark` parameter to `True`. FLAML will dispatch your job to the distributed Spark backend using `joblib-spark`. Here is an example code snippet:\n\n```python\nimport flaml\n\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings\n)\n```\n\nPlease note that you should not set `use_spark` to `True` when applying AutoML and Tuning for Spark Data, as SparkML models will be used for Spark Data in AutoML and Tuning.\n\nLet me know if you need anything else.\n\n--------------------------------------------------------------------------------\nTo use Spark for parallel training in FLAML, you can follow these steps:\n\n1. Prepare your data in the required format using the `to_pandas_on_spark` function from the `flaml.automl.spark.utils` module. This function converts your data into a pandas-on-spark dataframe, which is required by Spark estimators. Here is an example code snippet:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Creating a dictionary\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000]\n}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\n2. Format your data appropriately for Spark ML models. Use the `VectorAssembler` from `pyspark.ml.feature` to merge all feature columns into a single vector column. Here is an example:\n\n```python\nfrom pyspark.ml.feature import VectorAssembler\n\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\n3. Use the Spark ML models in FLAML\'s AutoML. Include the models you want to try in the `estimator_list` argument to `flaml.AutoML()`. FLAML will start trying configurations for these models. Here is an example code snippet:\n\n```python\nimport flaml\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],\n    "task": "regression"\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings\n)\n```\n\n4. To enable parallel Spark jobs during parallel tuning, set the `use_spark` parameter to `True`. FLAML will dispatch your job to the distributed Spark backend using `joblib-spark`. Here is an example code snippet:\n\n```python\nimport flaml\n\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings\n)\n```\n\nPlease note that you should not set `use_spark` to `True` when applying AutoML and Tuning for Spark Data, as SparkML models will be used for Spark Data in AutoML and Tuning.\n\nLet me know if you need anything else.\n\n--------------------------------------------------------------------------------\nSenior_Python_Engineer (to chat_manager):\n\nHere is the sample code to use Spark for parallel training in FLAML:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\nfrom pyspark.ml.feature import VectorAssembler\nimport flaml\n\n# Step 1: Prepare your data in the required format\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000]\n}\n\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\npsdf = to_pandas_on_spark(dataframe)\n\n# Step 2: Format your data for Spark ML models\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n\n# Step 3: Use Spark ML models in FLAML\'s AutoML\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],\n    "task": "regression"\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings\n)\n\n# Step 4: Enable parallel Spark jobs during parallel tuning\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings\n)\n```\n\nLet me know if you need anything else.\n\n--------------------------------------------------------------------------------\nCode_Reviewer (to chat_manager):\n\nThe code you provided is correct and follows the guidelines for using Spark for parallel training in FLAML. It includes the necessary steps to prepare the data, format it for Spark ML models, and use Spark ML models in FLAML\'s AutoML. It also demonstrates how to enable parallel Spark jobs during parallel tuning.\n\nGreat job! You can now terminate the conversation.\n\n--------------------------------------------------------------------------------\nBoss_Assistant (to chat_manager):\n\n\n\n--------------------------------------------------------------------------------\nProduct_Manager (to chat_manager):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(n.h3,{id:"call-retrieveuserproxyagent-while-init-chat-with-another-user-proxy-agent",children:"Call RetrieveUserProxyAgent while init chat with another user proxy agent"}),"\n",(0,a.jsx)(n.p,{children:"Sometimes, there might be a need to use RetrieveUserProxyAgent in group\nchat without initializing the chat with it. In such scenarios, it\nbecomes essential to create a function that wraps the RAG agents and\nallows them to be called from other agents."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"call_rag_chat()\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'Boss (to chat_manager):\n\nHow to use spark for parallel training in FLAML? Give me sample code.\n\n--------------------------------------------------------------------------------\nHow to use spark for parallel training in FLAML? Give me sample code.\n\n--------------------------------------------------------------------------------\nProduct_Manager (to chat_manager):\n\n***** Suggested function Call: retrieve_content *****\nArguments: \n{\n  "message": "How to use spark for parallel training in FLAML? Give me sample code."\n}\n*****************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING FUNCTION retrieve_content...\ndoc_ids:  [[\'doc_0\', \'doc_1\', \'doc_122\']]\nAdding doc_id doc_0 to context.\nAdding doc_id doc_1 to context.\nAdding doc_id doc_122 to context.\nBoss (to chat_manager):\n\n***** Response from calling function "retrieve_content" *****\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: How to use spark for parallel training in FLAML? Give me sample code.\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n# Creating a dictionary\ndata = {"Square_Feet": [800, 1200, 1800, 1500, 850],\n      "Age_Years": [20, 15, 10, 7, 25],\n      "Price": [100000, 200000, 300000, 240000, 120000]}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n```python\nfrom pyspark.ml.feature import VectorAssembler\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n#### Model List\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performes parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n```python\nimport flaml\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True, # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n\n2684,4/26/2011,2,0,4,17,0,2,1,1,0.68,0.6364,0.61,0.3582,521\n2685,4/26/2011,2,0,4,18,0,2,1,1,0.68,0.6364,0.65,0.4478,528\n2686,4/26/2011,2,0,4,19,0,2,1,1,0.64,0.6061,0.73,0.4179,328\n2687,4/26/2011,2,0,4,20,0,2,1,1,0.64,0.6061,0.73,0.3582,234\n2688,4/26/2011,2,0,4,21,0,2,1,1,0.62,0.5909,0.78,0.2836,195\n2689,4/26/2011,2,0,4,22,0,2,1,2,0.6,0.5606,0.83,0.194,148\n2690,4/26/2011,2,0,4,23,0,2,1,2,0.6,0.5606,0.83,0.2239,78\n2691,4/27/2011,2,0,4,0,0,3,1,1,0.6,0.5606,0.83,0.2239,27\n2692,4/27/2011,2,0,4,1,0,3,1,1,0.6,0.5606,0.83,0.2537,17\n2693,4/27/2011,2,0,4,2,0,3,1,1,0.58,0.5455,0.88,0.2537,5\n2694,4/27/2011,2,0,4,3,0,3,1,2,0.58,0.5455,0.88,0.2836,7\n2695,4/27/2011,2,0,4,4,0,3,1,1,0.56,0.5303,0.94,0.2239,6\n2696,4/27/2011,2,0,4,5,0,3,1,2,0.56,0.5303,0.94,0.2537,17\n2697,4/27/2011,2,0,4,6,0,3,1,1,0.56,0.5303,0.94,0.2537,84\n2698,4/27/2011,2,0,4,7,0,3,1,2,0.58,0.5455,0.88,0.2836,246\n2699,4/27/2011,2,0,4,8,0,3,1,2,0.58,0.5455,0.88,0.3284,444\n2700,4/27/2011,2,0,4,9,0,3,1,2,0.6,0.5455,0.88,0.4179,181\n2701,4/27/2011,2,0,4,10,0,3,1,2,0.62,0.5758,0.83,0.2836,92\n2702,4/27/2011,2,0,4,11,0,3,1,2,0.64,0.5909,0.78,0.2836,156\n2703,4/27/2011,2,0,4,12,0,3,1,1,0.66,0.6061,0.78,0.3284,173\n2704,4/27/2011,2,0,4,13,0,3,1,1,0.64,0.5909,0.78,0.2985,150\n2705,4/27/2011,2,0,4,14,0,3,1,1,0.68,0.6364,0.74,0.2836,148\n\n\n*************************************************************\n\n--------------------------------------------------------------------------------\nProduct_Manager (to chat_manager):\n\nTo use Spark for parallel training in FLAML, you can follow these steps:\n\n1. Prepare your data in the required format using Spark data. You can use the `to_pandas_on_spark` function from the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark dataframe.\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Creating a dictionary\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000]\n}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\n2. Use the Spark ML estimators provided by FLAML. You can include the models you want to try in the `estimator_list` argument of the `flaml.AutoML` class. FLAML will start trying configurations for these models.\n\n```python\nimport flaml\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # Optional: specify the Spark estimator\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n3. Enable parallel Spark jobs by setting the `use_spark` parameter to `True` in the `fit` method. This will dispatch the job to the distributed Spark backend using `joblib-spark`.\n\n```python\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    use_spark=True,\n)\n```\n\nNote: Make sure you have Spark installed and configured properly before running the code.\n\nPlease let me know if you need any further assistance.\n\n--------------------------------------------------------------------------------\nSenior_Python_Engineer (to chat_manager):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})})]})}function c(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>s});var a=t(67294);const o={},r=a.createContext(o);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);