"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[867],{47142:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var a=t(85893),o=t(11151);const s={custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_capability_long_context_handling.ipynb",description:"Use the TransformChatHistory capability to handle long contexts",source_notebook:"/notebook/agentchat_capability_long_context_handling.ipynb",tags:["long context handling","capability"],title:"Handling A Long Context via `TransformChatHistory`"},i="Handling A Long Context via TransformChatHistory",l={id:"notebooks/agentchat_capability_long_context_handling",title:"Handling A Long Context via `TransformChatHistory`",description:"Use the TransformChatHistory capability to handle long contexts",source:"@site/docs/notebooks/agentchat_capability_long_context_handling.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_capability_long_context_handling",permalink:"/autogen/docs/notebooks/agentchat_capability_long_context_handling",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_capability_long_context_handling.ipynb",tags:[{label:"long context handling",permalink:"/autogen/docs/tags/long-context-handling"},{label:"capability",permalink:"/autogen/docs/tags/capability"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_capability_long_context_handling.ipynb",description:"Use the TransformChatHistory capability to handle long contexts",source_notebook:"/notebook/agentchat_capability_long_context_handling.ipynb",tags:["long context handling","capability"],title:"Handling A Long Context via `TransformChatHistory`"},sidebar:"notebooksSidebar",previous:{title:"Task Solving with Code Generation, Execution and Debugging",permalink:"/autogen/docs/notebooks/agentchat_auto_feedback_from_code_execution"},next:{title:"Conversations with Chat History Compression Enabled",permalink:"/autogen/docs/notebooks/agentchat_compression"}},r={},p=[{value:"Why is this important?",id:"why-is-this-important",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"handling-a-long-context-via-transformchathistory",children:["Handling A Long Context via ",(0,a.jsx)(n.code,{children:"TransformChatHistory"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_capability_long_context_handling.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_capability_long_context_handling.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["This notebook illustrates how you can use the ",(0,a.jsx)(n.code,{children:"TransformChatHistory"}),"\ncapability to give any ",(0,a.jsx)(n.code,{children:"Conversable"})," agent an ability to handle a long\ncontext."]}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsxs)(n.p,{children:["Install ",(0,a.jsx)(n.code,{children:"pyautogen"}),":"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import os\nimport autogen\nfrom autogen.agentchat.contrib.capabilities import context_handling\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'llm_config = {\n    "config_list": [{"model": "gpt-3.5-turbo", "api_key": os.environ.get("OPENAI_API_KEY")}],\n}\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about configuring LLMs for agents ",(0,a.jsx)(n.a,{href:"/docs/topics/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsxs)(n.p,{children:["To add this ability to any agent, define the capability and then use\n",(0,a.jsx)(n.code,{children:"add_to_agent"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'assistant = autogen.AssistantAgent(\n    "assistant",\n    llm_config=llm_config,\n)\n\n\n# Instantiate the capability to manage chat history\nmanage_chat_history = context_handling.TransformChatHistory(max_tokens_per_message=50, max_messages=10, max_tokens=1000)\n# Add the capability to the assistant\nmanage_chat_history.add_to_agent(assistant)\n\nuser_proxy = autogen.UserProxyAgent(\n    "user_proxy",\n    human_input_mode="NEVER",\n    is_termination_msg=lambda x: "TERMINATE" in x.get("content", ""),\n    code_execution_config={\n        "work_dir": "coding",\n        "use_docker": False,\n    },\n    max_consecutive_auto_reply=10,\n)\n\nuser_proxy.initiate_chat(assistant, message="plot and save a graph of x^2 from -10 to 10")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"user_proxy (to assistant):\n\nplot and save a graph of x^2 from -10 to 10\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nTo plot and save a graph of the function x^2 from -10 to 10, you can use the matplotlib library in Python. Here is the code:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate x values from -10 to 10\nx = np.linspace(-10, 10, 100)\n\n# Calculate corresponding y values (x^2)\ny = x**2\n\n# Create the plot\nplt.plot(x, y)\n\n# Add labels and title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Plot of x^2')\n\n# Save the plot as a file\nplt.savefig('x_squared_plot.png')\n\n# Show the plot\nplt.show()\n```\n\nThis code will create a plot of the function x^2 and save it as \"x_squared_plot.png\" in the current directory. Make sure you have the matplotlib library installed before running this code.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nFigure(640x480)\n\n\n--------------------------------------------------------------------------------\nTruncated 0 messages. Reduced from 3 to 3.\nTruncated 139 tokens. Tokens reduced from 223 to 84\nassistant (to user_proxy):\n\nGreat! The code executed successfully and generated a plot of the function x^2 from -10 to 10. The plot was displayed in a figure with size 640x480. \n\nTo save the graph as an image file, you can modify the code as follows:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate x values from -10 to 10\nx = np.linspace(-10, 10, 100)\n\n# Generate y values by squaring x\ny = x ** 2\n\n# Plot the graph\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('x^2')\nplt.title('Graph of x^2')\nplt.grid(True)\n\n# Save the graph as an image file, for example as 'graph.png'\nplt.savefig('graph.png')\n```\n\nBy executing this updated code, the graph will be saved as an image file named 'graph.png' in the same directory as your Python script.\n\nPlease let me know if you need any further assistance.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \n\n\n--------------------------------------------------------------------------------\nTruncated 0 messages. Reduced from 5 to 5.\nTruncated 159 tokens. Tokens reduced from 306 to 147\nassistant (to user_proxy):\n\nGreat! The code executed successfully and generated a plot of the function x^2 from -10 to 10. The plot was displayed in a figure with size 640x480.\n\nTo save the graph as an image file, you can modify the code as follows:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate x values from -10 to 10\nx = np.linspace(-10, 10, 100)\n\n# Calculate y values (x^2)\ny = x**2\n\n# Plot the graph\nplt.plot(x, y)\n\n# Add labels and title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Graph of x^2')\n\n# Save the graph as an image file\nplt.savefig('graph.png')\n\n# Close the plot\nplt.close()\n```\n\nThis code will save the plot as an image file named \"graph.png\" in the current directory. You can change the filename and path if needed.\n\nPlease let me know if you need any further assistance.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \n\n\n--------------------------------------------------------------------------------\nTruncated 0 messages. Reduced from 7 to 7.\nTruncated 159 tokens. Tokens reduced from 369 to 210\nassistant (to user_proxy):\n\nGreat! The code executed successfully and generated a plot of the function x^2 from -10 to 10. The plot was displayed in a figure with size 640x480.\n\nTo save the graph as an image file, you can modify the code as follows:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate x values\nx = np.linspace(-10, 10, 100)\n\n# Generate y values\ny = x**2\n\n# Plot the graph\nplt.plot(x, y)\n\n# Set labels and title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Graph of x^2')\n\n# Save the graph as an image file\nplt.savefig('graph.png')\n```\n\nThis code will save the graph as a PNG image file named 'graph.png' in the same directory where you are running the script. You can change the filename and format (e.g., 'graph.jpg') if desired.\n\nPlease note that you will need to have the matplotlib library installed to run this code. If you don't have it installed, you can install it by running `pip install matplotlib` in your terminal or command prompt.\n\nLet me know if you need any further assistance!\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \n\n\n--------------------------------------------------------------------------------\nTruncated 0 messages. Reduced from 9 to 9.\nTruncated 198 tokens. Tokens reduced from 471 to 273\nassistant (to user_proxy):\n\nGreat! The code executed successfully and generated a plot of the function x^2 from -10 to 10. The plot was displayed in a figure with size 640x480.\n\nTo save the graph as an image file, you can modify the code as follows:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate x values from -10 to 10\nx = np.linspace(-10, 10, 100)\n\n# Generate y values by squaring x\ny = x**2\n\n# Plot the graph\nplt.plot(x, y)\n\n# Add labels and title\nplt.xlabel('x')\nplt.ylabel('x^2')\nplt.title('Graph of x^2')\n\n# Save the graph as an image file\nplt.savefig('x_squared_plot.png')\n\n# Display the graph\nplt.show()\n```\n\nThis code will save the graph as a PNG image file named \"x_squared_plot.png\" in the current working directory. You can customize the filename and file format according to your needs.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nFigure(640x480)\n\n\n--------------------------------------------------------------------------------\nTruncated 1 messages. Reduced from 11 to 10.\nTruncated 174 tokens. Tokens reduced from 501 to 327\nassistant (to user_proxy):\n\nGreat! The code executed successfully and generated a plot of the function x^2 from -10 to 10. The plot was displayed in a figure with size 640x480.\n\nTo save the graph as an image file, you can modify the code as follows:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate x values\nx = np.linspace(-10, 10, 100)\n\n# Generate y values\ny = x ** 2\n\n# Create the plot\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Graph of x^2')\n\n# Save the plot as an image file\nplt.savefig('x_squared.png')\n\nplt.show()\n```\n\nThe code will save the plot as a PNG image file named \"x_squared.png\" in the current directory. You can change the filename or file extension as needed.\n\nPlease let me know if you need any further assistance!\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nFigure(640x480)\n\n\n--------------------------------------------------------------------------------\nTruncated 3 messages. Reduced from 13 to 10.\nTruncated 227 tokens. Tokens reduced from 554 to 327\nassistant (to user_proxy):\n\nTo save the graph as an image file, you can modify the code as follows:\n\n```python\nimport matplotlib.pyplot as plt\n\n# Create the plot\nplt.plot(x, y)\n\n# Set the plot title and axes labels\nplt.title(\"Plot of x^2\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n\n# Save the plot as an image file\nplt.savefig(\"plot.png\")\n```\n\nThis code will save the plot as a PNG file with the name \"plot.png\" in the same directory as your Python script. You can change the file name and format (e.g., \"plot.jpg\") if desired.\n\nOnce you run this modified code, the plot will be saved as an image file. You can then use this file for further analysis or to share the plot with others.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 1 (execution failed)\nCode output: \nTraceback (most recent call last):\n  File \"\", line 4, in <module>\n    plt.plot(x, y)\nNameError: name 'x' is not defined\n\n\n--------------------------------------------------------------------------------\nTruncated 5 messages. Reduced from 15 to 10.\nTruncated 258 tokens. Tokens reduced from 622 to 364\nassistant (to user_proxy):\n\nIt seems that the code encountered an error because the variables `x` and `y` were not defined.\n\nLet's modify the code to define the variables `x` and `y` and then save the graph as an image file:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the x values as an array from -10 to 10\nx = np.linspace(-10, 10, 100)\n\n# Define the y values as the square of x\ny = x ** 2\n\n# Create the plot\nplt.plot(x, y)\n\n# Set the plot title and axes labels\nplt.title(\"Plot of x^2\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n\n# Save the plot as an image file\nplt.savefig('plot.png')\n```\nThis code uses the `numpy` library to generate an array of x values from -10 to 10 and calculates the corresponding y values as the square of x. The plot is then saved as an image file named `plot.png`.\n\nPlease make sure you have the `numpy` and `matplotlib` libraries installed before running this code. Let me know if you need help with that.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \n\n\n--------------------------------------------------------------------------------\nTruncated 7 messages. Reduced from 17 to 10.\nTruncated 401 tokens. Tokens reduced from 765 to 364\nassistant (to user_proxy):\n\nGreat! The code executed successfully. The graph was saved as an image file with the name \"plot.png\" in the current working directory.\n\nNow you can share the \"plot.png\" file or view it using an image viewer.\n\nLet me know if there's anything else I can help with!\n\n--------------------------------------------------------------------------------\nuser_proxy (to assistant):\n\n\n\n--------------------------------------------------------------------------------\nTruncated 9 messages. Reduced from 19 to 10.\nTruncated 282 tokens. Tokens reduced from 633 to 351\nassistant (to user_proxy):\n\nIs there anything else I can help you with?\n\n--------------------------------------------------------------------------------\nuser_proxy (to assistant):\n\n\n\n--------------------------------------------------------------------------------\nTruncated 11 messages. Reduced from 21 to 10.\nTruncated 342 tokens. Tokens reduced from 634 to 292\nassistant (to user_proxy):\n\nIf you need any further assistance, feel free to ask. I'm here to help!\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"ChatResult(chat_history=[{'content': 'plot and save a graph of x^2 from -10 to 10', 'role': 'assistant'}, {'content': 'To plot and save a graph of the function x^2 from -10 to 10, you can use the matplotlib library in Python. Here is the code:\\n\\n```python\\nimport matplotlib.pyplot as plt\\nimport numpy as np\\n\\n# Generate x values from -10 to 10\\nx = np.linspace(-10, 10, 100)\\n\\n# Calculate corresponding y values (x^2)\\ny = x**2\\n\\n# Create the plot\\nplt.plot(x, y)\\n\\n# Add labels and title\\nplt.xlabel(\\'x\\')\\nplt.ylabel(\\'y\\')\\nplt.title(\\'Plot of x^2\\')\\n\\n# Save the plot as a file\\nplt.savefig(\\'x_squared_plot.png\\')\\n\\n# Show the plot\\nplt.show()\\n```\\n\\nThis code will create a plot of the function x^2 and save it as \"x_squared_plot.png\" in the current directory. Make sure you have the matplotlib library installed before running this code.', 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\nFigure(640x480)\\n', 'role': 'assistant'}, {'content': \"Great! The code executed successfully and generated a plot of the function x^2 from -10 to 10. The plot was displayed in a figure with size 640x480. \\n\\nTo save the graph as an image file, you can modify the code as follows:\\n\\n```python\\nimport matplotlib.pyplot as plt\\nimport numpy as np\\n\\n# Generate x values from -10 to 10\\nx = np.linspace(-10, 10, 100)\\n\\n# Generate y values by squaring x\\ny = x ** 2\\n\\n# Plot the graph\\nplt.plot(x, y)\\nplt.xlabel('x')\\nplt.ylabel('x^2')\\nplt.title('Graph of x^2')\\nplt.grid(True)\\n\\n# Save the graph as an image file, for example as 'graph.png'\\nplt.savefig('graph.png')\\n```\\n\\nBy executing this updated code, the graph will be saved as an image file named 'graph.png' in the same directory as your Python script.\\n\\nPlease let me know if you need any further assistance.\", 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\n', 'role': 'assistant'}, {'content': 'Great! The code executed successfully and generated a plot of the function x^2 from -10 to 10. The plot was displayed in a figure with size 640x480.\\n\\nTo save the graph as an image file, you can modify the code as follows:\\n\\n```python\\nimport matplotlib.pyplot as plt\\nimport numpy as np\\n\\n# Generate x values from -10 to 10\\nx = np.linspace(-10, 10, 100)\\n\\n# Calculate y values (x^2)\\ny = x**2\\n\\n# Plot the graph\\nplt.plot(x, y)\\n\\n# Add labels and title\\nplt.xlabel(\\'x\\')\\nplt.ylabel(\\'y\\')\\nplt.title(\\'Graph of x^2\\')\\n\\n# Save the graph as an image file\\nplt.savefig(\\'graph.png\\')\\n\\n# Close the plot\\nplt.close()\\n```\\n\\nThis code will save the plot as an image file named \"graph.png\" in the current directory. You can change the filename and path if needed.\\n\\nPlease let me know if you need any further assistance.', 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\n', 'role': 'assistant'}, {'content': \"Great! The code executed successfully and generated a plot of the function x^2 from -10 to 10. The plot was displayed in a figure with size 640x480.\\n\\nTo save the graph as an image file, you can modify the code as follows:\\n\\n```python\\nimport matplotlib.pyplot as plt\\nimport numpy as np\\n\\n# Generate x values\\nx = np.linspace(-10, 10, 100)\\n\\n# Generate y values\\ny = x**2\\n\\n# Plot the graph\\nplt.plot(x, y)\\n\\n# Set labels and title\\nplt.xlabel('x')\\nplt.ylabel('y')\\nplt.title('Graph of x^2')\\n\\n# Save the graph as an image file\\nplt.savefig('graph.png')\\n```\\n\\nThis code will save the graph as a PNG image file named 'graph.png' in the same directory where you are running the script. You can change the filename and format (e.g., 'graph.jpg') if desired.\\n\\nPlease note that you will need to have the matplotlib library installed to run this code. If you don't have it installed, you can install it by running `pip install matplotlib` in your terminal or command prompt.\\n\\nLet me know if you need any further assistance!\", 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\n', 'role': 'assistant'}, {'content': 'Great! The code executed successfully and generated a plot of the function x^2 from -10 to 10. The plot was displayed in a figure with size 640x480.\\n\\nTo save the graph as an image file, you can modify the code as follows:\\n\\n```python\\nimport matplotlib.pyplot as plt\\nimport numpy as np\\n\\n# Generate x values from -10 to 10\\nx = np.linspace(-10, 10, 100)\\n\\n# Generate y values by squaring x\\ny = x**2\\n\\n# Plot the graph\\nplt.plot(x, y)\\n\\n# Add labels and title\\nplt.xlabel(\\'x\\')\\nplt.ylabel(\\'x^2\\')\\nplt.title(\\'Graph of x^2\\')\\n\\n# Save the graph as an image file\\nplt.savefig(\\'x_squared_plot.png\\')\\n\\n# Display the graph\\nplt.show()\\n```\\n\\nThis code will save the graph as a PNG image file named \"x_squared_plot.png\" in the current working directory. You can customize the filename and file format according to your needs.', 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\nFigure(640x480)\\n', 'role': 'assistant'}, {'content': 'Great! The code executed successfully and generated a plot of the function x^2 from -10 to 10. The plot was displayed in a figure with size 640x480.\\n\\nTo save the graph as an image file, you can modify the code as follows:\\n\\n```python\\nimport matplotlib.pyplot as plt\\nimport numpy as np\\n\\n# Generate x values\\nx = np.linspace(-10, 10, 100)\\n\\n# Generate y values\\ny = x ** 2\\n\\n# Create the plot\\nplt.plot(x, y)\\nplt.xlabel(\\'x\\')\\nplt.ylabel(\\'y\\')\\nplt.title(\\'Graph of x^2\\')\\n\\n# Save the plot as an image file\\nplt.savefig(\\'x_squared.png\\')\\n\\nplt.show()\\n```\\n\\nThe code will save the plot as a PNG image file named \"x_squared.png\" in the current directory. You can change the filename or file extension as needed.\\n\\nPlease let me know if you need any further assistance!', 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\nFigure(640x480)\\n', 'role': 'assistant'}, {'content': 'To save the graph as an image file, you can modify the code as follows:\\n\\n```python\\nimport matplotlib.pyplot as plt\\n\\n# Create the plot\\nplt.plot(x, y)\\n\\n# Set the plot title and axes labels\\nplt.title(\"Plot of x^2\")\\nplt.xlabel(\"x\")\\nplt.ylabel(\"y\")\\n\\n# Save the plot as an image file\\nplt.savefig(\"plot.png\")\\n```\\n\\nThis code will save the plot as a PNG file with the name \"plot.png\" in the same directory as your Python script. You can change the file name and format (e.g., \"plot.jpg\") if desired.\\n\\nOnce you run this modified code, the plot will be saved as an image file. You can then use this file for further analysis or to share the plot with others.', 'role': 'user'}, {'content': 'exitcode: 1 (execution failed)\\nCode output: \\nTraceback (most recent call last):\\n  File \"\", line 4, in <module>\\n    plt.plot(x, y)\\nNameError: name \\'x\\' is not defined\\n', 'role': 'assistant'}, {'content': 'It seems that the code encountered an error because the variables `x` and `y` were not defined.\\n\\nLet\\'s modify the code to define the variables `x` and `y` and then save the graph as an image file:\\n\\n```python\\nimport matplotlib.pyplot as plt\\nimport numpy as np\\n\\n# Define the x values as an array from -10 to 10\\nx = np.linspace(-10, 10, 100)\\n\\n# Define the y values as the square of x\\ny = x ** 2\\n\\n# Create the plot\\nplt.plot(x, y)\\n\\n# Set the plot title and axes labels\\nplt.title(\"Plot of x^2\")\\nplt.xlabel(\"x\")\\nplt.ylabel(\"y\")\\n\\n# Save the plot as an image file\\nplt.savefig(\\'plot.png\\')\\n```\\nThis code uses the `numpy` library to generate an array of x values from -10 to 10 and calculates the corresponding y values as the square of x. The plot is then saved as an image file named `plot.png`.\\n\\nPlease make sure you have the `numpy` and `matplotlib` libraries installed before running this code. Let me know if you need help with that.', 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\n', 'role': 'assistant'}, {'content': 'Great! The code executed successfully. The graph was saved as an image file with the name \"plot.png\" in the current working directory.\\n\\nNow you can share the \"plot.png\" file or view it using an image viewer.\\n\\nLet me know if there\\'s anything else I can help with!', 'role': 'user'}, {'content': '', 'role': 'assistant'}, {'content': 'Is there anything else I can help you with?', 'role': 'user'}, {'content': '', 'role': 'assistant'}, {'content': \"If you need any further assistance, feel free to ask. I'm here to help!\", 'role': 'user'}], summary=\"If you need any further assistance, feel free to ask. I'm here to help!\", cost=({'total_cost': 0.015855, 'gpt-3.5-turbo-0613': {'cost': 0.015855, 'prompt_tokens': 8242, 'completion_tokens': 1746, 'total_tokens': 9988}}, {'total_cost': 0.0147465, 'gpt-3.5-turbo-0613': {'cost': 0.0147465, 'prompt_tokens': 7755, 'completion_tokens': 1557, 'total_tokens': 9312}}), human_input=[])\n"})}),"\n",(0,a.jsx)(n.h2,{id:"why-is-this-important",children:"Why is this important?"}),"\n",(0,a.jsx)(n.p,{children:"This capability is especially useful if you expect the agent histories\nto become exceptionally large and exceed the context length offered by\nyour LLM. For example, in the example below, we will define two agents \u2013\none without this ability and one with this ability."}),"\n",(0,a.jsx)(n.p,{children:"The agent with this ability will be able to handle longer chat history\nwithout crashing."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'assistant_base = autogen.AssistantAgent(\n    "assistant",\n    llm_config=llm_config,\n)\n\nassistant_with_context_handling = autogen.AssistantAgent(\n    "assistant",\n    llm_config=llm_config,\n)\n# suppose this capability is not available\nmanage_chat_history = context_handling.TransformChatHistory(max_tokens_per_message=50, max_messages=10, max_tokens=1000)\nmanage_chat_history.add_to_agent(assistant_with_context_handling)\n\nuser_proxy = autogen.UserProxyAgent(\n    "user_proxy",\n    human_input_mode="NEVER",\n    is_termination_msg=lambda x: "TERMINATE" in x.get("content", ""),\n    code_execution_config={\n        "work_dir": "coding",\n        "use_docker": False,\n    },\n    max_consecutive_auto_reply=2,\n)\n\n# suppose the chat history is large\n# Create a very long chat history that is bound to cause a crash\n# for gpt 3.5\nlong_history = []\nfor i in range(1000):\n    # define a fake, very long message\n    assitant_msg = {"role": "assistant", "content": "test " * 1000}\n    user_msg = {"role": "user", "content": ""}\n\n    assistant_base.send(assitant_msg, user_proxy, request_reply=False, silent=True)\n    assistant_with_context_handling.send(assitant_msg, user_proxy, request_reply=False, silent=True)\n    user_proxy.send(user_msg, assistant_base, request_reply=False, silent=True)\n    user_proxy.send(user_msg, assistant_with_context_handling, request_reply=False, silent=True)\n\ntry:\n    user_proxy.initiate_chat(assistant_base, message="plot and save a graph of x^2 from -10 to 10", clear_history=False)\nexcept Exception as e:\n    print("Encountered an error with the base assistant")\n    print(e)\n    print("\\n\\n")\n\ntry:\n    user_proxy.initiate_chat(\n        assistant_with_context_handling, message="plot and save a graph of x^2 from -10 to 10", clear_history=False\n    )\nexcept Exception as e:\n    print(e)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"user_proxy (to assistant):\n\nplot and save a graph of x^2 from -10 to 10\n\n--------------------------------------------------------------------------------\nEncountered an error with the base assistant\nError code: 400 - {'error': {'message': \"This model's maximum context length is 4097 tokens. However, your messages resulted in 1009487 tokens. Please reduce the length of the messages.\", 'type': 'invalid_request_error', 'param': 'messages', 'code': 'context_length_exceeded'}}\n\n\n\nuser_proxy (to assistant):\n\nplot and save a graph of x^2 from -10 to 10\n\n--------------------------------------------------------------------------------\nTruncated 1991 messages. Reduced from 2001 to 10.\nTruncated 1000800 tokens. Tokens reduced from 1001015 to 215\nassistant (to user_proxy):\n\nHere's the Python code to plot and save a graph of x^2 from -10 to 10:\n\n```python\n# filename: plot_graph.py\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate x values from -10 to 10\nx = np.linspace(-10, 10, 100)\n\n# Calculate y values as x^2\ny = x**2\n\n# Create plot\nplt.plot(x, y)\n\n# Add labels and title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Graph of y = x^2')\n\n# Save the plot as a PNG image\nplt.savefig('graph.png')\n\n# Show the plot\nplt.show()\n```\n\nTo execute this code, save it to a file called `plot_graph.py` and run it using Python. This will generate a file called `graph.png` in the same directory, which will contain the graph of x^2 from -10 to 10.\n\nNote: Make sure you have the matplotlib library installed. You can install it by running `pip install matplotlib` in your terminal or command prompt.\n\nLet me know if you need any further assistance!\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nFigure(640x480)\n\n\n--------------------------------------------------------------------------------\nTruncated 1993 messages. Reduced from 2003 to 10.\nTruncated 997232 tokens. Tokens reduced from 997466 to 234\nassistant (to user_proxy):\n\nGreat! The graph of x^2 from -10 to 10 has been plotted and saved successfully. You can find the saved graph as an image file on your computer. \n\nIs there anything else I can help you with?\n\n--------------------------------------------------------------------------------\nuser_proxy (to assistant):\n\n\n\n--------------------------------------------------------------------------------\nTruncated 1995 messages. Reduced from 2005 to 10.\nTruncated 997096 tokens. Tokens reduced from 997326 to 230\nassistant (to user_proxy):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n"})})]})}function c(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>i});var a=t(67294);const o={},s=a.createContext(o);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);